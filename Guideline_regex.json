[
  {
    "id": "933100",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:<\\?(?:[^x]|x[^m]|xm[^l]|xml[^\\s]|xml$|$)|<\\?php|\\[(?:/|\\x5c)?php\\]) ",
    "explanation": "This expression is used to detect potential PHP code injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive in ModSecurity, a web application firewall, that specifies a rule to be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the request that the rule should be applied to. In this case, it includes cookies, arguments, and XML data.\\n- @rx: This is a ModSecurity operator that specifies a regular expression to match against the selected variables.\\n- (?:<\\\\?(?:[^x]|x[^m]|xm[^l]|xml[^\\\\s]|xml$|$)|<\\\\?php|\\\\[(?:/|\\\\x5c)?php\\\\]): This is the regular expression itself, which matches common PHP opening tags, including short tags and the opening tag with a leading square bracket.\\n\\nFor example, if a request contains a PHP opening tag in a cookie or argument value, this rule would trigger and block the request."
  },
  {
    "id": "955160",
    "regex": "SecRule RESPONSE_BODY \"@rx <title>Symlink_Sa [0-9.]+</title>\"",
    "explanation": "This expression is used to match a specific pattern in the response body of a web server. It is likely used as part of a security rule to detect potential vulnerabilities or attacks.\\n\\nThe regex expression consists of three parts:\\n1. \\\"SecRule RESPONSE_BODY\\\": This specifies that the rule should be applied to the response body of the server.\\n2. \\\"@rx\\\": This indicates that the following pattern should be interpreted as a regular expression.\\n3. \\\"<title>Symlink_Sa [0-9.]+</title>\\\": This is the regular expression pattern that is being matched. It looks for the string \\\"Symlink_Sa\\\" followed by one or more digits or periods, enclosed in HTML title tags.\\n\\nFor example, if the response body of a server contained the following HTML code:\\n<title>Symlink_Sa 1.2.3</title>\\nThe provided regex expression would match the entire string."
  },
  {
    "id": "933110",
    "regex": "SecRule FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X.Filename|REQUEST_HEADERS:X-File-Name @rx .*\\.ph(?:p\\d*|tml|ar|ps|t|pt)\\.*$ ",
    "explanation": "This expression is used to detect potential attacks on web servers by checking for file names that may indicate malicious intent.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X.Filename|REQUEST_HEADERS:X-File-Name: These are the locations where the rule will be applied, including file uploads and various HTTP headers that may contain file names.\\n- @rx: This is a ModSecurity operator that specifies a regular expression to match against the input.\\n- .*\\\\.ph(?:p\\\\d*|tml|ar|ps|t|pt)\\\\.*$: This is the regular expression itself, which matches file names with extensions that may indicate malicious intent, such as .php, .php5, .phtml, .phar, .phpt, .ps, and .t.\\n\\nFor example, this rule would trigger if a user attempted to upload a file named \\\"shell.php\\\" or if a request header contained a file name like \\\"evil.phtml\\\"."
  },
  {
    "id": "933200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:bzip2|expect|glob|ogg|(?:ph|r)ar|ssh2(?:.(?:s(?:hell|(?:ft|c)p)|exec|tunnel))?|z(?:ip|lib)):// ",
    "explanation": "This expression is used to detect potentially malicious input in HTTP requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive in ModSecurity, a web application firewall, that specifies a rule to be applied to incoming requests. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the HTTP request that the rule will be applied to. \\n- @rx: This is a ModSecurity operator that specifies a regular expression to be matched against the input. \\n- (?:bzip2|expect|glob|ogg|(?:ph|r)ar|ssh2(?:.(?:s(?:hell|(?:ft|c)p)|exec|tunnel))?|z(?:ip|lib)): This is the regular expression itself, which matches against various potentially malicious strings that could be included in the input. \\n\\nFor example, this expression would match against a request that includes the string \\\"phar://\\\" or \\\"ssh2.shell://\\\" in the ARGS variable."
  },
  {
    "id": "933131",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx AUTH_TYPE|HTTP_(?:ACCEPT(?:_(?:CHARSET|ENCODING|LANGUAGE))?|CONNECTION|(?:HOS|USER_AGEN)T|KEEP_ALIVE|(?:REFERE|X_FORWARDED_FO)R)|ORIG_PATH_INFO|PATH_(?:INFO|TRANSLATED)|QUERY_STRING|REQUEST_URI ",
    "explanation": "This expression is used to match against various parts of an HTTP request, including cookies, arguments, and headers. It is commonly used in web application firewalls to detect and prevent attacks.\\n\\nThe regex expression consists of several parts:\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This part matches against various parts of the request, including cookies, arguments, and XML data.\\n- @rx: This is a flag that indicates that the following pattern is a regular expression.\\n- AUTH_TYPE|HTTP_(?:ACCEPT(?:_(?:CHARSET|ENCODING|LANGUAGE))?|CONNECTION|(?:HOS|USER_AGEN)T|KEEP_ALIVE|(?:REFERE|X_FORWARDED_FO)R)|ORIG_PATH_INFO|PATH_(?:INFO|TRANSLATED)|QUERY_STRING|REQUEST_URI: This part matches against various HTTP headers and request information.\\n\\nFor example, the expression can be used to detect if a request contains a suspicious user agent header or if it includes a potentially malicious query string."
  },
  {
    "id": "933161",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:a(?:bs|cosh?|r(?:ray|sort)|s(?:inh?|(?:o|se)rt)|tan[2h]?)|b(?:asename|indec)|c(?:eil|h(?:dir|eckdate|mod|o(?:p|wn)|root)|lose(?:dir|log)|o(?:(?:mpac|(?:nsta|u)n)t|py|sh?)|(?:ryp|urren)t)|d(?:ate|e(?:coct|fined?)|i(?:(?:skfreespac)?e|r(?:name)?)|(?:oubleva)?l)|e(?:a(?:ch|ster_da(?:te|ys))|cho|mpty|nd|r(?:egi?|ror_log)|x(?:(?:i|trac)t|p(?:lode)?))|f(?:close|eof|gets|ile(?:owner|pro|(?:siz|typ)e)|l(?:o(?:atval|ck|or)|ush)|(?:mo|rea)d|stat|t(?:ell|ok)|unction)|g(?:et(?:date|t(?:ext|ype))|mdate)|h(?:ash|e(?:ader(?:s_(?:lis|sen)t)?|brev)|ypot)|i(?:conv|(?:dat|mplod)e|n(?:(?:clud|vok)e|t(?:div|val))|s(?:_(?:a(?:rray)?|bool|(?:calla|dou)ble|f(?:inite|loat)|in(?:finite|t(?:eger)?)|l(?:ink|ong)|n(?:an|u(?:ll|meric))|object|re(?:al|source)|s(?:calar|tring))|set))|join|k(?:ey|sort)|l(?:(?:cfirs|sta)t|evenshtein|i(?:nk(?:info)?|st)|o(?:caltime|g(?:1[0p])?)|trim)|m(?:a(?:i[ln]|x)|b(?:ereg|split)|etaphone|hash|i(?:crotime|n)|y?sql)|n(?:atsor|ex)t|o(?:ctdec|penlog|rd)|p(?:a(?:ck|thinfo)|close|i|o[sw]|r(?:ev|intf?))|quotemeta|r(?:an(?:d|ge)|e(?:adlin[ek]|(?:cod|nam|quir)e|set|wind)|ound|sort|trim)|s(?:(?:candi|ubst)r|(?:e(?:rializ|ttyp)|huffl)e|i(?:milar_text|nh?|zeof)|leep|o(?:rt|undex)|p(?:liti?|rintf)|qrt|rand|t(?:at|r(?:coll|(?:le|sp)n))|y(?:mlink|slog))|t(?:a(?:int|nh?)|e(?:mpnam|xtdomain)|ime|ouch|rim)|u(?:cfirst|mask|n(?:iqid|link|(?:se|tain)t)|s(?:leep|ort))|virtual|wordwrap)(?:[\\s\\v]|/(?:\\*.*\\*/|/.*)|#.*)*\\(.*\\) ",
    "explanation": "{\"explanation\":\"Regex: SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\\\b(?:a(?:bs|cosh?|r(?:ray|sort)|s(?:inh?|(?:o|se)rt)|taaaan[2h]?)|b(?:asename|indec)|c(?:eil|h(?:dir|eckdate|mod|o(?:p|wn)|root)|lose(?:dir|log)|o(?:(?:mpac|(?:nsta|u)n)t|py|sh?)|(?:ryp|urren)t)|d(?:ate|e(?:coct|fined?)|i(?:(?:skfreespac)?e|r(?:name)?)|(?:oubleva)?l)|e(?:a(?:ch|ster_da(?:te|ys))|cho|mpty|nd|r(?:egi?|ror_log)|x(?:(?:i|trac)t|p(?:lode)?))|f(?:close|eof|gets|ile(?:owner|pro|(?:siz|typ)e)|l(?:o(?:atval|ck|or)|ush)|(?:mo|rea)d|stat|t(?:ell|ok)|unction)|g(?:et(?:date|t(?:ext|ype))|mdate)|h(?:ash|e(?:ader(?:s_(?:lis|sen)t)?|brev)|ypot)|i(?:conv|(?:dat|mplod)e|n(?:(?:clud|vok)e|t(?:div|val))|s(?:_(?:a(?:rray)?|bool|(?:calla|dou)ble|f(?:inite|loat)|in(?:finite|t(?:eger)?)|l(?:ink|ong)|n(?:an|u(?:ll|meric))|object|re(?:al|source)|s(?:calar|tring))|set))|join|k(?:ey|sort)|l(?:(?:cfirs|sta)t|evenshtein|i(?:nk(?:info)?|st)|o(?:caltime|g(?:1[0p])?)|trim)|m(?:a(?:i[ln]|x)|b(?:ereg|split)|etaphone|hash|i(?:crotime|n)|y?sql)|n(?:atsor|ex)t|o(?:ctdec|penlog|rd)|p(?:a(?:ck|thinfo)|\"}\n"
  },
  {
    "id": "953120",
    "regex": "SecRule RESPONSE_BODY @rx (?i)<\\?(?=|php)?\\s+ ",
    "explanation": "This expression is used to detect the presence of PHP opening tags in the response body of a web server. \\n\\nThe regex expression consists of several parts: \\n- `SecRule RESPONSE_BODY`: This specifies that the rule should be applied to the response body of the web server.\\n- `@rx`: This indicates that the rule should use regular expressions to match patterns in the response body.\\n- `(?i)`: This is a flag that makes the regex case-insensitive.\\n- `<\\\\?`: This matches the literal characters \\\"<?\\\", which is the opening tag for PHP code.\\n- `(?=|php)?`: This is a lookahead assertion that checks if the next characters after the opening tag are either the end of the string or the characters \\\"php\\\". The \\\"?\\\" makes this part optional, so it will still match if there are no characters after the opening tag.\\n- `\\\\s+`: This matches one or more whitespace characters after the opening tag.\\n\\nFor example, this regex would match the following strings:\\n- `<?php echo \\\"Hello, world!\\\";`\\n- `<? echo \\\"Hello, world!\\\";`\\n- `<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>` (because it starts with \\\"<?\\\" and has whitespace after it) \\n\\nIt would not match the following strings:\\n- `<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>` (because it does not have \\\"php\\\" after the opening tag)\\n- `<?echo \\\"Hello, world!\\\";` (because there is no whitespace after the opening tag)"
  },
  {
    "id": "942140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:d(?:atabas|b_nam)e[^0-9A-Z_a-z]*\\(|(?:information_schema|m(?:aster\\.\\.sysdatabases|s(?:db|ys(?:ac(?:cess(?:objects|storage|xml)|es)|modules2?|(?:object|querie|relationship)s))|ysql\\.db)|northwind|pg_(?:catalog|toast)|tempdb)\\b|s(?:chema(?:_name\\b|[^0-9A-Z_a-z]*\\()|(?:qlite_(?:temp_)?master|ys(?:aux|\\.database_name))\\b)) ",
    "explanation": "This expression is used to detect SQL injection attempts in web application requests. It matches any request parameter or cookie that contains certain keywords or patterns commonly used in SQL injection attacks.\\n\\nThe regex expression consists of several parts:\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This part specifies the locations in the request where the regex should be applied, including cookies, arguments, and XML data.\\n- @rx: This is a ModSecurity operator that indicates the following string is a regular expression.\\n- (?i): This flag makes the regex case-insensitive.\\n- \\\\b(?:d(?:atabas|b_nam)e[^0-9A-Z_a-z]*\\\\(|...): This is the main part of the regex, which matches various SQL injection patterns, including database names, schema names, and specific database systems like MySQL and SQLite.\\n- \\\\b|s(?:chema(?:_name\\\\b|[^0-9A-Z_a-z]*\\\\()|(?:qlite_(?:temp_)?master|ys(?:aux|\\\\.database_name))\\\\b)): This part matches additional SQL injection patterns related to schema names and specific database systems.\\n\\nFor example, the regex would match the following strings:\\n- \\\"SELECT * FROM users WHERE username = 'admin' AND password = 'password'\\\"\\n- \\\"SELECT * FROM users WHERE username = 'admin' UNION SELECT * FROM sensitive_data'\\\"\\n- \\\"DROP TABLE users\\\"\\n- \\\"SELECT * FROM information_schema.tables WHERE table_schema = 'public'\\\"\\n- \\\"SELECT * FROM sqlite_master WHERE type = 'table'\\\"\\n- \\\"SELECT * FROM mysql.db WHERE user = 'root'\\\""
  },
  {
    "id": "942160",
    "regex": "SecRule REQUEST_BASENAME|REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:sleep\\(\\s*?\\d*?\\s*?\\)|benchmark\\(.*?\\.*?\\)) ",
    "explanation": "This expression is used to detect SQL injection attacks that involve the use of the \\\"sleep\\\" or \\\"benchmark\\\" functions in SQL queries. \\n\\nThe regex expression consists of several parts: \\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule. \\n- \\\"REQUEST_BASENAME|REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*\\\" specifies the locations in the HTTP request where the rule should be applied. \\n- \\\"@rx\\\" indicates that the rule should be applied using a regular expression. \\n- \\\"(?i:sleep\\\\(\\\\s*?\\\\d*?\\\\s*?\\\\)|benchmark\\\\(.*?\\\\.*?\\\\))\\\" is the regular expression itself, which matches any occurrence of the \\\"sleep\\\" or \\\"benchmark\\\" functions in SQL queries, regardless of case. \\n\\nFor example, if an attacker tries to inject a SQL query that includes the \\\"sleep\\\" function, this rule will trigger and block the request."
  },
  {
    "id": "942170",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)(?:select|;)[\\s\\v]+(?:benchmark|if|sleep)[\\s\\v]*?\\([\\s\\v]*?\\(?[\\s\\v]*?[0-9A-Z_a-z]+ ",
    "explanation": "This expression is used to detect SQL injection attacks in web applications. It matches any HTTP request parameter (cookie, argument, or XML element) that contains a SQL injection attempt.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used by the ModSecurity web application firewall to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This is a list of variables to be checked for SQL injection attempts. It includes cookies, arguments, and XML elements.\\n- @rx: This is a ModSecurity operator that specifies a regular expression to match against the variable.\\n- (?i): This is a flag that makes the regular expression case-insensitive.\\n- (?:select|;): This matches the \\\"select\\\" keyword or a semicolon, which are common in SQL injection attacks.\\n- [\\\\s\\\\v]+: This matches one or more whitespace or vertical tab characters.\\n- (?:benchmark|if|sleep): This matches common SQL injection functions.\\n- [\\\\s\\\\v]*?: This matches zero or more whitespace or vertical tab characters, but as few as possible.\\n- \\\\([\\\\s\\\\v]*?\\\\(?[\\\\s\\\\v]*?[0-9A-Z_a-z]+: This matches a function call with an argument that contains alphanumeric characters. The argument can be surrounded by parentheses or not.\\n\\nFor example, the regex would match the following SQL injection attempts:\\n- SELECT * FROM users WHERE username = 'admin' --\\n- ; DROP TABLE users;\\n- SELECT benchmark(1000000,MD5('test'))\\n- SELECT SLEEP(5)"
  },
  {
    "id": "942190",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)[\\`](?:[\\s\\v]*![\\s\\v]*[\\0-9A-Z_-z]|;?[\\s\\v]*(?:having|select|union\\b[\\s\\v]*(?:all|(?:distin|sele)ct))\\b[\\s\\v]*[^\\s\\v])|\\b(?:(?:(?:c(?:onnection_id|urrent_user)|database|schema|user)[\\s\\v]*?|select.*?[0-9A-Z_a-z]?user)\\(|exec(?:ute)?[\\s\\v]+master\\.|from[^0-9A-Z_a-z]+information_schema[^0-9A-Z_a-z]|into[\\s\\v\\+]+(?:dump|out)file[\\s\\v]*?[\\`]|union(?:[\\s\\v]select[\\s\\v]@|[\\s\\v\\(0-9A-Z_a-z]*?select))|[\\s\\v]*?exec(?:ute)?.*?[^0-9A-Z_a-z]xp_cmdshell|[^0-9A-Z_a-z]iif[\\s\\v]*?\\( ",
    "explanation": "This expression is used for web application firewall (WAF) to detect and prevent SQL injection attacks. \\n\\nThe regex expression consists of several parts:\\n- SecRule: indicates that this is a rule for the WAF\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations where the rule should be applied, including cookies, arguments, and XML data\\n- @rx: indicates that the rule is a regular expression\\n- (?i): sets the case-insensitive flag for the regex\\n- [\\\\`]: matches a backtick character\\n- (?:[\\\\s\\\\v]*![\\\\s\\\\v]*[\\\\0-9A-Z_-z]|;?[\\\\s\\\\v]*(?:having|select|union\\\\b[\\\\s\\\\v]*(?:all|(?:distin|sele)ct))\\\\b[\\\\s\\\\v]*[^\\\\s\\\\v]): matches common SQL injection patterns, such as exclamation marks, semicolons, and keywords like \\\"select\\\" and \\\"union\\\"\\n- \\\\b(?:(?:(?:c(?:onnection_id|urrent_user)|database|schema|user)[\\\\s\\\\v]*?|select.*"
  },
  {
    "id": "942220",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx ^(?i:-0000023456|4294967295|4294967296|2147483648|2147483647|0000012345|-2147483648|-2147483649|0000023456|2.2250738585072007e-308|2.2250738585072011e-308|1e309)$ ",
    "explanation": "This expression is used to match a specific set of numeric values in various parts of an HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the HTTP request that the rule will be applied to. They include cookies, arguments, and XML data.\\n- @rx: This is a ModSecurity operator that specifies that the rule will use a regular expression to match against the request data.\\n- ^(?i:...)$: This is the regular expression itself, which matches a specific set of numeric values. The (?i:) syntax specifies that the match should be case-insensitive.\\n- -0000023456|4294967295|4294967296|2147483648|2147483647|0000012345|-2147483648|-2147483649|0000023456|2.2250738585072007e-308|2.2250738585072011e-308|1e309: These are the specific numeric values that the regular expression will match against.\\n\\nFor example, this expression could be used to block requests that contain certain malicious or unexpected numeric values, such as large negative or positive integers, or values that are close to the limits of the floating-point data type."
  },
  {
    "id": "942230",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)[\\s\\v\\(-\\)]case[\\s\\v]+when.*?then|\\)[\\s\\v]*?like[\\s\\v]*?\\(|select.*?having[\\s\\v]*?[^\\s\\v]+[\\s\\v]*?[^\\s\\v0-9A-Z_a-z]|if[\\s\\v]?\\([0-9A-Z_a-z]+[\\s\\v]*?[<->~] ",
    "explanation": "This expression is used for web application firewall (WAF) rules to detect SQL injection attacks. It matches SQL injection patterns in various parts of the HTTP request, such as cookies, arguments, and XML data.\\n\\nThe regex expression consists of several parts:\\n- SecRule: indicates that this is a rule for the WAF module of the Apache web server.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the HTTP request where the rule should be applied, such as cookies, arguments, and XML data.\\n- @rx: indicates that the following pattern is a regular expression.\\n- (?i): sets the case-insensitive flag for the regex.\\n- [\\\\s\\\\v\\\\(-\\\\)]case[\\\\s\\\\v]+when.*?then: matches SQL case statements.\\n- \\\\)[\\\\s\\\\v]*?like[\\\\s\\\\v]*?\\\\(|select.*?having[\\\\s\\\\v]*?[^\\\\s\\\\v]+[\\\\s\\\\v]*?[^\\\\s\\\\v0-9A-Z_a-z]: matches SQL injection patterns in SELECT statements with LIKE or HAVING clauses.\\n- if[\\\\s\\\\v]?\\\\([0-9A-Z_a-z]+[\\\\s\\\\v]*?[<->~]: matches SQL injection patterns in IF statements.\\n\\nFor example, the regex can match the following SQL injection attack:\\nSELECT * FROM users WHERE username = 'admin' AND password = ' OR 1=1 --'"
  },
  {
    "id": "942240",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)alter[\\s\\v]*?[0-9A-Z_a-z]+.*?char(?:acter)?[\\s\\v]+set[\\s\\v]+[0-9A-Z_a-z]+|[\\`](?:;*?[\\s\\v]*?waitfor[\\s\\v]+(?:time|delay)[\\s\\v]+[\\`]|;.*?:[\\s\\v]*?goto) ",
    "explanation": "This expression is used to detect SQL injection attacks in web applications. It matches any HTTP request parameter (cookie, argument, or XML element) that contains a SQL injection attack string. \\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive in the ModSecurity firewall that specifies a rule to be applied to incoming HTTP requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the different types of HTTP request parameters that the rule applies to.\\n- @rx: This is a ModSecurity operator that specifies a regular expression to match against the request parameter.\\n- (?i)alter[\\\\s\\\\v]*?[0-9A-Z_a-z]+.*?char(?:acter)?[\\\\s\\\\v]+set[\\\\s\\\\v]+[0-9A-Z_a-z]+: This is the regular expression that matches SQL injection attack strings that use the \\\"ALTER ... CHARACTER SET\\\" syntax.\\n- [\\\\`](?:;*?[\\\\s\\\\v]*?waitfor[\\\\s\\\\v]+(?:time|delay)[\\\\s\\\\v]+[\\\\`]|;.*?:[\\\\s\\\\v]*?goto): This is the regular expression that matches SQL injection attack strings that use the \\\"WAITFOR DELAY\\\" or \\\"GOTO\\\" syntax.\\n\\nFor example, the regex would match the following HTTP request parameter values:\\n- cookie: username=admin'; DROP TABLE users; --\\n- argument: id=1; WAITFOR DELAY '0:0:10';\\n- XML element: <name>Robert'); DROP TABLE students; --</name>"
  },
  {
    "id": "942280",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)select[\\s\\v]*?pg_sleep|waitfor[\\s\\v]*?delay[\\s\\v]?[\\`]+[\\s\\v]?[0-9]|;[\\s\\v]*?shutdown[\\s\\v]*?(?:[#;\\{]|/\\*|--) ",
    "explanation": "This expression is used to detect SQL injection attacks in web applications. It matches any HTTP request parameter (cookie, argument, or XML element) that contains a SQL injection attack pattern.\\n\\nThe regex expression consists of several parts:\\n- SecRule: ModSecurity rule engine directive that specifies the rule to be applied.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: ModSecurity operator that specifies the location of the parameter to be checked. It can be a cookie, a cookie name, an argument name, an argument value, or an XML element.\\n- @rx: ModSecurity operator that specifies the type of pattern matching to be used (regular expression).\\n- (?i): Regular expression modifier that makes the pattern case-insensitive.\\n- select[\\\\s\\\\v]*?pg_sleep: Regular expression that matches the \\\"select\\\" keyword followed by optional whitespace characters and the \\\"pg_sleep\\\" function.\\n- waitfor[\\\\s\\\\v]*?delay[\\\\s\\\\v]?[\\\\`]+[\\\\s\\\\v]?[0-9]: Regular expression that matches the \\\"waitfor\\\" keyword followed by optional whitespace characters, the \\\"delay\\\" keyword, optional whitespace characters, one or more backticks, optional whitespace characters, and a number.\\n- ;[\\\\s\\\\v]*?shutdown[\\\\s\\\\v]*?(?:[#;\\\\{]|/\\\\*|--): Regular expression that matches a semicolon followed by optional whitespace characters, the \\\"shutdown\\\" keyword, optional whitespace characters, and a comment or special character that can be used to bypass the SQL parser.\\n\\nFor example, the regex would match the following HTTP request parameter:\\n- cookie: \\\"username=admin'; waitfor delay '0:0:10'--\\\"\\n- argument: \\\"id=1; shutdown --\\\"\\n- XML element: \\\"<name><![CDATA[select pg_sleep(10);]]></name>\\\""
  },
  {
    "id": "942290",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\[?\\$(?:n(?:e|in?|o[rt])|e(?:q|xists|lemMatch)|l(?:te?|ike)|mod|a(?:ll|nd)|(?:s(?:iz|lic)|wher)e|t(?:ype|ext)|x?or|div|between|regex|jsonSchema)\\]? ",
    "explanation": "This expression is used to match and block potentially malicious input in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive in the ModSecurity firewall that specifies a rule to be applied to incoming web requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the web request that the rule applies to, including cookies, arguments, and XML data.\\n- @rx: This specifies that the rule uses a regular expression to match against the input.\\n- (?i): This is a flag that makes the regular expression case-insensitive.\\n- \\\\[?\\\\$: This matches a dollar sign that may or may not be enclosed in square brackets.\\n- (?:n(?:e|in?|o[rt])|e(?:q|xists|lemMatch)|l(?:te?|ike)|mod|a(?:ll|nd)|(?:s(?:iz|lic)|wher)e|t(?:ype|ext)|x?or|div|between|regex|jsonSchema): This is a non-capturing group that matches various MongoDB operators that could be used in injection attacks.\\n\\nFor example, this rule would block a request that includes the argument \\\"$ne\\\" or \\\"$regex\\\" in the URL parameters or cookies."
  },
  {
    "id": "942320",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)create[\\s\\v]+(?:function|procedure)[\\s\\v]*?[0-9A-Z_a-z]+[\\s\\v]*?\\([\\s\\v]*?\\)[\\s\\v]*?-|d(?:eclare[^0-9A-Z_a-z]+[#@][\\s\\v]*?[0-9A-Z_a-z]+|iv[\\s\\v]*?\\([\\+\\-]*[\\s\\v\\.0-9]+[\\+\\-]*[\\s\\v\\.0-9]+\\))|exec[\\s\\v]*?\\([\\s\\v]*?@|(?:lo_(?:impor|ge)t|procedure[\\s\\v]+analyse)[\\s\\v]*?\\(|;[\\s\\v]*?(?:declare|open)[\\s\\v]+[\\-0-9A-Z_a-z]+|::(?:b(?:igint|ool)|double[\\s\\v]+precision|int(?:eger)?|numeric|oid|real|(?:tex|smallin)t) ",
    "explanation": "This expression is used for detecting SQL injection attacks in web applications. It matches SQL injection patterns in various parts of the HTTP request, including cookies, arguments, and XML data.\\n\\nThe regex expression consists of several parts:\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This part specifies the locations in the HTTP request where the regex should be applied.\\n- (?i)create[\\\\s\\\\v]+(?:function|procedure)[\\\\s\\\\v]*?[0-9A-Z_a-z]+[\\\\s\\\\v]*?\\\\([\\\\s\\\\v]*?\\\\)[\\\\s\\\\v]*?-: This part matches SQL injection patterns involving the creation of functions or procedures.\\n- d(?:eclare[^0-9A-Z_a-z]+[#@][\\\\s\\\\v]*?[0-9A-Z_a-z]+|iv[\\\\s\\\\v]*?\\\\([\\\\+\\\\-]*[\\\\s\\\\v\\\\.0-9]+[\\\\+\\\\-]*[\\\\s\\\\v\\\\.0-9]+\\\\)): This part matches SQL injection patterns involving the declaration of variables.\\n- exec[\\\\s\\\\v]*?\\\\([\\\\s\\\\v]*?@|(?:lo_(?:impor|ge)t|procedure[\\\\s\\\\v]+analyse)[\\\\s\\\\v]*?\\\\(|;[\\\\s\\\\v]*?(?:declare|open)[\\\\s\\\\v]+[\\\\-"
  },
  {
    "id": "942350",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)create[\\s\\v]+function[\\s\\v].+[\\s\\v]returns|;[\\s\\v]*?(?:alter|(?:(?:cre|trunc|upd)at|renam)e|d(?:e(?:lete|sc)|rop)|(?:inser|selec)t|load)\\b[\\s\\v]*?[\\(\\[]?[0-9A-Z_a-z]{2} ",
    "explanation": "This expression is used to detect SQL injection attacks in web applications. It matches any HTTP request parameter that contains SQL code that could be used to manipulate the database. \\n\\nThe regex expression consists of several parts: \\n\\n1. SecRule: This is a directive used by the ModSecurity web application firewall to define a rule. \\n2. REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This is a list of variables that the rule will be applied to. It includes cookies, arguments, and XML data. \\n3. @rx: This is a flag that tells ModSecurity to use a regular expression to match the rule. \\n4. (?i)create[\\\\s\\\\v]+function[\\\\s\\\\v].+[\\\\s\\\\v]returns: This matches any SQL code that creates a function and returns a value. \\n5. ;[\\\\s\\\\v]*?(?:alter|(?:(?:cre|trunc|upd)at|renam)e|d(?:e(?:lete|sc)|rop)|(?:inser|selec)t|load)\\\\b[\\\\s\\\\v]*?[\\\\(\\\\[]?[0-9A-Z_a-z]{2}: This matches any SQL code that contains certain keywords, such as \\\"alter\\\", \\\"create\\\", \\\"delete\\\", \\\"drop\\\", \\\"insert\\\", \\\"select\\\", \\\"truncate\\\", \\\"update\\\", or \\\"load\\\". It also matches any two-character strings enclosed in brackets or parentheses. \\n\\nFor example, the regex would match the following SQL code: \\n\\n- CREATE FUNCTION myFunction() RETURNS INT\\n- SELECT * FROM users WHERE id = 1; DROP TABLE users;\\n- INSERT INTO users (name, email) VALUES ('John', 'john@example.com')"
  },
  {
    "id": "942360",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:(?:alter|(?:(?:cre|trunc|upd)at|renam)e|de(?:lete|sc)|(?:inser|selec)t|load)[\\s\\v]+(?:char|group_concat|load_file)\\b[\\s\\v]*\\(?|end[\\s\\v]*?\\);)|[\\s\\v\\(]load_file[\\s\\v]*?\\(|[\\`][\\s\\v]+regexp[^0-9A-Z_a-z]|[\\0-9A-Z_-z][\\s\\v]+as\\b[\\s\\v]*[\\0-9A-Z_-z]+[\\s\\v]*\\bfrom|^[^A-Z_a-z]+[\\s\\v]*?(?:(?:(?:(?:cre|trunc)at|renam)e|d(?:e(?:lete|sc)|rop)|(?:inser|selec)t|load)[\\s\\v]+[0-9A-Z_a-z]+|u(?:pdate[\\s\\v]+[0-9A-Z_a-z]+|nion[\\s\\v]*(?:all|(?:sele|distin)ct)\\b)|alter[\\s\\v]*(?:a(?:(?:ggregat|pplication[\\s\\v]*rol)e|s(?:sembl|ymmetric[\\s\\v]*ke)y|u(?:dit|thorization)|vailability[\\s\\v]*group)|b(?:roker[\\s\\v]*priority|ufferpool)|c(?:ertificate|luster|o(?:l(?:latio|um)|nversio)n|r(?:edential|yptographic[\\s\\v]*provider))|d(?:atabase|efault|i(?:mension|skgroup)|omain)|e(?:(?:ndpoi|ve)nt|xte(?:nsion|rnal))|f(?:lashback|oreign|u(?:lltext|nction))|hi(?:erarchy|stogram)|group|in(?:dex(?:type)?|memory|stance)|java|l(?:a(?:ngua|r)ge|ibrary|o(?:ckdown|g(?:file[\\s\\v]*group|in)))|m(?:a(?:s(?:k|ter[\\s\\v]*key)|terialized)|e(?:ssage[\\s\\v]*type|thod)|odule)|(?:nicknam|queu)e|o(?:perator|utline)|p(?:a(?:ckage|rtition)|ermission|ro(?:cedur|fil)e)|r(?:e(?:mot|sourc)e|o(?:l(?:e|lback)|ute))|s(?:chema|e(?:arch|curity|rv(?:er|ice)|quence|ssion)|y(?:mmetric[\\s\\v]*key|nonym)|togroup)|t(?:able(?:space)?|ext|hreshold|r(?:igger|usted)|ype)|us(?:age|er)|view|w(?:ork(?:load)?|rapper)|x(?:ml[\\s\\v]*schema|srobject))\\b) ",
    "explanation": "{\"explanation\":\"Regex: SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\\\b(?:(?:alter|(?:(?:cre|trunc|upd)at|renam)e|de(?:lete|sc)|(?:inser|selec)t|load)[\\\\s\\\\v]+(?:char|group_concat|load_file)\\\\b[\\\\s\\\\v]*\\\\(?|end[\\\\s\\\\v]*?\\\\);)|[\\\\s\\\\v\\\\(]load_file[\\\\s\\\\v]*?\\\\(|[\\\\`][\\\\s\\\\v]+regexp[^0-9A-Z_a-z]|[\\\\0-9A-Z_-z][\\\\s\\\\v]+as\\\\b[\\\\s\\\\v]*[\\\\0-9A-Z_-z]+[\\\\s\\\\v]*\\\\bfrom|^[^A-Z_a-z]+[\\\\s\\\\v]*?(?:(?:(?:(?:cre|trunc)at|renam)e|d(?:e(?:lete|sc)|rop)|(?:inser|selec)t|load)[\\\\s\\\\v]+[0-9A-Z_a-z]+|u(?:pdate[\\\\s\\\\v]+[0-9A-Z_a-z]+|nion[\\\\s\\\\v]*(?:all|(?:sele|distin)ct)\\\\b)|alter[\\\\s\\\\v]*(?:a(?:(?:ggregat|pplication[\\\\s\\\\v]*rol)e|s(?:sembl|ymmetric[\\\\s\\\\v]*ke)y|u(?:dit|thorization)|vailability[\\\\s\\\\v]*group)|b(?:roker[\\\\s\\\\v]*priority|ufferpool)|c(?:ertificate|luster|o(?:l(?:latio|um)|nversio)n|r(?:edential|yptographic[\\\\s\\\\v]*provider))|d(?:atabase|efault|i(?:mension|skgroup)|omain)|e(?:(?:ndpoi|ve)nt|xte(?:nsion|rnal))|f(?:lashback|oreign|u(?:lltext|nction))|hi(?:erarchy|stogram)|group|in(?:dex(?:type)?|memory|stance)|java|l(?:a(?:ngua|r)ge|ibrary|o(?:ckdown|g(?:file[\\\\s\\\\v]*group|in)))|m(?:a(?:s(?:k|ter[\\\\s\\\\v]*key)|terialized)|e(?:ssage[\\\\s\\\\v]*type|thod)|odule)|(?:nicknam|\"}\n"
  },
  {
    "id": "942110",
    "regex": "SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML/* @rx (?:^\\s*[\\`;]+|[\\`]+\\s*$) ",
    "explanation": "This expression is used to match strings that start or end with one or more backticks (`) or semicolons (;), possibly preceded or followed by whitespace characters.\\n\\nThe regex expression consists of two alternatives separated by the pipe symbol (|). The first alternative matches strings that start with zero or more whitespace characters (\\\\s*) followed by one or more backticks or semicolons ([\\\\`;]+) anchored to the beginning of the string (^). The second alternative matches strings that end with one or more backticks or semicolons ([\\\\`;]+) preceded by zero or more whitespace characters (\\\\s*) anchored to the end of the string ($).\\n\\nFor example, the regex would match the following strings:\\n- `; SELECT * FROM users;`\\n- `   ;`\\n- `SELECT * FROM users;   `\\n- `` (empty string)\\n- `;`"
  },
  {
    "id": "942130",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* @rx (?i)[\\s\\v\\-\\)`]*?\\b([0-9A-Z_a-z]+)\\b[\\s\\v\\-\\)`]*?(?:=|<=>|(?:sounds[\\s\\v]+)?like|glob|r(?:like|egexp))[\\s\\v\\-\\)`]*?\\b([0-9A-Z_a-z]+)\\b ",
    "explanation": "This expression is used to match a rule in a web application firewall (WAF) configuration file that checks for potential SQL injection attacks. \\n\\nThe regex expression consists of several parts: \\n- `SecRule ARGS_NAMES|ARGS|XML/*`: specifies the location of the input data to be checked (e.g. request parameters, cookies, or XML data)\\n- `@rx`: indicates that the following pattern is a regular expression\\n- `(?i)`: sets the case-insensitive flag for the regex\\n- `[\\\\s\\\\v\\\\-\\\\)`]*?`: matches any whitespace, vertical tab, hyphen, or closing parenthesis character, zero or more times, in a non-greedy way\\n- `\\\\b([0-9A-Z_a-z]+)\\\\b`: matches a word boundary, followed by one or more alphanumeric or underscore characters, and another word boundary, capturing the characters in a group\\n- `[\\\\s\\\\v\\\\-\\\\)`]*?`: matches any whitespace, vertical tab, hyphen, or closing parenthesis character, zero or more times, in a non-greedy way\\n- `(?:=|<=>|(?:sounds[\\\\s\\\\v]+)?like|glob|r(?:like|egexp))`: matches one of the following operators: equals, not equals, sounds like, like, glob, rlike, or regexp\\n- `[\\\\s\\\\v\\\\-\\\\)`]*?`: matches any whitespace, vertical tab, hyphen, or closing parenthesis character, zero or more times, in a non-greedy way\\n- `\\\\b([0-9A-Z_a-z]+)\\\\b`: matches a word boundary, followed by one or more alphanumeric or underscore characters, and another word boundary, capturing the characters in a group\\n\\nFor example, the regex would match the following input: \\n- `id=1`\\n- `name sounds like 'admin'`\\n- `password rlike '^password'`"
  },
  {
    "id": "942150",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:json(?:_[0-9A-Z_a-z]+)?|a(?:bs|(?:cos|sin)h?|tan[2h]?|vg)|c(?:eil(?:ing)?|h(?:a(?:nges|r(?:set)?)|r)|o(?:alesce|sh?|unt)|ast)|d(?:e(?:grees|fault)|a(?:te|y))|exp|f(?:loor(?:avg)?|ormat|ield)|g(?:lob|roup_concat)|h(?:ex|our)|i(?:f(?:null)?|if|n(?:str)?)|l(?:ast(?:_insert_rowid)?|ength|ike(?:l(?:ihood|y))?|n|o(?:ad_extension|g(?:10|2)?|wer(?:pi)?|cal)|trim)|m(?:ax|in(?:ute)?|o(?:d|nth))|n(?:ullif|ow)|p(?:i|ow(?:er)?|rintf|assword)|quote|r(?:a(?:dians|ndom(?:blob)?)|e(?:p(?:lace|eat)|verse)|ound|trim|ight)|s(?:i(?:gn|nh?)|oundex|q(?:lite_(?:compileoption_(?:get|used)|offset|source_id|version)|rt)|u(?:bstr(?:ing)?|m)|econd|leep)|t(?:anh?|otal(?:_changes)?|r(?:im|unc)|ypeof|ime)|u(?:n(?:icode|likely)|(?:pp|s)er)|zeroblob|bin|v(?:alues|ersion)|week|year)[^0-9A-Z_a-z]*\\( ",
    "explanation": "This expression is used to match SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This part specifies the locations in the web request where the regex should be applied. \\n- @rx: This is a ModSecurity operator that specifies that the following string is a regular expression. \\n- (?i): This is a flag that makes the regex case-insensitive. \\n- \\\\b: This matches a word boundary. \\n- ("
  },
  {
    "id": "942180",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)(?:/\\*)+[\\`]+[\\s\\v]?(?:--|[#\\{]|/\\*)?|[\\`](?:[\\s\\v]*(?:(?:x?or|and|div|like|between)[\\s\\v\\-0-9A-Z_a-z]+[\\(-\\)\\+-\\-<->][\\s\\v]*[\\0-9`]|[!=\\|](?:[\\s\\v -!\\+\\-0-9=]+.*?[\\-\\(`].*?|[\\s\\v -!0-9=]+.*?[0-9]+)$|(?:like|print)[^0-9A-Z_a-z]+[\\-\\(0-9A-Z_-z]|;)|(?:[<>~]+|[\\s\\v]*[^\\s\\v0-9A-Z_a-z]?=[\\s\\v]*|[^0-9A-Z_a-z]*?[\\+=]+[^0-9A-Z_a-z]*?)[\\`])|[0-9][\\`][\\s\\v]+[\\`][\\s\\v]+[0-9]|^admin[\\s\\v]*?[\\`]|[\\s\\v\\-\\(`][\\s\\v]*?glob[^0-9A-Z_a-z]+[\\-\\(0-9A-Z_-z]|[\\s\\v]is[\\s\\v]*?0[^0-9A-Z_a-z]|where[\\s\\v][\\s\\v-\\.0-9A-Z_a-z]+[\\s\\v]= ",
    "explanation": "This expression is used for web application firewall (WAF) to detect SQL injection attacks. \\n\\nThe regex expression consists of several parts:\\n- SecRule: indicates that this is a rule for the WAF\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations where the rule should be applied\\n- @rx: indicates that this is a regular expression rule\\n- (?i): sets the case-insensitive flag for the regex\\n- (?:/\\\\*)+: matches any number of forward slashes followed by an asterisk\\n- [\\\\`]+[\\\\s\\\\v]?: matches any number of backticks followed by optional whitespace or vertical space\\n- (?:--|[#\\\\{]|/\\\\*)?:"
  },
  {
    "id": "942210",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)(?:&&|\\|\\||and|between|div|like|n(?:and|ot)|(?:xx?)?or)[\\s\\v\\(]+[0-9A-Z_a-z]+[\\s\\v\\)]*?[!\\+=]+[\\s\\v0-9]*?[\\-\\)=`]|[0-9](?:[\\s\\v]*?(?:and|between|div|like|x?or)[\\s\\v]*?[0-9]+[\\s\\v]*?[\\+\\-]|[\\s\\v]+group[\\s\\v]+by.+\\()|/[0-9A-Z_a-z]+;?[\\s\\v]+(?:and|between|div|having|like|x?or|select)[^0-9A-Z_a-z]|(?:[#;]|--)[\\s\\v]*?(?:alter|drop|(?:insert|update)[\\s\\v]*?[0-9A-Z_a-z]{2})|@.+=[\\s\\v]*?\\([\\s\\v]*?select|[^0-9A-Z_a-z]SET[\\s\\v]*?@[0-9A-Z_a-z]+ ",
    "explanation": "This expression is used to detect SQL injection attempts in web application security. \\n\\nThe regex expression consists of several parts: \\n- SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This part specifies the location of the input to be checked for SQL injection attempts. \\n- @rx: This specifies that the following is a regular expression. \\n- (?i): This specifies that the regular expression is case-insensitive. \\n- (?:&&|\\\\|\\\\||and|between|div|like|n(?:and|ot)|(?:xx?)?or): This part specifies the SQL operators that are commonly used in SQL injection attacks. \\n- [\\\\s\\\\v\\\\(]+[0-9A-Z_a-z]+[\\\\s\\\\v\\\\)]*?[!\\\\+=]+[\\\\s\\\\v0-9]*?[\\\\-\\\\)=`]: This part specifies the pattern of characters that are commonly used in SQL injection attacks. \\n- /[0-9A-Z_a-z]+;?: This part specifies the pattern of characters that are commonly used in SQL injection attacks. \\n- (?:and|between|div|having"
  },
  {
    "id": "942260",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)[\\`][\\s\\v]*?(?:(?:and|n(?:and|ot)|(?:xx?)?or|div|like|between|\\|\\||&&)[\\s\\v]+[\\s\\v0-9A-Z_a-z]+=[\\s\\v]*?[0-9A-Z_a-z]+[\\s\\v]*?having[\\s\\v]+|like[^0-9A-Z_a-z]*?[\\0-9`])|[0-9A-Z_a-z][\\s\\v]+like[\\s\\v]+[\\`]|like[\\s\\v]*?[\\`]%|select[\\s\\v]+?[\\s\\v\\-\\)-\\.0-9A-\\[\\]_-z]+from[\\s\\v]+ ",
    "explanation": "This expression is used for web application firewall (WAF) to detect SQL injection attacks. It matches SQL injection patterns in various HTTP request parameters such as cookies, arguments, and XML. \\n\\nThe regex expression consists of several parts:\\n- SecRule: indicates the start of a WAF rule\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations to check for SQL injection patterns\\n- @rx: indicates the use of regular expression matching\\n- (?i): sets the matching to be case-insensitive\\n- [\\\\`][\\\\s\\\\v]*?: matches the start of a SQL query enclosed in backticks (`) and allows for whitespace before the query\\n- (?:...): a non-capturing group that matches various SQL injection patterns, including logical operators (and, or, not), comparison operators (=, like), and SQL keywords (select, from)\\n- [\\\\s\\\\v]+[\\\\s\\\\v0-9A-Z_a-z]+=[\\\\s\\\\v]*?[0-9A-Z_a-z]+[\\\\s\\\\v]*?having[\\\\s\\\\v]+: matches a SQL injection pattern where a query contains a comparison followed by a HAVING clause\\n- like[^0-9A-Z_a-z]*?[\\\\0-9`]: matches a SQL injection pattern where a query contains a LIKE operator followed by a non-alphanumeric character\\n- [0-9A-Z_a-z][\\\\s\\\\v]+like[\\\\s\\\\v]+[\\\\`]: matches a SQL injection pattern where a"
  },
  {
    "id": "942300",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\)[\\s\\v]*?when[\\s\\v]*?[0-9]+[\\s\\v]*?then|[\\`][\\s\\v]*?(?:[#\\{]|--)|/\\*![\\s\\v]?[0-9]+|\\b(?:b(?:inary[\\s\\v]*?\\([\\s\\v]*?[0-9]|etween[\\s\\v]+[\\s\\v]*?[0-9A-Z_a-z]+\\()|cha?r[\\s\\v]*?\\([\\s\\v]*?[0-9]|(?:and|n(?:and|ot)|(?:xx?)?or|div|like|r(?:egexp|like))[\\s\\v]+[\\s\\v]*?[0-9A-Z_a-z]+\\()|(?:\\|\\||&&)[\\s\\v]+[\\s\\v]*?[0-9A-Z_a-z]+\\( ",
    "explanation": "This expression is used to detect SQL injection attacks in web applications using ModSecurity. \\n\\nThe regex expression consists of several parts:\\n- SecRule: ModSecurity rule keyword\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: Targets for the rule, which include request cookies, cookie names, argument names, arguments, and XML data.\\n- @rx: Indicates that the rule uses a regular expression.\\n- (?i): Sets the regular expression to be case-insensitive.\\n- \\\\)[\\\\s\\\\v]*?when[\\\\s\\\\v]*?[0-9]+[\\\\s\\\\v]*?then: Matches SQL injection attempts that use the \\\"when\\\" and \\\"then\\\" keywords.\\n- [\\\\`][\\\\s\\\\v]*?(?:[#\\\\{]|--): Matches SQL injection attempts that use backticks and comments.\\n- /\\\\*![\\\\s\\\\v]?[0-9]+: Matches SQL injection attempts that use MySQL-specific comments.\\n- \\\\b(?:b(?:inary[\\\\s\\\\v]*?\\\\([\\\\s\\\\v]*?[0-9]|etween[\\\\s\\\\v]+[\\\\s\\\\v]*?[0-9A-Z_a-z]+\\\\()|cha?r[\\\\s\\\\v]*?\\\\([\\\\s\\\\v]*?[0-9]|(?:and|n(?:and|ot)|(?:xx?)?or|div|like|r(?:egexp|like))[\\\\s\\\\v]+[\\\\s\\\\v]*?[0-"
  },
  {
    "id": "942310",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)(?:\\([\\s\\v]*?select[\\s\\v]*?[0-9A-Z_a-z]+|coalesce|order[\\s\\v]+by[\\s\\v]+if[0-9A-Z_a-z]*?)[\\s\\v]*?\\(|\\*/from|\\+[\\s\\v]*?[0-9]+[\\s\\v]*?\\+[\\s\\v]*?@|[0-9A-Z_a-z][\\`][\\s\\v]*?(?:(?:[\\+\\-=@\\|]+[\\s\\v]+?)+|[\\+\\-=@\\|]+)[\\(0-9]|@@[0-9A-Z_a-z]+[\\s\\v]*?[^\\s\\v0-9A-Z_a-z]|[^0-9A-Z_a-z]!+[\\`][0-9A-Z_a-z]|[\\`](?:;[\\s\\v]*?(?:if|while|begin)|[\\s\\v0-9]+=[\\s\\v]*?[0-9])|[\\s\\v\\(]+case[0-9]*?[^0-9A-Z_a-z].+[tw]hen[\\s\\v\\(] ",
    "explanation": "This expression is used to detect SQL injection attacks in web applications. \\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used by the ModSecurity module to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, and XML data.\\n- @rx: This is a flag that specifies that the rule is a regular expression.\\n- (?i): This is a flag that specifies that the regular expression is case-insensitive.\\n- (?:\\\\([\\\\s\\\\v]*?select[\\\\s\\\\v]*?[0-9A-Z_a-z]+|coalesce|order[\\\\s\\\\v]+by[\\\\s\\\\v]+if[0-9A-Z_a-z]*?)[\\\\s\\\\v]*?\\\\(|\\\\*/from|\\\\+[\\\\s\\\\v]*?[0-9]+[\\\\s\\\\v]*?\\\\+[\\\\s\\\\v]*?@|[0-9A-Z_a-z][\\\\`][\\\\s\\\\v]*?(?:(?:[\\\\"
  },
  {
    "id": "942330",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)[\\`][\\s\\v]*?(?:x?or|div|like|between|and)[\\s\\v]*?[\\`]?[0-9]|\\x5cx(?:2[37]|3d)|^(?:.?[\\`]$|[\\\\x5c`]*?(?:[\\0-9`]+|[^\\`]+[\\`])[\\s\\v]*?(?:and|n(?:and|ot)|(?:xx?)?or|div|like|between|\\|\\||&&)[\\s\\v]*?[\\0-9A-Z_-z][!&\\(-\\)\\+-\\.@])|[^\\s\\v0-9A-Z_a-z][0-9A-Z_a-z]+[\\s\\v]*?[\\-\\|][\\s\\v]*?[\\`][\\s\\v]*?[0-9A-Z_a-z]|@(?:[0-9A-Z_a-z]+[\\s\\v]+(?:and|x?or|div|like|between)[\\s\\v]*?[\\0-9`]+|[\\-0-9A-Z_a-z]+[\\s\\v](?:and|x?or|div|like|between)[\\s\\v]*?[^\\s\\v0-9A-Z_a-z])|[^\\s\\v0-:A-Z_a-z][\\s\\v]*?[0-9][^0-9A-Z_a-z]+[^\\s\\v0-9A-Z_a-z][\\s\\v]*?[\\`].|[^0-9A-Z_a-z]information_schema|table_name[^0-9A-Z_a-z] ",
    "explanation": "This expression is used to detect SQL injection attempts in web application requests. \\n\\nThe regex expression consists of several parts:\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This part specifies the locations in the request where the regex should be applied.\\n- (?i)[\\\\`][\\\\s\\\\v]*?(?:x?or|div|like|between|and)[\\\\s\\\\v]*?[\\\\`]?[0-9]|\\\\x5cx(?:2[37]|3d): This part matches SQL operators and keywords, such as \\\"OR\\\", \\\"AND\\\", \\\"LIKE\\\", \\\"BETWEEN"
  },
  {
    "id": "942340",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)in[\\s\\v]*?\\(+[\\s\\v]*?select|(?:(?:(?i:N)?AND|(?i:X)?(?i:X)?OR|DIV|LIKE|BETWEEN|NOT)[\\s\\v]+|(?:\\|\\||&&)[\\s\\v]*)[\\s\\v\\+0-9A-Z_a-z]+(?:regexp[\\s\\v]*?\\(|sounds[\\s\\v]+like[\\s\\v]*?[\\`]|[0-9=]+x)|[\\`](?:[\\s\\v]*?(?:[0-9][\\s\\v]*?(?:--|#)|is[\\s\\v]*?(?:[0-9].+[\\`]?[0-9A-Z_a-z]|[\\.0-9]+[\\s\\v]*?[^0-9A-Z_a-z].*?[\\`]))|[%-&<->\\^]+[0-9][\\s\\v]*?(?:=|x?or|div|like|between|and)|(?:[^0-9A-Z_a-z]+[\\+\\-0-9A-Z_a-z]+[\\s\\v]*?=[\\s\\v]*?[0-9][^0-9A-Z_a-z]+|\\|?[\\-0-9A-Z_a-z]{3}[^\\s\\v\\.0-9A-Z_a-z]+)[\\`]|[\\s\\v]*(?:(?:(?i:N)?AND|(?i:X)?(?i:X)?OR|DIV|LIKE|BETWEEN|NOT)[\\s\\v]+|(?:\\|\\||&&)[\\s\\v]*)(?:array[\\s\\v]*\\[|[0-9A-Z_a-z]+(?:[\\s\\v]*!?~|[\\s\\v]+(?:not[\\s\\v]+)?similar[\\s\\v]+to[\\s\\v]+)|(?:tru|fals)e\\b))|\\bexcept[\\s\\v]+(?:select\\b|values[\\s\\v]*?\\() ",
    "explanation": "This expression is used to detect SQL injection attacks in web applications. It matches various SQL injection patterns in HTTP request parameters such as cookies, arguments, and XML data.\\n\\nThe regex expression consists of several parts:\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*"
  },
  {
    "id": "942380",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:having\\b(?:[\\s\\v]+(?:[0-9]{110}|[^=]{110})[\\s\\v]*?[<->]| ?(?:[0-9]{110} ?[<->]+|[\\][^=]{110}[ \\<-\\?\\[]+))|ex(?:ecute(?:\\(|[\\s\\v]{15}[\\$\\.0-9A-Z_a-z]{15}[\\s\\v]{03})|ists[\\s\\v]*?\\([\\s\\v]*?select\\b)|(?:create[\\s\\v]+?table.{020}?|like[^0-9A-Z_a-z]*?char[^0-9A-Z_a-z]*?)\\()|select.*?case|from.*?limit|order[\\s\\v]by|exists[\\s\\v](?:[\\s\\v]select|s(?:elect[^\\s\\v](?:if(?:null)?[\\s\\v]\\(|top|concat)|ystem[\\s\\v]\\()|\\bhaving\\b[\\s\\v]+[0-9]{110}|[^=]{110}) ",
    "explanation": "This expression is used to detect and prevent SQL injection attacks on web applications. It is a security rule that is applied to various parts of the HTTP request, including cookies, arguments, and XML data. The regex expression consists of several parts, including patterns for SQL keywords and functions commonly used in injection attacks, as well as patterns for specific strings and characters that may indicate an attack. \\n\\nFor example, the expression includes patterns for \\\"having\\\" clauses with long strings of characters or numbers, \\\"execute\\\" or \\\"exists\\\" functions followed by a \\\"select\\\" statement, and \\\"create table\\\" or \\\"like char\\\" statements. It also includes patterns for \\\"select case\\\" statements, \\\"from limit\\\" clauses, and \\\"order by\\\" clauses. Additionally, the expression includes patterns for specific strings found in cookies, such as \\\"__utm\\\" and \\\"_pk_ref\\\", that may indicate an attack. \\n\\nOverall, this expression is a comprehensive tool for detecting and preventing SQL injection attacks on web applications."
  },
  {
    "id": "942410",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:a(?:(?:b|co)s|dd(?:dat|tim)e|es_(?:de|en)crypt|s(?:in|cii(?:str)?)|tan2?|vg)|b(?:enchmark|i(?:n(?:_to_num)?|t_(?:and|count|length|x?or)))|c(?:ast|h(?:ar(?:(?:acter)?_length|set)?|r)|iel(?:ing)?|o(?:alesce|ercibility|(?:mpres)?s|n(?:cat(?:_ws)?|nection_id|v(?:ert(?:_tz)?)?)|(?:un)?t)|r32|ur(?:(?:dat|tim)e|rent_(?:date|time(?:stamp)?|user)))|d(?:a(?:t(?:abase|e(?:_(?:add|format|sub)|diff)?)|y(?:name|of(?:month|week|year))?)|count|e(?:code|(?:faul|s_(?:de|en)cryp)t|grees)|ump)|e(?:lt|nc(?:ode|rypt)|x(?:p(?:ort_set)?|tract(?:value)?))|f(?:i(?:eld(?:_in_set)?|nd_in_set)|loor|o(?:rmat|und_rows)|rom_(?:base64|days|unixtime))|g(?:et_(?:format|lock)|r(?:eates|oup_conca)t)|h(?:ex(?:toraw)?|our)|i(?:f(?:null)?|n(?:et6?_(?:aton|ntoa)|s(?:ert|tr)|terval)?|s(?:_(?:(?:free|used)_lock|ipv(?:4(?:_(?:compat|mapped))?|6)|n(?:ot(?:_null)?|ull))|null)?)|l(?:ast(?:_(?:day|insert_id))?|case|e(?:(?:as|f)t|ngth)|n|o(?:ad_file|ca(?:l(?:timestamp)?|te)|g(?:10|2)?|wer)|pad|trim)|m(?:a(?:ke(?:date|_set)|ster_pos_wait|x)|d5|i(?:(?:crosecon)?d|n(?:ute)?)|o(?:d|nth(?:name)?))|n(?:ame_const|o(?:t_in|w)|ullif)|o(?:ct(?:et_length)?|(?:ld_passwo)?rd)|p(?:assword|eriod_(?:add|diff)|g_sleep|i|o(?:sition|w(?:er)?)|rocedure_analyse)|qu(?:arter|ote)|r(?:a(?:dians|nd|wto(?:hex|nhex(?:toraw)?))|e(?:lease_lock|p(?:eat|lace)|verse)|ight|o(?:und|w_count)|pad|trim)|s(?:chema|e(?:c(?:ond|_to_time)|ssion_user)|ha[1-2]?|ig?n|leep|oundex|pace|qrt|t(?:d(?:dev(?:_(?:po|sam)p)?)?|r(?:cmp|_to_date))|u(?:b(?:(?:dat|tim)e|str(?:ing(?:_index)?)?)|m)|ys(?:date|tem_user))|t(?:an|ime(?:diff|_(?:format|to_sec)|stamp(?:add|diff)?)?|o_(?:base64|n?char|(?:day|second)s)|r(?:im|uncate))|u(?:case|n(?:compress(?:ed_length)?|hex|ix_timestamp)|p(?:datexml|per)|ser|tc_(?:date|time(?:stamp)?)|uid(?:_short)?)|v(?:a(?:lues|r(?:iance|_(?:po|sam)p))|ersion)|we(?:ek(?:day|ofyear)?|ight_string)|xmltype|year(?:week)?)[^0-9A-Z_a-z]*?\\( ",
    "explanation": "{\"explanation\":\"Regex: SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\\\b(?:a(?:(?:b|co)s|dd(?:dat|tim)e|es_(?:de|en)crypt|s(?:in|cii(?:str)?)|tan2?|vg)|b(?:enchmark|i(?:n(?:_to_num)?|t_(?:and|count|length|x?or)))|c(?:ast|h(?:ar(?:(?:acter)?_length|set)?|r)|iel(?:ing)?|o(?:alesce|ercibility|(?:mpres)?s|n(?:cat(?:_ws)?|nection_id|v(?:ert(?:_tz)?)?)|(?:un)?t)|r32|ur(?:(?:dat|tim)e|rent_(?:date|time(?:stamp)?|user)))|d(?:a(?:t(?:abase|e(?:_(?:add|format|sub)|diff)?)|y(?:name|of(?:month|week|year))?)|count|e(?:code|(?:faul|s_(?:de|en)cryp)t|grees)|ump)|e(?:lt|nc(?:ode|rypt)|x(?:p(?:ort_set)?|tract(?:value)?))|f(?:i(?:eld(?:_in_set)?|nd_in_set)|loor|o(?:rmat|und_rows)|rom_(?:base64|days|unixtime))|g(?:et_(?:format|lock)|r(?:eates|oup_conca)t)|h(?:ex(?:toraw)?|our)|i(?:f(?:null)?|n(?:et6?_(?:aton|ntoa)|s(?:ert|tr)|terval)?|s(?:_(?:(?:free|used)_lock|ipv(?:4(?:_(?:compat|mapped))?|6)|n(?:ot(?:_null)?|ull))|null)?)|l(?:ast(?:_(?:day|insert_id))?|case|e(?:(?:as|f)t|ngth)|n|o(?:ad_file|ca(?:l(?:timestamp)?|te)|g(?:10|2)?|wer)|pad|trim)|m(?:a(?:ke(?:date|_set)|ster_pos_wait|x)|d5|i(?:(?:crosecon)?d|n(?:\"}\n"
  },
  {
    "id": "942470",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)autonomous_transaction|(?:current_use|n?varcha|tbcreato)r|db(?:a_users|ms_java)|open(?:owa_util|query|rowset)|s(?:p_(?:(?:addextendedpro|sqlexe)c|execute(?:sql)?|help|is_srvrolemember|makewebtask|oacreate|p(?:assword|repare)|replwritetovarbin)|ql_(?:longvarchar|variant))|utl_(?:file|http)|xp_(?:availablemedia|(?:cmdshel|servicecontro)l|dirtree|e(?:numdsn|xecresultset)|filelist|loginconfig|makecab|ntsec(?:_enumdomains)?|reg(?:addmultistring|delete(?:key|value)|enum(?:key|value)s|re(?:ad|movemultistring)|write)|terminate(?:_process)?) ",
    "explanation": "This expression is used to detect and prevent SQL injection attacks by matching against various patterns commonly used in SQL injection attempts. \\n\\nThe regex expression consists of several parts:\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This part specifies the locations where the regex should be applied, including request cookies, arguments, and XML data.\\n- @rx: This specifies that the following pattern is a regular expression.\\n- (?i)autonomous_transaction: This matches the string \\\"autonomous_transaction\\\" case-insensitively.\\n- (?:current_use|n?varcha|tbcreato)r: This matches various strings that may be used in SQL injection attempts, including \\\"current_user\\\", \\\"varchar\\\", and \\\"tbcreator\\\".\\n- db(?:a_users|ms_java): This matches \\\"dba_users\\\" or \\\"dbms_java\\\".\\n- open(?:owa_util|query|rowset): This matches \\\"openowa_util\\\", \\\"openquery\\\", or \\\"openrowset\\\".\\n- s(?:p_(?:(?:addextendedpro|sqlexe)c|execute(?:sql)?|help|is_srvrolemember|makewebtask|oacreate|p(?:assword|repare)|replwrit"
  },
  {
    "id": "942480",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:(?:d(?:bms_[0-9A-Z_a-z]+\\.|elete\\b[^0-9A-Z_a-z]*?\\bfrom)|(?:group\\b.*?\\bby\\b.{1100}?\\bhav|overlay\\b[^0-9A-Z_a-z]*?\\(.*?\\b[^0-9A-Z_a-z]*?plac)ing|in(?:ner\\b[^0-9A-Z_a-z]*?\\bjoin|sert\\b[^0-9A-Z_a-z]*?\\binto|to\\b[^0-9A-Z_a-z]*?\\b(?:dump|out)file)|load\\b[^0-9A-Z_a-z]*?\\bdata\\b.*?\\binfile|s(?:elect\\b.{1100}?\\b(?:(?:.*?\\bdump\\b.*|(?:count|length)\\b.{1100}?)\\bfrom|(?:data_typ|from\\b.{1100}?\\bwher)e|instr|to(?:_(?:cha|numbe)r|p\\b.{1100}?\\bfrom))|ys_context)|u(?:nion\\b.{1100}?\\bselect|tl_inaddr))\\b|print\\b[^0-9A-Z_a-z]*?@@)|(?:collation[^0-9A-Z_a-z]*?\\(a|@@version|;[^0-9A-Z_a-z]*?\\b(?:drop|shutdown))\\b|(?:dbo|msdasql|s(?:a|qloledb)) ",
    "explanation": "This expression is used to detect SQL injection attacks in web applications. It matches SQL keywords and commands that are commonly used in SQL injection attacks. \\n\\nThe regex expression consists of several parts: \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS|ARGS_NAMES|ARGS|XML:/*: specifies the locations where the regex should be applied.\\n- @rx: indicates that the following is a regular expression.\\n- (?i): sets the matching to be case-insensitive.\\n- \\\\b: matches a word boundary.\\n- (?:): creates a non-capturing group.\\n-"
  },
  {
    "id": "942440",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx /\\*!?|\\*/|[;]--|--(?:[\\s\\v]|[^\\-]*?-)|[^&\\-]#.*?[\\s\\v]|;?\\x00 ",
    "explanation": "This expression is used for web application firewall (WAF) rules to detect and prevent attacks on web applications. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is the keyword that starts the WAF rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule applies to. They include request cookies, cookie names, argument names, arguments, and XML data.\\n- @rx: This is a keyword that indicates the use of a regular expression.\\n- /\\\\*!?|\\\\*/|[;]--|--(?:[\\\\s\\\\v]|[^\\\\-]*?-)|[^&\\\\-]#.*?[\\\\s\\\\v]|;?\\\\x00: This is the regular expression pattern that matches various attack patterns, including SQL injection, cross-site scripting (XSS), and command injection.\\n\\nFor example, the regular expression pattern matches the following:\\n\\n- /\\\\*!?|\\\\*/: Matches comments in SQL queries and JavaScript code.\\n- [;]--|--(?:[\\\\s\\\\v]|[^\\\\-]*?-): Matches SQL comments and allows attackers to bypass filters.\\n- [^&\\\\-]#.*?[\\\\s\\\\v]: Matches shell commands and allows attackers to execute arbitrary commands.\\n- ;?\\\\x00: Matches null bytes and allows attackers to bypass filters."
  },
  {
    "id": "942510",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:`(?:(?:[\\w\\s=_\\-+{}()<@]){229}|(?:[A-Za-z0-9+/]{4})+(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)`) ",
    "explanation": "This expression is used to match a regular expression pattern against various input sources such as cookies, arguments, and XML data. It is commonly used in web application firewalls to detect and prevent attacks such as SQL injection and cross-site scripting.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the input sources against which the regular expression pattern will be matched. They include cookies, cookie names, argument names, arguments, and XML data.\\n- @rx: This is a flag used to indicate that the pattern is a regular expression.\\n- (?:`(?:(?:[\\\\w\\\\s=_\\\\-+{}()<@]){229}|(?:[A-Za-z0-9+/]{4})+(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)`): This is the regular expression pattern that will be matched against the input sources. It matches either a string of 229 characters or a base64-encoded string.\\n\\nFor example, the expression can be used to detect and prevent SQL injection attacks by matching against the ARGS input source. If the regular expression pattern matches a string that looks like SQL code, the rule can be triggered and the request can be blocked."
  },
  {
    "id": "942101",
    "regex": "SecRule REQUEST_BASENAME|REQUEST_FILENAME \"@detectSQLi\"",
    "explanation": "This expression is used to detect SQL injection attempts in web requests.\\n\\nThe regex expression consists of three parts:\\n1. SecRule - This is a directive used by the ModSecurity module to define a rule.\\n2. REQUEST_BASENAME|REQUEST_FILENAME - This is a regular expression that matches either the basename or the full filename of the requested resource.\\n3. \\\"@detectSQLi\\\" - This is a reference to a pre-defined rule set that detects SQL injection attempts.\\n\\nFor example, if a user tries to access a URL like \\\"example.com/page.php?id=1%20OR%201=1\\\", this expression will trigger and block the request, as it matches the SQL injection attempt."
  },
  {
    "id": "942251",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\W+\\d*?\\s*?\\bhaving\\b\\s*?[^\\s\\-] ",
    "explanation": "This expression is used to match SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it will match against cookies and arguments in the request.\\n- @rx: This is a ModSecurity operator that specifies a regular expression.\\n- (?i): This is a flag that makes the regex case-insensitive.\\n- \\\\W+: This matches one or more non-word characters (i.e., anything that is not a letter, digit, or underscore).\\n- \\\\d*?: This matches zero or more digits, but the *? makes it non-greedy, meaning it will match as few digits as possible.\\n- \\\\s*?: This matches zero or more whitespace characters, but the *? makes it non-greedy.\\n- \\\\bhaving\\\\b: This matches the word \\\"having\\\" surrounded by word boundaries.\\n- \\\\s*?: This matches zero or more whitespace characters, but the *? makes it non-greedy.\\n- [^\\\\s\\\\-]: This matches any character that is not whitespace or a hyphen.\\n\\nFor example, this regex would match the following SQL injection attempt:\\nSELECT * FROM users WHERE username='admin' HAVING 1=1-- \\n\\nIt would also match variations of this attempt, such as using different whitespace characters or adding comments."
  },
  {
    "id": "942511",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:(?:(?:[\\w\\s=_\\-+{}()<@]){229}|(?:[A-Za-z0-9+/]{4})+(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)) ",
    "explanation": "This expression is used to match a pattern in HTTP requests. It is a security rule that checks for a specific pattern in the request cookies, cookie names, argument names, arguments, or XML data.\\n\\nThe regex expression consists of two main parts. The first part is the list of locations where the pattern should be searched for, separated by the pipe symbol. The second part is the actual regular expression pattern, which matches either a string of 229 characters that can include letters, numbers, and certain special characters, or a base64-encoded string that is at least 4 characters long and ends with either two or three equal signs.\\n\\nFor example, this expression can be used to detect potentially malicious data in HTTP requests, such as SQL injection attacks or attempts to exploit vulnerabilities in web applications."
  },
  {
    "id": "951100",
    "regex": "SecRule RESPONSE_BODY \"!@pmFromFile sql-errors.data\"",
    "explanation": "This expression is used to match any response body that contains any string from the file \\\"sql-errors.data\\\".\\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- RESPONSE_BODY: This is a variable that represents the response body of an HTTP request.\\n- \\\"!@pmFromFile\\\": This is a ModSecurity operator that matches any string from a file.\\n- sql-errors.data: This is the name of the file that contains the strings to match.\\n\\nFor example, if the file \\\"sql-errors.data\\\" contains the string \\\"SQL syntax error\\\", this expression will match any response body that contains that string."
  },
  {
    "id": "954100",
    "regex": "SecRule RESPONSE_BODY @rx [a-z]x5cinetpub\\b ",
    "explanation": "This expression is used to match a regular expression pattern in the RESPONSE_BODY of an HTTP response using the ModSecurity module.\\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- RESPONSE_BODY: This is a variable that represents the body of an HTTP response.\\n- @rx: This is a keyword used to indicate that the following pattern is a regular expression.\\n- [a-z]: This is a character class that matches any lowercase letter from a to z.\\n- x5cinetpub: This is a literal string that matches the characters \\\"x5cinetpub\\\".\\n- \\\\b: This is a word boundary anchor that matches the position between a word character and a non-word character.\\n\\nFor example, this expression would match the string \\\"abcx5cinetpub\\\" in the RESPONSE_BODY, but would not match \\\"abcx5cinetpub123\\\"."
  },
  {
    "id": "954120",
    "regex": "SecRule RESPONSE_BODY \"@pmFromFile iis-errors.data\"",
    "explanation": "This expression is used to match any response body that contains any of the strings listed in the \\\"iis-errors.data\\\" file.\\n\\nThe regex expression consists of two main parts: \\n\\n1. SecRule: This is a directive used in ModSecurity to define a rule. It is followed by the rule's conditions and actions.\\n\\n2. RESPONSE_BODY \\\"@pmFromFile iis-errors.data\\\": This is the condition part of the rule. It checks if the response body contains any of the strings listed in the \\\"iis-errors.data\\\" file. The \\\"@pmFromFile\\\" operator is used to load the strings from the file.\\n\\nFor example, if the \\\"iis-errors.data\\\" file contains the string \\\"404 Not Found\\\", the expression will match any response body that contains this string."
  },
  {
    "id": "930110",
    "regex": "SecRule REQUEST_URI|ARGS|REQUEST_HEADERS|!REQUEST_HEADERSReferer|FILES|XML:/* @rx (?:(?:^|[\\x5c/;])\\.{23}[\\x5c/;]|[\\x5c/;]\\.{23}(?:[\\x5c/;]|$)) ",
    "explanation": "This expression is used to detect directory traversal attacks in web applications. It matches any string that contains the sequence \\\"..\\\" surrounded by directory traversal characters such as \\\"/\\\", \\\"\\\\\\\", or \\\";\\\".\\n\\nThe regex expression consists of two alternatives separated by the \\\"|\\\" character. The first alternative matches the sequence \\\"..\\\" preceded by either the start of the string or one of the directory traversal characters. The second alternative matches the sequence \\\"..\\\" followed by one of the directory traversal characters or the end of the string.\\n\\nFor example, the regex would match strings like \\\"../etc/passwd\\\", \\\"..\\\\..\\\\..\\\\Windows\\\\system32\\\\config\\\", or \\\";../etc/passwd\\\"."
  },
  {
    "id": "941130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i).(?:\\b(?:x(?:link:href|html|mlns)|data:text/html|formaction|pattern\\b.*?=)|!ENTITY[\\s\\v]+(?:%[\\s\\v]+)?[^\\s\\v]+[\\s\\v]+(?:SYSTEM|PUBLIC)|@import|;base64)\\b ",
    "explanation": "This expression is used to match potentially malicious input in various parts of an HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are various parts of an HTTP request that the rule will be applied to, including cookies, headers, and request parameters.\\n- @rx: This is a ModSecurity operator that specifies that the rule will use a regular expression to match input.\\n- (?i): This is a regular expression modifier that makes the matching case-insensitive.\\n- (?:...): This is a non-capturing group that contains several different patterns that the rule will match against.\\n- \\\\b: This is a word boundary anchor that matches the boundary between a word character and a non-word character.\\n- (?:x(?:link:href|html|mlns)|data:text/html|formaction|pattern\\\\b.*?=): This matches various strings that could be used to inject malicious code, including attributes in XML documents and data URIs.\\n- !ENTITY[\\\\s\\\\v]+(?:%[\\\\s\\\\v]+)?[^\\\\s\\\\v]+[\\\\s\\\\v]+(?:SYSTEM|PUBLIC): This matches attempts to inject external entities into an XML document.\\n- @import: This matches attempts to import external resources in CSS.\\n- ;base64: This matches attempts to encode malicious code in base64.\\n\\nFor example, this expression could be used to block requests that contain attempts to inject malicious code into an XML document or a data URI."
  },
  {
    "id": "941140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)[a-z]+=(?:[^:=]+:.+;)*?[^:=]+:url\\(javascript ",
    "explanation": "This expression is used to match and block potentially malicious requests that contain JavaScript code in various parts of the HTTP request.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: This is a list of different parts of the HTTP request that the rule will be applied to, including cookies, headers, arguments, and the request filename. The XML:/* part indicates that the rule will also be applied to any XML data in the request.\\n- @rx: This is a ModSecurity operator that specifies that the rule will use a regular expression to match against the request data.\\n- (?i)[a-z]+=(?:[^:=]+:.+;)*?[^:=]+:url\\\\(javascript\\\\): This is the regular expression used to match against the request data. It looks for any lowercase letters followed by an equal sign, followed by a string that starts with one or more characters that are not a colon or equals sign, followed by a colon, some characters, and a semicolon, repeated zero or more times, and ending with a string that is not a colon or equals sign, followed by \\\":url(javascript)\\\".\\n\\nFor example, this expression could be used to block requests that contain JavaScript code in the user agent header or in an argument named \\\"script\\\". It would also block requests that contain JavaScript code in XML data."
  },
  {
    "id": "941170",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)(?:\\W|^)(?:javascript:(?:[\\s\\S]+[=\\x5c\\(\\[\\.<]|[\\s\\S]*?(?:\\bname\\b|\\x5c[ux]\\d))|data:(?:(?:[a-z]\\w+/\\w[\\w+-]+\\w)?[;]|[\\s\\S]*?;[\\s\\S]*?\\b(?:base64|charset=)|[\\s\\S]*?[\\s\\S]*?<[\\s\\S]*?\\w[\\s\\S]*?>))|@\\W*?i\\W*?m\\W*?p\\W*?o\\W*?r\\W*?t\\W*?(?:/\\*[\\s\\S]*?)?(?:[\\]|\\W*?u\\W*?r\\W*?l[\\s\\S]*?\\()|[^-]*?-\\W*?m\\W*?o\\W*?z\\W*?-\\W*?b\\W*?i\\W*?n\\W*?d\\W*?i\\W*?n\\W*?g[^:]*?:\\W*?u\\W*?r\\W*?l[\\s\\S]*?\\( ",
    "explanation": "This expression is used to detect and prevent potential attacks on web applications. It searches for specific patterns in various parts of the HTTP request, such as cookies, headers, and arguments, as well as in the request filename and XML content. The expression looks for patterns that may indicate the presence of malicious code, such as JavaScript or data URLs, and also checks for attempts to import external resources or bind to specific ports.\\n\\nThe expression consists of several parts, including:\\n- SecRule: indicates that this is a security rule for the web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: specifies the different parts of the HTTP request to search for patterns\\n- @rx: indicates that this is a regular expression rule\\n- (?i): sets the regular expression to be case-insensitive\\n- (?:\\\\W|^):"
  },
  {
    "id": "941190",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i:<style.*?>.*?(?:@[i\\x5c]|(?:[:=]|&#x?0*(?:58|3A|61|3D);?).*?(?:[(\\x5c]|&#x?0*(?:40|28|92|5C);?))) ",
    "explanation": "This expression is used to detect malicious code injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive in ModSecurity, a web application firewall, that specifies a rule to be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are variables that represent different parts of the incoming request that the rule will be applied to. \\n- @rx: This is a ModSecurity operator that specifies a regular expression to be matched against the selected variables.\\n- (?i:<style.*?>.*?(?:@[i\\\\x5c]|(?:[:=]|&#x?0*(?:58|3A|61|3D);?).*?(?:[(\\\\x5c]|&#x?0*(?:40|28|92|5C);?))): This is the regular expression itself, which matches any occurrence of a <style> tag followed by any characters, and then a series of characters that could indicate a code injection attempt. \\n\\nFor example, if an attacker tried to inject malicious code into a web request by including it within a <style> tag, this rule would detect it and block the request."
  },
  {
    "id": "941200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i:<.*[:]?vmlframe.*?[\\s/+]*?src[\\s/+]*=) ",
    "explanation": "This expression is used to match a regular expression pattern in various parts of an HTTP request. It is typically used in web application firewalls to detect and prevent attacks.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are the different parts of the HTTP request where the regex pattern will be matched. They include request cookies, cookie names, argument names, arguments, request filename, and XML data.\\n- @rx: This is a ModSecurity operator used to specify a regular expression pattern.\\n- (?i:<.*[:]?vmlframe.*?[\\\\s/+]*?src[\\\\s/+]*=): This is the regular expression pattern that will be matched. It looks for the string \\\"vmlframe\\\" followed by any characters, an optional colon, and the string \\\"src\\\" followed by any characters and optional whitespace or forward slashes.\\n\\nFor example, this regex could be used to detect and prevent attacks that use malicious iframes to load content from external sources."
  },
  {
    "id": "941210",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i:(?:j|&#x?0*(?:74|4A|106|6A);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:a|&#x?0*(?:65|41|97|61);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:v|&#x?0*(?:86|56|118|76);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:a|&#x?0*(?:65|41|97|61);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:s|&#x?0*(?:83|53|115|73);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:c|&#x?0*(?:67|43|99|63);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:r|&#x?0*(?:82|52|114|72);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:i|&#x?0*(?:73|49|105|69);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:p|&#x?0*(?:80|50|112|70);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:t|&#x?0*(?:84|54|116|74);?)(?:\\t|\\n|\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?::|&(?:#x?0*(?:58|3A);?|colon;)).) ",
    "explanation": "{\"explanation\":\"Regex: SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i:(?:j|&#x?0*(?:74|4A|106|6A);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:a|&#x?0*(?:65|41|97|61);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:v|&#x?0*(?:86|56|118|76);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:a|&#x?0*(?:65|41|97|61);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:s|&#x?0*(?:83|53|115|73);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:c|&#x?0*(?:67|43|99|63);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:r|&#x?0*(?:82|52|114|72);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:i|&#x?0*(?:73|49|105|69);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:p|&#x?0*(?:80|50|112|70);?)(?:\\\\t|\\\\n|\\\\r|&(?:#x?0*(?:9|13|10|A|D);\"}\n"
  },
  {
    "id": "941220",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i:(?:v|&#x?0*(?:86|56|118|76);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:b|&#x?0*(?:66|42|98|62);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:s|&#x?0*(?:83|53|115|73);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:c|&#x?0*(?:67|43|99|63);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:r|&#x?0*(?:82|52|114|72);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:i|&#x?0*(?:73|49|105|69);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:p|&#x?0*(?:80|50|112|70);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:t|&#x?0*(?:84|54|116|74);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?::|&(?:#x?0*(?:58|3A);?|colon;)).) ",
    "explanation": "This expression is used to match a pattern in HTTP requests and responses to detect potential attacks. Specifically, it looks for a sequence of characters that spell out the word \\\"script\\\" in various encodings, including ASCII, hexadecimal, and HTML entities.\\n\\nThe regex expression consists of several parts:"
  },
  {
    "id": "941230",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)<EMBED[\\s/+].*?(?:src|type).*?= ",
    "explanation": "This expression is used to match a regular expression pattern in the input string. It is used in the context of a web application firewall to detect and prevent attacks such as cross-site scripting (XSS) and file inclusion attacks.\\n\\nThe regex expression consists of several parts:\\n\\n- SecRule: This is a directive used in the ModSecurity web application firewall to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: This is a list of variables that the rule will be applied to. These variables include HTTP cookies, query string parameters, and the request filename.\\n- @rx: This is a flag that specifies that the rule is a regular expression.\\n- (?i): This is a flag that specifies that the regular expression should be case-insensitive.\\n- <EMBED[\\\\s/+].*?(?:src|type).*?=: This is the regular expression pattern that the rule will match. It matches any <EMBED> tag with a \\\"src\\\" or \\\"type\\\" attribute.\\n\\nFor example, the rule will match the following input:\\n\\n<EMBED src=\\\"http://example.com/malicious.swf\\\"></EMBED>\\n\\nBut it will not match the following input:\\n\\n<EMBED src=\\\"http://example.com/malicious.swf\\\" type=\\\"application/x-shockwave-flash\\\"></EMBED>"
  },
  {
    "id": "941240",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx <[?]?import[\\s/+\\S]*?implementation[\\s/+]*?= ",
    "explanation": "This expression is used to detect potential XML External Entity (XXE) injection attacks in web applications. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive in ModSecurity, a web application firewall, that specifies a rule to be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are variables that represent different parts of the incoming request that the rule will be applied to. \\n- @rx: This is a ModSecurity operator that specifies a regular expression to be matched against the selected variables. \\n- <[?]?import[\\\\s/+\\\\S]*?implementation[\\\\s/+]*?= : This is the regular expression that matches the XXE injection attack pattern. It looks for the string \\\"import\\\" followed by any number of whitespace or non-whitespace characters, followed by \\\"implementation\\\" and an equal sign. The pattern can also start with a question mark and/or a less-than symbol. \\n\\nFor example, if an attacker sends a request with a malicious XML payload that includes an external entity reference, such as <!DOCTYPE foo [<!ENTITY xxe SYSTEM \\\"http://attacker.com\\\">]><foo>&xxe;</foo>, the regular expression in this rule will match the \\\"ENTITY\\\" declaration and trigger the ModSecurity rule to block the request."
  },
  {
    "id": "941250",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i:<META[\\s/+].*?http-equiv[\\s/+]*=[\\s/+]*[\\`]?(?:(?:c|&#x?0*(?:67|43|99|63);?)|(?:r|&#x?0*(?:82|52|114|72);?)|(?:s|&#x?0*(?:83|53|115|73);?))) ",
    "explanation": "This expression is used to match a specific pattern in HTTP requests and responses. It is used in web application firewalls to detect and prevent attacks such as cross-site scripting (XSS) and SQL injection.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are variables that represent different parts of the HTTP request or response that the rule will be applied to.\\n- @rx: This is a ModSecurity operator that specifies that the rule will use a regular expression to match the pattern.\\n- (?i:<META[\\\\s/+].*?http-equiv[\\\\s/+]*=[\\\\s/+]*[\\\\`]?(?:(?:c|&#x?0*(?:67|43|99|63);?)|(?:r|&#x?0*(?:82|52|114|72);?)|(?:s|&#x?0*(?:83|53|115|73);?))): This is the regular expression that defines the pattern to be matched. It looks for a <META> tag with an http-equiv attribute that contains certain characters that could be used in an XSS or SQL injection attack.\\n\\nFor example, this rule would match the following HTTP response:\\n```\\nHTTP/1.1 200 OK\\nContent-Type: text/html; charset=UTF-8\\nContent-Length: 1234\\n\\n<html>\\n<head>\\n  <META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n  <title>Example</title>\\n</head>\\n<body>\\n  <script>alert('XSS');</script>\\n</body>\\n</html>\\n```\\nThe regular expression would match the <META> tag with the http-equiv attribute, which contains"
  },
  {
    "id": "941260",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i:<META[\\s/+].*?charset[\\s/+]*=) ",
    "explanation": "This expression is used to detect the character encoding of a web page. It is commonly used in web application firewalls to prevent attacks that exploit character encoding vulnerabilities.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive in the ModSecurity firewall that specifies a rule to be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are the variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, request filenames, and XML data.\\n- @rx: This is a ModSecurity operator that specifies a regular expression to be matched against the selected variables.\\n- (?i:<META[\\\\s/+].*?charset[\\\\s/+]*=): This is the regular expression itself. It matches the HTML meta tag that specifies the character encoding of the page, regardless of case sensitivity. The [\\\\s/+] matches any whitespace or slash characters that may appear between the \\\"META\\\" and \\\"charset\\\" keywords, and the *? makes the match non-greedy so that it stops at the first occurrence of \\\"charset\\\".\\n\\nFor example, if a web page contains the following meta tag:\\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\nThe regex expression will match \\\"charset=UTF-8\\\" and the firewall can take appropriate action to prevent any attacks that exploit character encoding vulnerabilities."
  },
  {
    "id": "941270",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)<LINK[\\s/+].*?href[\\s/+]*= ",
    "explanation": "This expression is used to match any HTTP request that contains a link tag with a href attribute.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are the variables that the rule will be applied to. In this case, it will match any of these variables.\\n- @rx: This is a flag that indicates that the rule is a regular expression.\\n- (?i): This is a flag that indicates that the regular expression is case-insensitive.\\n- <LINK[\\\\s/+]: This matches the opening tag of a link element, with optional whitespace or forward slashes.\\n- .*?: This matches any character (except newline) zero or more times, but as few times as possible.\\n- href[\\\\s/+]*=: This matches the href attribute of the link element, with optional whitespace or forward slashes before the equals sign.\\n\\nFor example, this expression would match the following HTTP request:\\nGET /index.html HTTP/1.1\\nHost: example.com\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\nAccept-Language: en-US,en;q=0.5\\nAccept-Encoding: gzip, deflate\\nReferer: http://example.com/\\nConnection: keep-alive\\nUpgrade-Insecure-Requests: 1\\nCookie: sessionid=1234567890abcdef; __utmz=1234567890.1234567890.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)\\nIf-Modified-Since: Mon, 15 Jan 2018 12:00:00 GMT\\n\\n<html>\\n<head>\\n\\t<title>Example</title>\\n\\t<link rel=\\\"stylesheet\\\" href=\\\"/css/style.css\\\">\\n</head>\\n<body>\\n\\t<h1>Hello, world!</h1>\\n</body>\\n</html>"
  },
  {
    "id": "941280",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)<BASE[\\s/+].*?href[\\s/+]*= ",
    "explanation": "This expression is used to match a regular expression pattern in the HTTP request. It is used in the context of a web application firewall to detect and prevent attacks.\\n\\nThe regex expression consists of several parts:\\n\\n- SecRule: This is a directive used in the ModSecurity firewall to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: This is a list of variables that the rule will be applied to. It includes request cookies, cookie names, argument names, arguments, request filename, and XML data.\\n- @rx: This is a flag that indicates that the rule is a regular expression.\\n- (?i): This is a flag that indicates that the regular expression is case-insensitive.\\n- <BASE[\\\\s/+].*?href[\\\\s/+]*=: This is the regular expression pattern that will be matched. It looks for the string \\\"<BASE\\\" followed by one or more whitespace, slash, or plus characters, followed by any number of characters (non-greedy), followed by the string \\\"href\\\" followed by zero or more whitespace, slash, or plus characters.\\n\\nFor example, this rule would match the following HTTP request:\\n\\nGET /index.html HTTP/1.1\\nHost: example.com\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\nAccept-Language: en-US,en;q=0.5\\nAccept-Encoding: gzip, deflate\\nReferer: http://example.com/\\nConnection: keep-alive\\nUpgrade-Insecure-Requests: 1\\nCookie: PHPSESSID=1234567890abcdef; __utmz=1234567890.1234567890.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utma=1234567890.1234567890.1234567890.1234567890.1234567890.1; __utmc=1234567890"
  },
  {
    "id": "941290",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)<APPLET[\\s/+>] ",
    "explanation": "This expression is used for web application firewall (WAF) rules to detect and block requests that contain the <APPLET> tag.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity, a WAF module for Apache web servers, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are variables that can be used in ModSecurity rules to match against different parts of an HTTP request. In this case, the rule matches against cookies, arguments, and XML data.\\n- @rx: This is a ModSecurity operator that specifies a regular expression pattern to match against the variable.\\n- (?i): This is a regular expression flag that makes the pattern case-insensitive.\\n- <APPLET[\\\\s/+>]: This is the regular expression pattern that matches the <APPLET> tag, which is used to embed Java applets in web pages. The [\\\\s/+>] part matches any whitespace, forward slash, or closing angle bracket that may follow the tag.\\n\\nFor example, if a user sends a request to a web server with the following payload in the request body:\\n```\\n<APPLET code=\\\"MyApplet.class\\\"></APPLET>\\n```\\nThe ModSecurity rule with this regex expression would trigger and block the request."
  },
  {
    "id": "941300",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)<OBJECT[\\s/+].*?(?:type|codetype|classid|code|data)[\\s/+]*= ",
    "explanation": "This expression is used to detect potential attacks on web applications that involve malicious objects being injected into the code. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are the variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, request filenames, and XML data.\\n- @rx: This is a flag that specifies that the rule will use a regular expression to match against the variables.\\n- (?i): This is a flag that specifies that the regular expression will be case-insensitive.\\n- <OBJECT[\\\\s/+].*?(?:type|codetype|classid|code|data)[\\\\s/+]*=: This is the regular expression itself. It matches against any HTML object tag that contains attributes such as \\\"type\\\", \\\"codetype\\\", \\\"classid\\\", \\\"code\\\", or \\\"data\\\". The [\\\\s/+] part matches against any whitespace, forward slash, or plus sign that may appear between the attributes.\\n\\nFor example, if a request contains a malicious object tag like <OBJECT type=\\\"text/html\\\" data=\\\"http://malicious-site.com/script.js\\\"></OBJECT>, this rule will detect it and block the request."
  },
  {
    "id": "941310",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?:\\xbc\\s*/\\s*[^\\xbe>]*[\\xbe>])|(?:<\\s*/\\s*[^\\xbe]*\\xbe) ",
    "explanation": "This expression is used to detect and prevent cross-site scripting (XSS) attacks on web applications. It matches any input that contains potentially malicious code in the form of HTML tags or JavaScript code.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting and preventing attacks.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are variables that represent different parts of the HTTP request that the rule should be applied to. For example, REQUEST_COOKIES matches any cookies sent in the request.\\n- @rx: This is a ModSecurity operator that specifies a regular expression pattern to match against the input.\\n- (?:\\\\xbc\\\\s*/\\\\s*[^\\\\xbe>]*[\\\\xbe>])|(?:<\\\\s*/\\\\s*[^\\\\xbe]*\\\\xbe): This is the regular expression pattern that matches potentially malicious code. It consists of two parts separated by a pipe (|) character. The first part matches any string that starts with the byte sequence \\\\xbc followed by a slash (/), followed by any number of characters that are not the byte sequence \\\\xbe or >, and ends with either \\\\xbe or >. The second part matches any string that starts with an opening angle bracket (<), followed by a slash (/), followed by any number of characters that are not \\\\xbe, and ends with \\\\xbe.\\n\\nFor example, the regex would match the following input:\\n- <script>alert('XSS')</script>\\n- <img src=x onerror=alert('XSS')>\\n- &#xbc;script&#xbe;alert('XSS')&#xbc;/script&#xbe;"
  },
  {
    "id": "941350",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx \\+ADw-.*(?:\\+AD4-|>)|<.*\\+AD4- ",
    "explanation": "This expression is used for web application firewall (WAF) rules to detect and prevent attacks on web applications. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive that specifies a rule for the WAF.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are variables that the rule applies to. They include request cookies, cookie names, argument names, arguments, request filenames, and XML data.\\n- @rx: This is a flag that specifies that the rule uses a regular expression.\\n- \\\\+ADw-.*(?:\\\\+AD4-|>)|<.*\\\\+AD4-: This is the regular expression that matches the attack pattern. It looks for HTML tags that have been encoded with ASCII code, such as \\\"<\\\" encoded as \\\"+ADw-\\\" and \\\">\\\" encoded as \\\"+AD4-\\\". \\n\\nFor example, this rule would detect an attack that includes the following code: \\n<script>alert(+ADw-'XSS'+AD4-)</script>"
  },
  {
    "id": "941360",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx ![!+ ]\\[\\] ",
    "explanation": "This expression is used to match against various parts of an HTTP request, including cookies, arguments, and file names. It is used in the context of a web application firewall to detect and prevent attacks.\\n\\nThe regex expression consists of several parts:\\n\\n- SecRule: This is a directive used in the ModSecurity web application firewall to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are various parts of an HTTP request that the rule will match against. They include cookies, cookie names, argument names, arguments, file names, and XML data.\\n- @rx: This is a ModSecurity operator that specifies that the rule will use a regular expression to match against the request data.\\n- ![!+ ]\\\\[\\\\]: This is the regular expression itself. It matches any character that is not a space, exclamation point, or plus sign, followed by a pair of square brackets.\\n\\nFor example, this rule could be used to detect and prevent attacks that involve malicious input in the form of encoded or obfuscated data in HTTP requests. It could also be used to prevent attacks that involve attempts to bypass input validation or filtering mechanisms."
  },
  {
    "id": "941370",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?:self|document|this|top|window)\\s*(?:/\\*|[\\[)]).+?(?:\\]|\\*/) ",
    "explanation": "This expression is used to match any input that contains JavaScript code that attempts to access the parent window or document object.\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are variables that ModSecurity can use to match against the input. In this case, the regex will match against any of these variables.\\n- @rx: This is a ModSecurity operator that specifies that the following string is a regular expression.\\n- (?:self|document|this|top|window): This is a non-capturing group that matches any of the listed JavaScript objects.\\n- \\\\s*: This matches any whitespace character.\\n- (?:/\\\\*|[\\\\[)]): This is another non-capturing group that matches either a /* or a [ character.\\n- .+?: This matches any character one or more times, but as few times as possible.\\n- (?:\\\\]|\\\\*\\\\/): This is a non-capturing group that matches either a ] or a */ character.\\nFor example, this regex would match against the following input:\\n- window['parent']['document']\\n- this/*comment*/['parent']"
  },
  {
    "id": "941101",
    "regex": "SecRule REQUEST_FILENAME|REQUEST_HEADERSReferer @detectXSS ",
    "explanation": "This expression is used to detect cross-site scripting (XSS) attacks in the request filename or referer header of an HTTP request.\\n\\nThe regex expression consists of two main parts: \\n\\n1. REQUEST_FILENAME|REQUEST_HEADERSReferer: This is a logical OR operator that specifies the location of the input data to be checked for XSS attacks. In this case, it checks both the request filename and the referer header.\\n\\n2. @detectXSS: This is a reference to a pre-defined rule set that contains regular expressions for detecting XSS attacks.\\n\\nFor example, if an HTTP request contains a suspicious filename or referer header that matches the regular expressions in the @detectXSS rule set, the SecRule will trigger and block the request to prevent a potential XSS attack."
  },
  {
    "id": "941120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)[\\s\\`;/0-9=\\x0B\\x09\\x0C\\x3B\\x2C\\x28\\x3B]on[a-zA-Z]{325}[\\s\\x0B\\x09\\x0C\\x3B\\x2C\\x28\\x3B]*?=[^=] ",
    "explanation": "This expression is used to detect potential SQL injection attacks in web requests. It searches for the string \\\"on\\\" followed by 325 letters (both upper and lower case) and then an equal sign, preceded by certain characters that are commonly used in SQL injection attacks. \\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in the ModSecurity web application firewall to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are different parts of the web request that the rule will be applied to.\\n- @rx: This is a flag that specifies that the rule is a regular expression.\\n- (?i): This is a flag that specifies that the regular expression should be case-insensitive.\\n- [\\\\s\\\\`;/0-9=\\\\x0B\\\\x09\\\\x0C\\\\x3B\\\\x2C\\\\x28\\\\x3B]: This is a character class that matches any of the characters inside it. These characters are commonly used in SQL injection attacks.\\n- on: This is the string \\\"on\\\" that the regex is searching for.\\n- [a-zA-Z]{325}: This matches any 325 consecutive letters (both upper and lower case).\\n- [\\\\s\\\\x0B\\\\x09\\\\x0C\\\\x3B\\\\x2C\\\\x28\\\\x3B]*?: This matches any number of whitespace or certain characters that are commonly used in SQL injection attacks, preceding the equal sign.\\n- =[^=]: This matches the equal sign followed by any character that is not another equal sign.\\n\\nFor example, this regex would match the following string: \\\"SELECT * FROM users WHERE id = 1 onnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn"
  },
  {
    "id": "941150",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)\\b(?:s(?:tyle|rc)|href)\\b[\\s\\S]*?= ",
    "explanation": "This expression is used to match any request that contains a potential XSS (Cross-Site Scripting) attack. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive that tells the web application firewall (WAF) to apply the rule to the incoming request.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are the variables that the rule will be applied to. They include request cookies, cookie names, request headers, arguments, argument names, request filenames, and XML data.\\n- @rx: This is a flag that tells the WAF to use a regular expression to match the pattern.\\n- (?i): This is a flag that tells the WAF to ignore case sensitivity.\\n- \\\\b(?:s(?:tyle|rc)|href)\\\\b: This is the pattern that the WAF will match. It looks for the words \\\"style\\\", \\\"src\\\", or \\\"href\\\" surrounded by word boundaries.\\n- [\\\\s\\\\S]*?: This is a wildcard that matches any character, including newlines.\\n- =: This is the character that the pattern must end with.\\n\\nFor example, if a request contains the following code: \\n<script src=\\\"http://example.com/malicious.js\\\"></script>\\n\\nThe regex expression will match the \\\"src\\\" attribute and flag it as a potential XSS attack."
  },
  {
    "id": "941320",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx <(?:a|abbr|acronym|address|applet|area|audioscope|b|base|basefront|bdo|bgsound|big|blackface|blink|blockquote|body|bq|br|button|caption|center|cite|code|col|colgroup|comment|dd|del|dfn|dir|div|dl|dt|em|embed|fieldset|fn|font|form|frame|frameset|h1|head|hr|html|i|iframe|ilayer|img|input|ins|isindex|kdb|keygen|label|layer|legend|li|limittext|link|listing|map|marquee|menu|meta|multicol|nobr|noembed|noframes|noscript|nosmartquotes|object|ol|optgroup|option|p|param|plaintext|pre|q|rt|ruby|s|samp|script|select|server|shadow|sidebar|small|spacer|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var|wbr|xml|xmp)\\W ",
    "explanation": "This expression is used to match any input that contains HTML tags or attributes. It is commonly used in web application firewalls to prevent cross-site scripting attacks. \\n\\nThe regex expression consists of several parts: \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: This part specifies the input sources that the regex should match against. It includes request cookies, cookie names, argument names, arguments, request filename, and XML input. \\n- @rx: This is a flag that specifies that the regex should be treated as a regular expression. \\n- <(?:a|abbr|acronym|address|applet|area|audioscope|b|base|basefront|bdo|bgsound|big|blackface|blink|blockquote|body|bq|br|button|caption|center|cite|code|col|col"
  },
  {
    "id": "941330",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i:[\\][ ]*(?:[^a-z0-9~_: ]|in).*?(?:(?:l|\\x5cu006C)(?:o|\\x5cu006F)(?:c|\\x5cu0063)(?:a|\\x5cu0061)(?:t|\\x5cu0074)(?:i|\\x5cu0069)(?:o|\\x5cu006F)(?:n|\\x5cu006E)|(?:n|\\x5cu006E)(?:a|\\x5cu0061)(?:m|\\x5cu006D)(?:e|\\x5cu0065)|(?:o|\\x5cu006F)(?:n|\\x5cu006E)(?:e|\\x5cu0065)(?:r|\\x5cu0072)(?:r|\\x5cu0072)(?:o|\\x5cu006F)(?:r|\\x5cu0072)|(?:v|\\x5cu0076)(?:a|\\x5cu0061)(?:l|\\x5cu006C)(?:u|\\x5cu0075)(?:e|\\x5cu0065)(?:O|\\x5cu004F)(?:f|\\x5cu0066)).*?=) ",
    "explanation": "This expression is used to match a regular expression pattern against various parts of an HTTP request, including cookies, arguments, and filenames. The pattern matches any string that contains certain keywords or characters, such as \\\"location\\\" or \\\"eval\\\", and may be used to detect potential security vulnerabilities in web applications.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used by the ModSecurity module to define a rule for inspecting HTTP requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are various parts of an HTTP request that the rule will be applied to, including cookies, arguments, filenames, and XML data.\\n- @rx: This is a flag that indicates the rule should be applied as a regular expression.\\n- (?i:[\\\\][ ]*(?:[^a-z0-9~_: ]|in"
  },
  {
    "id": "941340",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)[\\\\][ ]*(?:[^a-z0-9~_:\\ ]|in).+?[.].+?= ",
    "explanation": "This expression is used to match a regular expression pattern in various parts of an HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are various parts of an HTTP request where the rule will be applied. \\n- @rx: This is a flag used to indicate that the rule is a regular expression.\\n- (?i): This is a flag used to indicate that the regular expression should be case-insensitive.\\n- [\\\\\\\\][ ]*: This matches a backslash followed by zero or more spaces.\\n- (?:[^a-z0-9~_:\\\\ ]|in): This matches any character that is not a letter, number, tilde, underscore, colon, space, or the word \\\"in\\\".\\n- .+?: This matches one or more characters, but as few as possible.\\n- [.]: This matches a period.\\n- .+?=: This matches one or more characters, but as few as possible, followed by an equal sign.\\n\\nFor example, this expression could be used to detect SQL injection attempts in HTTP requests by looking for patterns like \\\"SELECT * FROM users WHERE id=1 OR 1=1\\\"."
  },
  {
    "id": "941380",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx {{.*?}} ",
    "explanation": "This expression is used to match a regular expression pattern in various parts of an HTTP request.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/*: These are the different parts of an HTTP request where the regex pattern will be matched. It includes request cookies, cookie names, argument names, arguments, request filename, and XML data.\\n- @rx: This is a ModSecurity operator that specifies that the pattern is a regular expression.\\n- {{.*?}}: This is the regular expression pattern that will be matched. It matches any character (.) zero or more times (*) in a non-greedy way (?), enclosed in double curly braces.\\n\\nFor example, this expression can be used to detect and block SQL injection attacks by matching the regular expression pattern in the request parameters."
  },
  {
    "id": "920350",
    "regex": "SecRule REQUEST_HEADERSHost @rx (?:^([\\d.]+|\\[[\\da-f:]+\\]|[\\da-f:]+)(:[\\d]+)?$) ",
    "explanation": "This expression is used to match IP addresses and ports in the Host header of an HTTP request.\\n\\nThe regex expression consists of three parts:\\n1. (?:^([\\\\d.]+|\\\\[[\\\\da-f:]+\\\\]|[\\\\da-f:]+) - This part matches the IP address in the Host header. It can match either an IPv4 address (digits and dots), an IPv6 address (enclosed in square brackets), or a shorthand IPv6 address (just digits and colons).\\n2. (:[\\\\d]+)? - This part matches the port number in the Host header, if it is present. It matches a colon followed by one or more digits.\\n3. @rx - This is a ModSecurity operator that specifies that the regular expression should be used to match against the specified variable (in this case, the Host header of the HTTP request).\\n\\nFor example, this regex would match the following Host headers:\\n- example.com\\n- 192.168.1.1\\n- [2001:0db8:85a3:0000:0000:8a2e:0370:7334]\\n- [::1]:8080"
  },
  {
    "id": "920470",
    "regex": "SecRule REQUEST_HEADERSContent-Type !@rx ^[\\w/.+*-]+(?:\\s?;\\s?(?:action|boundary|charset|component|start(?:-info)?|type|version)\\s?=\\s?[\\\\w.()+/:=?<>@#*-]+)*$ ",
    "explanation": "This expression is used to match the content-type header in an HTTP request and ensure that it contains valid parameters.\\n\\nThe regex expression consists of several parts:\\n- SecRule REQUEST_HEADERSContent-Type: This specifies that the regex should be applied to the content-type header in the HTTP request.\\n- !@rx: This specifies that the regex should not match the given pattern.\\n- ^[\\\\w/.+*-]+: This matches the content-type value, which can contain alphanumeric characters, forward slashes, periods, plus signs, asterisks, and hyphens.\\n- (?:\\\\s?;\\\\s?(?:action|boundary|charset|component|start(?:-info)?|type|version)\\\\s?=\\\\s?[\\\\\\\\w.()+/:=?<>@#*-]+)*: This matches any parameters that may be included in the content-type header. These parameters are separated by semicolons and can include the following keys: action, boundary, charset, component, start(-info), type, and version. The values for these keys can contain alphanumeric characters, forward slashes, periods, plus signs, parentheses, colons, equals signs, question marks, less than signs, greater than signs, at symbols, and hyphens.\\n\\nFor example, this regex would match the following content-type header:\\nContent-Type: text/html; charset=UTF-8; action=\\\"index\\\"; version=1.0"
  },
  {
    "id": "920274",
    "regex": "SecRule REQUEST_HEADERS|!REQUEST_HEADERSUser-Agent|!REQUEST_HEADERS:Referer|!REQUEST_HEADERS:Cookie|!REQUEST_HEADERS:Sec-Fetch-User|!REQUEST_HEADERS:Sec-CH-UA|!REQUEST_HEADERS:Sec-CH-UA-Mobile @validateByteRange 32343842-596165-909597-122 ",
    "explanation": "This expression is used to validate byte ranges in specific HTTP request headers. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule.\\n- REQUEST_HEADERS: This is a variable that represents the HTTP request headers.\\n- !REQUEST_HEADERS:User-Agent|!REQUEST_HEADERS:Referer|!REQUEST_HEADERS:Cookie|!REQUEST_HEADERS:Sec-Fetch-User|!REQUEST_HEADERS:Sec-CH-UA|!REQUEST_HEADERS:Sec-CH-UA-Mobile: These are exclusion patterns that specify which request headers should be excluded from the rule.\\n- @validateByteRange: This is an operator that validates byte ranges in the specified request headers.\\n- 32343842-596165-909597-122: This is the byte range that is being validated.\\n\\nFor example, this expression can be used to block requests that contain byte ranges outside of the specified range in the User-Agent header, while allowing byte ranges in other headers."
  },
  {
    "id": "920275",
    "regex": "SecRule REQUEST_HEADERSSec-Fetch-User|REQUEST_HEADERS:Sec-CH-UA-Mobile !@rx ^(?:\\?[01])?$ ",
    "explanation": "This expression is used to match HTTP request headers that contain either \\\"Sec-Fetch-User\\\" or \\\"Sec-CH-UA-Mobile\\\" and do not match the regular expression \\\"^(?:\\\\?[01])?$\\\". \\n\\nThe regex expression consists of several parts: \\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- \\\"REQUEST_HEADERS:Sec-Fetch-User|REQUEST_HEADERS:Sec-CH-UA-Mobile\\\" is a logical OR operator that matches either \\\"Sec-Fetch-User\\\" or \\\"Sec-CH-UA-Mobile\\\" in the request headers.\\n- \\\"!@rx\\\" is a negative operator that means \\\"does not match the following regular expression\\\".\\n- \\\"^\\\" and \\\"$\\\" are anchors that match the beginning and end of the string, respectively.\\n- \\\"(?:\\\\?[01])?\\\" is a non-capturing group that matches an optional \\\"?\\\" character followed by either \\\"0\\\" or \\\"1\\\".\\n\\nFor example, this expression can be used to block requests that contain the \\\"Sec-Fetch-User\\\" or \\\"Sec-CH-UA-Mobile\\\" headers with a value that is not either \\\"?\\\" or \\\"?0\\\" or \\\"?1\\\". This can be useful in preventing certain types of attacks or data leakage."
  },
  {
    "id": "921110",
    "regex": "SecRule ARGS_NAMES|ARGS|REQUEST_BODY|XML/* @rx (?:get|post|head|options|connect|put|delete|trace|track|patch|propfind|propatch|mkcol|copy|move|lock|unlock)\\s+[^\\s]+\\s+http/\\d ",
    "explanation": "This expression is used to match HTTP requests that use specific HTTP methods. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- ARGS_NAMES|ARGS|REQUEST_BODY|XML/*: This specifies the location of the data to be matched. It can be in the request arguments, request body, or XML data.\\n- @rx: This specifies that the following pattern is a regular expression.\\n- (?:get|post|head|options|connect|put|delete|trace|track|patch|propfind|propatch|mkcol|copy|move|lock|unlock): This is a non-capturing group that matches any of the listed HTTP methods.\\n- \\\\s+: This matches one or more whitespace characters.\\n- [^\\\\s]+: This matches one or more non-whitespace characters.\\n- \\\\s+: This matches one or more whitespace characters.\\n- http/\\\\d: This matches the HTTP version, which is typically \\\"http/1.0\\\" or \\\"http/1.1\\\".\\n\\nFor example, this expression would match the following HTTP request: \\\"GET /index.html HTTP/1.1\\\"."
  },
  {
    "id": "901321",
    "regex": "SecRule REQUEST_HEADERSUser-Agent @rx ^.*$ ",
    "explanation": "This expression is used to match any string of characters.\\nThe regex expression consists of:\\n- ^: anchor to the beginning of the string\\n- .*: matches any character (except newline) zero or more times\\n- $: anchor to the end of the string\\nFor example, this expression would match \\\"hello world\\\", \\\"12345\\\", and \\\"!!@#$%\\\".\\n\\nRegex: SecRule REQUEST_HEADERS:User-Agent @rx ^.*$\\nThis expression is used to create a rule in the ModSecurity firewall to match any user agent header in an HTTP request.\\nThe regex expression consists of:\\n- SecRule: specifies that a rule is being created\\n- REQUEST_HEADERS: specifies that the rule applies to the headers of an HTTP request\\n- User-Agent: specifies that the rule applies to the user agent header\\n- @rx: specifies that the rule uses a regular expression to match the header value\\n- ^.*$: matches any character (except newline) zero or more times from the beginning to the end of the header value\\nFor example, this expression would match \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\\\"."
  },
  {
    "id": "901410",
    "regex": "SecRule UNIQUE_ID \"@rx ^[a-f]*([0-9])[a-f]*([0-9])\"",
    "explanation": "This expression is used to match a pattern in the UNIQUE_ID variable of a web application firewall (WAF) rule. It looks for a string that starts with zero or more occurrences of the letters a to f, followed by a digit, then zero or more occurrences of the letters a to f again, and finally another digit.\\n\\nThe regex expression consists of three parts: \\n\\n1. \\\"^\\\" - This is the anchor that matches the start of the string.\\n2. \\\"[a-f]*([0-9])\\\" - This matches zero or more occurrences of the letters a to f, followed by a digit. The parentheses capture the digit as a group.\\n3. \\\"[a-f]*([0-9])\\\" - This matches zero or more occurrences of the letters a to f again, followed by another digit. The parentheses capture the digit as a group.\\n\\nFor example, this regex would match the following strings: \\n- \\\"a1b2c3d4\\\" (captures 1 and 2)\\n- \\\"abcdef123\\\" (captures 1 and 2)\\n- \\\"0a0b0c0d\\\" (captures 0 and 0)"
  },
  {
    "id": "901450",
    "regex": "SecMarker \"END-SAMPLING\"",
    "explanation": "This expression is used to match a specific string \\\"END-SAMPLING\\\" that serves as a marker for the end of a section.\\nThe regex expression consists of two parts: \\\"SecMarker\\\" and \\\"END-SAMPLING\\\". \\\"SecMarker\\\" is a custom identifier that may be used to indicate the start or end of a section in a document or code. \\\"END-SAMPLING\\\" is the specific string that marks the end of the section.\\nFor example, if a document contains multiple sections, each section may be marked with a \\\"SecMarker\\\" at the beginning and \\\"END-SAMPLING\\\" at the end to indicate the boundaries of the section. This regex expression can be used to identify and extract the content within each section."
  },
  {
    "id": "932115",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)(?:t[\\\\^]*i[\\\\^]*m[\\\\^]*e|[\\n\\r;`\\{]|\\|\\|?|&&?)[\\s\\v]*[\\s\\v\\-\\(@]*(?:[\\\\.-9A-Z_a-z]+/|(?:[\\\\x5c\\^]*[0-9A-Z_a-z][\\\\x5c\\^]*:.*|[ \\\\.-9A-Z\\x5c\\^-_a-z]*)\\x5c)?[\\\\^]*(?:o[\\\\^]*(?:d[\\\\^]*b[\\\\^]*c[\\\\^]*(?:a[\\\\^]*d[\\\\^]*3[\\\\^]*2|c[\\\\^]*o[\\\\^]*n[\\\\^]*f)|p[\\\\^]*e[\\\\^]*n[\\\\^]*f[\\\\^]*i[\\\\^]*l[\\\\^]*e[\\\\^]*s)|p[\\\\^]*(?:a[\\\\^]*t[\\\\^]*h[\\\\^]*(?:[\\s\\v\\.-/;-<>].*|p[\\\\^]*i[\\\\^]*n[\\\\^]*g)|e[\\\\^]*r[\\\\^]*(?:f[\\\\^]*m[\\\\^]*o[\\\\^]*n|l(?:[\\\\^]*(?:5|s[\\\\^]*h))?)|h[\\\\^]*p(?:[\\\\^]*[57])?|i[\\\\^]*n[\\\\^]*g|k[\\\\^]*g[\\\\^]*m[\\\\^]*g[\\\\^]*r|o[\\\\^]*(?:p[\\\\^]*d|r[\\\\^]*t[\\\\^]*q[\\\\^]*r[\\\\^]*y|w[\\\\^]*e[\\\\^]*r[\\\\^]*(?:c[\\\\^]*f[\\\\^]*g|s[\\\\^]*h[\\\\^]*e[\\\\^]*l[\\\\^]*l(?:[\\\\^]*_[\\\\^]*i[\\\\^]*s[\\\\^]*e)?))|r[\\\\^]*(?:i[\\\\^]*n[\\\\^]*t[\\\\^]*(?:[\\s\\v\\.-/;-<>].*|b[\\\\^]*r[\\\\^]*m)|n[\\\\^]*(?:c[\\\\^]*n[\\\\^]*f[\\\\^]*g|m[\\\\^]*n[\\\\^]*g[\\\\^]*r)|o[\\\\^]*m[\\\\^]*p[\\\\^]*t)|s[\\\\^]*(?:e[\\\\^]*x[\\\\^]*e[\\\\^]*c|f[\\\\^]*i[\\\\^]*l[\\\\^]*e|g[\\\\^]*e[\\\\^]*t[\\\\^]*s[\\\\^]*i[\\\\^]*d|i[\\\\^]*n[\\\\^]*f[\\\\^]*o|k[\\\\^]*i[\\\\^]*l[\\\\^]*l|l[\\\\^]*(?:i[\\\\^]*s[\\\\^]*t|o[\\\\^]*g[\\\\^]*(?:g[\\\\^]*e[\\\\^]*d[\\\\^]*o[\\\\^]*n|l[\\\\^]*i[\\\\^]*s[\\\\^]*t))|p[\\\\^]*(?:a[\\\\^]*s[\\\\^]*s[\\\\^]*w[\\\\^]*d|i[\\\\^]*n[\\\\^]*g)|s[\\\\^]*(?:e[\\\\^]*r[\\\\^]*v[\\\\^]*i[\\\\^]*c[\\\\^]*e|h[\\\\^]*u[\\\\^]*t[\\\\^]*d[\\\\^]*o[\\\\^]*w[\\\\^]*n|u[\\\\^]*s[\\\\^]*p[\\\\^]*e[\\\\^]*n[\\\\^]*d))|u[\\\\^]*s[\\\\^]*h[\\\\^]*d|y[\\\\^]*t[\\\\^]*h[\\\\^]*o[\\\\^]*n(?:[\\\\^]*(?:2|3(?:[\\\\^]*m)?))?)|q[\\\\^]*(?:g[\\\\^]*r[\\\\^]*e[\\\\^]*p|p[\\\\^]*r[\\\\^]*o[\\\\^]*c[\\\\^]*e[\\\\^]*s[\\\\^]*s|u[\\\\^]*e[\\\\^]*r[\\\\^]*y[\\\\^]*[\\s\\v\\.-/;-<>].*|w[\\\\^]*i[\\\\^]*n[\\\\^]*s[\\\\^]*t[\\\\^]*a)|r[\\\\^]*(?:a[\\\\^]*(?:r[\\\\^]*[\\s\\v\\.-/;-<>].*|s[\\\\^]*(?:d[\\\\^]*i[\\\\^]*a[\\\\^]*l|p[\\\\^]*h[\\\\^]*o[\\\\^]*n[\\\\^]*e))|d[\\\\^]*[\\s\\v\\.-/;-<>].*|e[\\\\^]*(?:c[\\\\^]*(?:d[\\\\^]*i[\\\\^]*s[\\\\^]*c|o[\\\\^]*v[\\\\^]*e[\\\\^]*r)|g[\\\\^]*(?:[\\s\\v\\.-/;-<>].*|e[\\\\^]*d[\\\\^]*i[\\\\^]*t|i[\\\\^]*n[\\\\^]*i|s[\\\\^]*v[\\\\^]*r[\\\\^]*3[\\\\^]*2)|k[\\\\^]*e[\\\\^]*y[\\\\^]*w[\\\\^]*i[\\\\^]*z|(?:n[\\\\^]*(?:a[\\\\^]*m[\\\\^]*e[\\\\^]*)?|(?:p[\\\\^]*l[\\\\^]*a[\\\\^]*c[\\\\^]*e|s[\\\\^]*e[\\\\^]*t)[\\\\^]*)[\\s\\v\\.-/;-<>].*)|m[\\\\^]*(?:(?:d[\\\\^]*i[\\\\^]*r[\\\\^]*)?[\\s\\v\\.-/;-<>].*|t[\\\\^]*s[\\\\^]*h[\\\\^]*a[\\\\^]*r[\\\\^]*e)|o[\\\\^]*(?:b[\\\\^]*o[\\\\^]*c[\\\\^]*o[\\\\^]*p[\\\\^]*y|u[\\\\^]*t[\\\\^]*e[\\\\^]*[\\s\\v\\.-/;-<>].*)|s[\\\\^]*(?:t[\\\\^]*r[\\\\^]*u[\\\\^]*i|y[\\\\^]*n[\\\\^]*c)|u[\\\\^]*(?:b[\\\\^]*y[\\\\^]*(?:1(?:[\\\\^]*[8-9])?|2[\\\\^]*[0-2])|n[\\\\^]*(?:a[\\\\^]*s|d[\\\\^]*l[\\\\^]*l[\\\\^]*3[\\\\^]*2)))|s[\\\\^]*(?:c[\\\\^]*(?:h[\\\\^]*t[\\\\^]*a[\\\\^]*s[\\\\^]*k[\\\\^]*s|l[\\\\^]*i[\\\\^]*s[\\\\^]*t)|e[\\\\^]*(?:c[\\\\^]*p[\\\\^]*o[\\\\^]*l|l[\\\\^]*e[\\\\^]*c[\\\\^]*t|t[\\\\^]*(?:(?:x[\\\\^]*)?[\\s\\v\\.-/;-<>].*|l[\\\\^]*o[\\\\^]*c[\\\\^]*a[\\\\^]*l))|f[\\\\^]*c|h[\\\\^]*(?:a[\\\\^]*r[\\\\^]*e|e[\\\\^]*l[\\\\^]*l[\\\\^]*r[\\\\^]*u[\\\\^]*n[\\\\^]*a[\\\\^]*s|i[\\\\^]*f[\\\\^]*t|o[\\\\^]*(?:r[\\\\^]*t[\\\\^]*c[\\\\^]*u[\\\\^]*t|w[\\\\^]*(?:g[\\\\^]*r[\\\\^]*p|m[\\\\^]*b[\\\\^]*r)[\\\\^]*s)|r[\\\\^]*p[\\\\^]*u[\\\\^]*b[\\\\^]*w|u[\\\\^]*t[\\\\^]*d[\\\\^]*o[\\\\^]*w[\\\\^]*n)|i[\\\\^]*g[\\\\^]*v[\\\\^]*e[\\\\^]*r[\\\\^]*i[\\\\^]*f|l[\\\\^]*(?:e[\\\\^]*e[\\\\^]*p|m[\\\\^]*g[\\\\^]*r)|(?:o|t[\\\\^]*a)[\\\\^]*r[\\\\^]*t[\\\\^]*[\\s\\v\\.-/;-<>].*|u[\\\\^]*b[\\\\^]*(?:i[\\\\^]*n[\\\\^]*a[\\\\^]*c[\\\\^]*l|s[\\\\^]*t)|v[\\\\^]*n|y[\\\\^]*s[\\\\^]*(?:d[\\\\^]*m|k[\\\\^]*e[\\\\^]*y|t[\\\\^]*e[\\\\^]*m[\\\\^]*(?:i[\\\\^]*n[\\\\^]*f[\\\\^]*o|p[\\\\^]*r[\\\\^]*o[\\\\^]*p[\\\\^]*e[\\\\^]*r[\\\\^]*t[\\\\^]*i[\\\\^]*e[\\\\^]*s[\\\\^]*(?:a[\\\\^]*d[\\\\^]*v[\\\\^]*a[\\\\^]*n[\\\\^]*c[\\\\^]*e[\\\\^]*d|d[\\\\^]*a[\\\\^]*t[\\\\^]*a[\\\\^]*e[\\\\^]*x[\\\\^]*e[\\\\^]*c[\\\\^]*u[\\\\^]*t[\\\\^]*i[\\\\^]*o[\\\\^]*n[\\\\^]*p[\\\\^]*r[\\\\^]*e[\\\\^]*v[\\\\^]*e[\\\\^]*n[\\\\^]*t[\\\\^]*i[\\\\^]*o[\\\\^]*n|(?:h[\\\\^]*a[\\\\^]*r[\\\\^]*d[\\\\^]*w[\\\\^]*a[\\\\^]*r|p[\\\\^]*e[\\\\^]*r[\\\\^]*f[\\\\^]*o[\\\\^]*r[\\\\^]*m[\\\\^]*a[\\\\^]*n[\\\\^]*c)[\\\\^]*e))))|t[\\\\^]*(?:a[\\\\^]*(?:k[\\\\^]*e[\\\\^]*o[\\\\^]*w[\\\\^]*n|s[\\\\^]*k[\\\\^]*(?:k[\\\\^]*i[\\\\^]*l[\\\\^]*l|l[\\\\^]*i[\\\\^]*s[\\\\^]*t|m[\\\\^]*g[\\\\^]*r|s[\\\\^]*c[\\\\^]*h[\\\\^]*d))|(?:e[\\\\^]*l[\\\\^]*n[\\\\^]*e|i[\\\\^]*m[\\\\^]*e[\\\\^]*o[\\\\^]*u|l[\\\\^]*i[\\\\^]*s|p[\\\\^]*m[\\\\^]*i[\\\\^]*n[\\\\^]*i)[\\\\^]*t|r[\\\\^]*(?:a[\\\\^]*c[\\\\^]*e[\\\\^]*r[\\\\^]*t|e[\\\\^]*e)|s[\\\\^]*(?:d[\\\\^]*i[\\\\^]*s[\\\\^]*c[\\\\^]*o|s[\\\\^]*h[\\\\^]*u[\\\\^]*t[\\\\^]*d)[\\\\^]*n|y[\\\\^]*p[\\\\^]*e[\\\\^]*(?:[\\s\\v\\.-/;-<>].*|p[\\\\^]*e[\\\\^]*r[\\\\^]*f))|u[\\\\^]*(?:n[\\\\^]*(?:r[\\\\^]*a[\\\\^]*r|z[\\\\^]*i[\\\\^]*p)|s[\\\\^]*(?:e[\\\\^]*r[\\\\^]*a[\\\\^]*c[\\\\^]*c[\\\\^]*o[\\\\^]*u[\\\\^]*n[\\\\^]*t[\\\\^]*c[\\\\^]*o[\\\\^]*n[\\\\^]*t[\\\\^]*r[\\\\^]*o[\\\\^]*l[\\\\^]*s[\\\\^]*e[\\\\^]*t[\\\\^]*t[\\\\^]*i[\\\\^]*n[\\\\^]*g[\\\\^]*s|r[\\\\^]*s[\\\\^]*t[\\\\^]*a[\\\\^]*t))|v[\\\\^]*(?:e[\\\\^]*r[\\\\^]*i[\\\\^]*f[\\\\^]*y|o[\\\\^]*l[\\\\^]*[\\s\\v\\.-/;-<>].*)|w[\\\\^]*(?:a[\\\\^]*i[\\\\^]*t[\\\\^]*f[\\\\^]*o[\\\\^]*r|e[\\\\^]*v[\\\\^]*t[\\\\^]*u[\\\\^]*t[\\\\^]*i[\\\\^]*l|g[\\\\^]*e[\\\\^]*t|h[\\\\^]*o[\\\\^]*a[\\\\^]*m[\\\\^]*i|i[\\\\^]*n[\\\\^]*(?:d[\\\\^]*i[\\\\^]*f[\\\\^]*f|m[\\\\^]*s[\\\\^]*d[\\\\^]*p|r[\\\\^]*[ms]|v[\\\\^]*a[\\\\^]*r)|m[\\\\^]*i[\\\\^]*(?:c|m[\\\\^]*g[\\\\^]*m[\\\\^]*t)|s[\\\\^]*c[\\\\^]*(?:r[\\\\^]*i[\\\\^]*p[\\\\^]*t|u[\\\\^]*i)|u[\\\\^]*(?:a[\\\\^]*(?:p[\\\\^]*p|u[\\\\^]*c[\\\\^]*l[\\\\^]*t)|s[\\\\^]*a))|x[\\\\^]*c[\\\\^]*(?:a[\\\\^]*c[\\\\^]*l[\\\\^]*s|o[\\\\^]*p[\\\\^]*y)|z[\\\\^]*i[\\\\^]*p[\\\\^]*[\\s\\v\\.-/;-<>].*)(?:\\.[\\\\^]*[0-9A-Z_a-z]+)?\\b ",
    "explanation": "{\"explanation\":\"Regex: SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)(?:t[\\\\\\\\^]*i[\\\\\\\\^]*m[\\\\\\\\^]*e|[\\\\n\\\\r;`\\\\{]|\\\\|\\\\|?|&&?)[\\\\s\\\\v]*[\\\\s\\\\v\\\\-\\\\(@]*(?:[\\\\\\\\.-9A-Z_a-z]+/|(?:[\\\\\\\\x5c\\\\^]*[0-9A-Z_a-z][\\\\\\\\x5c\\\\^]*:.*|[ \\\\\\\\.-9A-Z\\\\x5c\\\\^-_a-z]*)\\\\x5c)?[\\\\\\\\^]*(?:o[\\\\\\\\^]*(?:d[\\\\\\\\^]*b[\\\\\\\\^]*c[\\\\\\\\^]*(?:a[\\\\\\\\^]*d[\\\\\\\\^]*3[\\\\\\\\^]*2|c[\\\\\\\\^]*o[\\\\\\\\^]*n[\\\\\\\\^]*f)|p[\\\\\\\\^]*e[\\\\\\\\^]*n[\\\\\\\\^]*f[\\\\\\\\^]*i[\\\\\\\\^]*l[\\\\\\\\^]*e[\\\\\\\\^]*s)|p[\\\\\\\\^]*(?:a[\\\\\\\\^]*t[\\\\\\\\^]*h[\\\\\\\\^]*(?:[\\\\s\\\\v\\\\.-/;-<>].*|p[\\\\\\\\^]*i[\\\\\\\\^]*n[\\\\\\\\^]*g)|e[\\\\\\\\^]*r[\\\\\\\\^]*(?:f[\\\\\\\\^]*m[\\\\\\\\^]*o[\\\\\\\\^]*n|l(?:[\\\\\\\\^]*(?:5|s[\\\\\\\\^]*h))?)|h[\\\\\\\\^]*p(?:[\\\\\\\\^]*[57])?|i[\\\\\\\\^]*n[\\\\\\\\^]*g|k[\\\\\\\\^]*g[\\\\\\\\^]*m[\\\\\\\\^]*g[\\\\\\\\^]*r|o[\\\\\\\\^]*(?:p[\\\\\\\\^]*d|r[\\\\\\\\^]*t[\\\\\\\\^]*q[\\\\\\\\^]*r[\\\\\\\\^]*y|w[\\\\\\\\^]*e[\\\\\\\\^]*r[\\\\\\\\^]*(?:c[\\\\\\\\^]*f[\\\\\\\\^]*g|s[\\\\\\\\^]*h[\\\\\\\\^]*e[\\\\\\\\^]*l[\\\\\\\\^]*l(?:[\\\\\\\\^]*_[\\\\\\\\^]*i[\\\\\\\\^]*s[\\\\\\\\^]*e)?))|r[\\\\\\\\^]*(?:i[\\\\\\\\^]*n[\\\\\\\\^]*t[\\\\\\\\^]*(\"}\n"
  },
  {
    "id": "932130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx \\$(?:\\((?:.*|\\(.*\\))\\)|\\{.*\\})|[<>]\\(.*\\)|/[0-9A-Z_a-z]*\\[!?.+\\] ",
    "explanation": "This expression is used to match and block potentially malicious input in web application requests. \\n\\nThe regex expression consists of several parts:\\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the request where the rule should be applied, including cookies, arguments, and XML data\\n- @rx: indicates that the rule uses a regular expression\\n- \\\\$(?:\\\\((?:.*|\\\\(.*\\\\))\\\\)|\\\\{.*\\\\}): matches any string that starts with a dollar sign followed by either parentheses with any content or curly braces with any content\\n- [<>]\\\\(.*\\\\): matches any string that contains angle brackets followed by parentheses with any content\\n- /[0-9A-Z_a-z]*\\\\[!?.+\\\\]: matches any string that starts with a forward slash followed by any combination of alphanumeric characters and underscores, followed by square brackets with any combination of characters inside, including negation and question marks\\n\\nFor example, this expression would match and block input such as:\\n- $system(\\\"rm -rf /\\\")\\n- <script>alert('hello')</script>\\n- /etc/passwd[?id=1]"
  },
  {
    "id": "932140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx \\b(?:for(?:/[dflr].*)? %+[^ ]+ in\\(.*\\)[\\s\\v]?do|if(?:/i)?(?: not)?(?: (?:e(?:xist|rrorlevel)|defined|cmdextversion)\\b|[ \\(].*(?:\\b(?:g(?:eq|tr)|equ|neq|l(?:eq|ss))\\b|==))) ",
    "explanation": "This expression is used to match certain patterns in HTTP requests and responses, specifically in cookies and arguments. It is likely used in a web application firewall or similar security tool to detect and prevent attacks.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in the ModSecurity web application firewall to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the HTTP request and response that the rule will be applied to. They include cookies, arguments, and XML data.\\n- @rx: This is a ModSecurity operator that specifies that the rule will use regular expressions to match patterns.\\n- \\\\b(?:for(?:/[dflr].*)? %+[^ ]+ in\\\\(.*\\\\)[\\\\s\\\\v]?do|if(?:/i)?(?: not)?(?: (?:e(?:xist|rrorlevel)|defined|cmdextversion)\\\\b|[ \\\\(].*(?:\\\\b(?:g(?:eq|tr)|equ|neq|l(?:eq|ss))\\\\b|==))): This is the actual regular expression used to match patterns in the specified parts of the HTTP request and response. It includes various keywords and operators used in programming languages, such as \\\"for\\\", \\\"if\\\", and \\\"==\\\".\\n\\nFor example, this regex could be used to detect and prevent SQL injection attacks by matching patterns such as \\\"SELECT * FROM users WHERE username = 'admin' OR 1=1;\\\". It could also be used to prevent command injection attacks by matching patterns such as \\\"rm -rf /\\\"."
  },
  {
    "id": "932200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:Referer|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/* @rx (?:[*?`\\x5c][^/\\n]+/|\\$[({\\[#@!?*\\-_$a-zA-Z0-9]|/[^/]+?[*?`\\x5c]) ",
    "explanation": ""
  },
  {
    "id": "932190",
    "regex": "SecRule ARGS @rx /(?[?*]+[a-z/]+|[a-z/]+[?*]+) ",
    "explanation": ""
  },
  {
    "id": "954130",
    "regex": "SecRule RESPONSE_STATUS \"!@rx ^404$\"",
    "explanation": "{\"explanation\":\"This expression is used to match any response status that is not equal to 404. \\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- RESPONSE_STATUS: This is a variable that holds the HTTP response status code.\\n- \\\"!@rx\\\": This is a negated regular expression operator that means \\\"does not match\\\".\\n- \\\"^404$\\\": This is a regular expression pattern that matches the exact string \\\"404\\\".\\n\\nFor example, if the response status is 200, the expression will match. If the response status is 404, the expression will not match.\",\"explanation_id\":203,\"version\":82}"
  },
  {
    "id": "921120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx [\\r\\n]\\W*?(?:content-(?:type|length)|set-cookie|location):\\s*\\w ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential HTTP response splitting attacks by searching for specific characters and patterns in the response headers.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used by the ModSecurity module to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the HTTP request that the rule will be applied to.\\n- @rx: This is a flag that indicates the rule will use a regular expression to match against the request.\\n- [\\\\r\\\\n]\\\\W*?(?:content-(?:type|length)|set-cookie|location):\\\\s*\\\\w: This is the regular expression pattern that will be matched against the request.\\n\\nFor example, if the response header contains a line that starts with \\\"Content-Type:\\\", \\\"Content-Length:\\\", \\\"Set-Cookie:\\\", or \\\"Location:\\\", followed by whitespace and a word character, the rule will be triggered. This can indicate an attempt to inject malicious content into the response header, which could lead to various security vulnerabilities.\",\"explanation_id\":206,\"version\":83}"
  },
  {
    "id": "921150",
    "regex": "SecRule ARGS_NAMES \"@rx [\\n\\r]\"",
    "explanation": "{\"explanation\":\"This expression is used to detect if any of the arguments in a web request contain newline or carriage return characters. \\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `ARGS_NAMES`: This is a variable that contains the names of all the arguments in the request.\\n- `@rx`: This is a regular expression operator that indicates that the following pattern is a regular expression.\\n- `[\\\\n\\\\r]`: This is a character class that matches either a newline or a carriage return character.\\n\\nFor example, if a user submits a web request with an argument named \\\"message\\\" that contains a newline character, this expression would trigger and potentially block the request.\",\"explanation_id\":208,\"version\":87}"
  },
  {
    "id": "921151",
    "regex": "SecRule ARGS_GET \"@rx [\\n\\r]\"",
    "explanation": "{\"explanation\":\"This expression is used to detect if a HTTP request contains any newline or carriage return characters in the GET parameters.\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- ARGS_GET: This is a variable that represents the GET parameters of a HTTP request.\\n- @rx: This is a regular expression operator that indicates the following pattern is a regular expression.\\n- [\\\\n\\\\r]: This is a character class that matches any newline or carriage return characters.\\n\\nFor example, if a HTTP request contains the following GET parameters:\\nhttp://example.com/?param1=value1%0D%0Aparam2=value2\\nThe expression will match because it contains both a newline (\\\\n) and a carriage return (\\\\r) character.\",\"explanation_id\":210,\"version\":70}"
  },
  {
    "id": "905110",
    "regex": "SecRule REMOTE_ADDR @ipMatch 127.0.0.1:1 ",
    "explanation": "{\"explanation\":\"This expression is used to match a specific IP address and port number in a web application firewall rule. \\n\\nThe regex expression consists of two parts: \\\"REMOTE_ADDR\\\" which refers to the IP address of the client making the request, and \\\"@ipMatch 127.0.0.1:1\\\" which specifies the exact IP address and port number to match. \\n\\nFor example, if a web application firewall is configured with this rule, any incoming requests from the IP address 127.0.0.1 on port 1 will be blocked.\",\"explanation_id\":212,\"version\":99}"
  },
  {
    "id": "942250",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:merge.*?using\\s*?\\(|execute\\s*?immediate\\s*?[\\`]|match\\s*?[\\w()+-]+\\s*?against\\s*?\\() ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule for web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a set of variables to be checked for the presence of the SQL injection pattern\\n- @rx: a flag indicating that the pattern is a regular expression\\n- (?i:merge.*?using\\\\s*?\\\\(|execute\\\\s*?immediate\\\\s*?[\\\\`]|match\\\\s*?[\\\\w()+-]+\\\\s*?against\\\\s*?\\\\()): the actual regular expression pattern to be matched, which includes various SQL injection techniques such as \\\"merge using\\\", \\\"execute immediate\\\", and \\\"match against\\\"\\n\\nFor example, if a web request contains a cookie or argument with the value \\\"merge using\\\" or \\\"execute immediate\\\", this expression would trigger a security alert.\",\"explanation_id\":216,\"version\":5}"
  },
  {
    "id": "942431",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* @rx ((?:[~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>][^~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>]*?){6}) ",
    "explanation": "{\"explanation\":\"This expression is used to match a string that contains at least six consecutive special characters.\\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `ARGS_NAMES|ARGS|XML/*`: This specifies the input data to be checked. It can be either the parameter names, parameter values, or XML data.\\n- `@rx`: This specifies that the following pattern is a regular expression.\\n- `((?:[~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>][^~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>]*?){6})`: This is the regular expression pattern that matches at least six consecutive special characters. It consists of a non-capturing group that matches any special character followed by any non-special character, repeated six times.\\n\\nFor example, this expression can be used to detect passwords that contain six or more consecutive special characters, which are often considered weak and easy to guess.\",\"explanation_id\":230,\"version\":41}"
  },
  {
    "id": "942432",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* @rx ((?:[~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>][^~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>]*?){2}) ",
    "explanation": "{\"explanation\":\"This expression is used to match a pattern in the input string that contains two consecutive special characters or symbols. \\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `ARGS_NAMES|ARGS|XML/*`: This specifies the input data to be matched. It can be either the argument names, arguments, or XML data.\\n- `@rx`: This indicates that the following pattern is a regular expression.\\n- `((?:[~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>][^~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>]*?){2})`: This is the regular expression pattern that matches two consecutive special characters or symbols. It uses a non-capturing group `(?:)` to match any special character or symbol followed by any number of non-special characters or symbols, and repeats this group twice `{2}` to match two consecutive occurrences.\\n\\nFor example, this expression can be used to detect potential SQL injection attacks where the attacker tries to use special characters or symbols to bypass input validation and inject malicious SQL code into the database.\",\"explanation_id\":232,\"version\":93}"
  },
  {
    "id": "933130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmFromFile php-variables.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks on web applications by searching for specific patterns in the request cookies, arguments, and XML data. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule for detecting attacks. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the locations where the rule will search for the specified patterns. \\n- @pmFromFile: This is a function used to load a list of patterns from a file. \\n- php-variables.data: This is the name of the file containing the list of patterns. \\n\\nFor example, if the request contains a cookie or argument that matches one of the patterns in the php-variables.data file, the rule will trigger and take action to prevent the attack.\",\"explanation_id\":234,\"version\":1}"
  },
  {
    "id": "932120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmFromFile windows-powershell-commands.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks using Windows PowerShell commands in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the web request that the rule will be applied to. \\n- @pmFromFile: This is a ModSecurity operator that loads a list of strings from a file and performs a partial match against them. \\n- windows-powershell-commands.data: This is the name of the file containing a list of Windows PowerShell commands that the rule will match against. \\n\\nFor example, if a web request contains a cookie or argument that matches one of the Windows PowerShell commands in the file, the rule will trigger and potentially block the request.\",\"explanation_id\":240,\"version\":78}"
  },
  {
    "id": "932170",
    "regex": "SecRule REQUEST_HEADERS|REQUEST_LINE \"@rx ^\\(\\s*\\)\\s+{\"",
    "explanation": "{\"explanation\":\"This expression is used to match a regular expression pattern in the request headers or request line of an HTTP request. \\n\\nThe regex expression consists of several parts: \\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- \\\"REQUEST_HEADERS|REQUEST_LINE\\\" is a logical OR operator that specifies that the rule will be applied to either the request headers or request line.\\n- \\\"@rx\\\" is a keyword that indicates that the following pattern is a regular expression.\\n- \\\"^\\\\(\\\\s*\\\\)\\\\s+{\\\" is the regular expression pattern that matches a string that starts with an opening parenthesis followed by zero or more whitespace characters, and then one or more whitespace characters followed by an opening curly brace.\\n\\nFor example, this expression can be used to block requests that contain a specific pattern in the request headers or request line, such as a malicious script injection.\",\"explanation_id\":243,\"version\":69}"
  },
  {
    "id": "932171",
    "regex": "SecRule ARGS_NAMES|ARGS|FILES_NAMES \"@rx ^\\(\\s*\\)\\s+{\"",
    "explanation": "{\"explanation\":\"This expression is used to detect potential code injection attacks in web applications.\\nThe regex expression consists of three parts: \\n1. SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n2. ARGS_NAMES|ARGS|FILES_NAMES: This is a logical OR operator used to match any of the three variables - ARGS_NAMES, ARGS, or FILES_NAMES. These variables represent the input parameters of a web request.\\n3. \\\"@rx ^\\\\(\\\\s*\\\\)\\\\s+{\\\": This is a regular expression pattern that matches any input parameter that starts with an opening parenthesis followed by zero or more whitespace characters, and then a curly brace.\\n\\nFor example, if an attacker tries to inject malicious code into a web application by passing a parameter like \\\"( SELECT * FROM users )\\\", this expression will detect it and block the request.\",\"explanation_id\":245,\"version\":23}"
  },
  {
    "id": "941110",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* @rx (?i)<script[^>]*>[\\s\\S]*? ",
    "explanation": "{\"explanation\":\"This expression is used to detect and prevent cross-site scripting (XSS) attacks in web applications. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/*: a list of variables to be checked for the presence of the XSS payload\\n- @rx: a flag indicating that the following pattern is a regular expression\\n- (?i): a flag indicating that the pattern should be case-insensitive\\n- <script[^>]*>: a pattern that matches the opening tag of a script element\\n- [\\\\s\\\\S]*?: a pattern that matches any character (including newlines) zero or more times, but as few times as possible, until the next part of the pattern is matched\\n\\nFor example, if a user tries to submit a form with a payload like \\\"<script>alert('XSS')</script>\\\", this expression would detect it and block the request.\",\"explanation_id\":246,\"version\":26}"
  },
  {
    "id": "913110",
    "regex": "SecRule REQUEST_HEADERS_NAMES|REQUEST_HEADERS \"@pmFromFile scanners-headers.data\"",
    "explanation": "{\"explanation\":\"This expression is used to match any HTTP request headers that contain any of the values listed in the \\\"scanners-headers.data\\\" file. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"REQUEST_HEADERS_NAMES|REQUEST_HEADERS\\\" specifies that the rule should be applied to both the names and values of the request headers.\\n- \\\"@pmFromFile\\\" is a ModSecurity operator that loads a list of values from a file.\\n- \\\"scanners-headers.data\\\" is the name of the file containing the list of values to match against.\\n\\nFor example, if the \\\"scanners-headers.data\\\" file contains the value \\\"sqlmap\\\", this expression would match any request header that contains the string \\\"sqlmap\\\".\",\"explanation_id\":256,\"version\":97}"
  },
  {
    "id": "951150",
    "regex": "SecRule RESPONSE_BODY \"@rx (?i)Dynamic SQL Error\"",
    "explanation": "{\"explanation\":\"This expression is used to identify if a web application is vulnerable to SQL injection attacks by searching for the presence of a specific error message in the response body.\\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity, a web application firewall, to define a security rule.\\n- `RESPONSE_BODY`: This is a variable that represents the response body of the HTTP request.\\n- `@rx`: This is a keyword that indicates that the following pattern is a regular expression.\\n- `(?i)`: This is a flag that makes the regular expression case-insensitive.\\n- `Dynamic SQL Error`: This is the specific error message that the regular expression is searching for.\\n\\nFor example, if the response body of an HTTP request contains the string \\\"Dynamic SQL Error\\\", the security rule will be triggered and the request will be blocked or logged, depending on the configuration of ModSecurity.\",\"explanation_id\":259,\"version\":34}"
  },
  {
    "id": "951170",
    "regex": "SecRule RESPONSE_BODY \"@rx (?i)org\\.hsqldb\\.jdbc\"",
    "explanation": "{\"explanation\":\"This expression is used to detect if the response body of a web application contains the string \\\"org.hsqldb.jdbc\\\" using regular expressions.\\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- RESPONSE_BODY: This is a variable that represents the response body of a web application.\\n- \\\"@rx\\\": This is a regular expression operator that indicates that the following string is a regular expression.\\n- (?i): This is a regular expression modifier that makes the search case-insensitive.\\n- org\\\\.hsqldb\\\\.jdbc: This is the regular expression pattern that matches the string \\\"org.hsqldb.jdbc\\\". The backslashes are used to escape the dots, which have a special meaning in regular expressions.\\n\\nFor example, if the response body of a web application contains the string \\\"org.hsqldb.jdbc.Driver\\\", this expression would match.\",\"explanation_id\":260,\"version\":58}"
  },
  {
    "id": "920160",
    "regex": "SecRule REQUEST_HEADERSContent-Length !@rx ^\\d+$ ",
    "explanation": "{\"explanation\":\"This expression is used to match requests that do not have a valid Content-Length header. \\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_HEADERS: This specifies that the rule applies to the headers of the HTTP request.\\n- Content-Length: This is the name of the header that is being checked.\\n- !@rx: This is a negated regular expression operator, which means that the rule will match if the regular expression does not match.\\n- ^\\\\d+$: This regular expression matches one or more digits from the beginning (^) to the end ($) of the string.\\n\\nFor example, if a request has a Content-Length header with a value of \\\"abc\\\", it will match this rule and be blocked by ModSecurity. However, if the Content-Length header has a valid integer value, such as \\\"123\\\", it will not match this rule and will be allowed to pass through.\",\"explanation_id\":261,\"version\":70}"
  },
  {
    "id": "920180",
    "regex": "SecRule REQUEST_PROTOCOL \"!@within HTTP/2 HTTP/2.0\"",
    "explanation": "{\"explanation\":\"This expression is used to identify requests that are not using the HTTP/2 protocol. \\n\\nThe regex expression consists of two parts: \\n1. \\\"SecRule\\\" is a directive used in ModSecurity to define a rule that will be applied to incoming requests. \\n2. The regular expression \\\"!@within HTTP/2 HTTP/2.0\\\" is used to match any request that does not contain the string \\\"HTTP/2\\\" or \\\"HTTP/2.0\\\" within the \\\"REQUEST_PROTOCOL\\\" field. \\n\\nFor example, if a request comes in with the protocol \\\"HTTP/1.1\\\", it will match this expression and trigger the ModSecurity rule. \\n\\nOverall, this expression is used to enforce the use of the HTTP/2 protocol for incoming requests.\",\"explanation_id\":263,\"version\":2}"
  },
  {
    "id": "920210",
    "regex": "SecRule REQUEST_HEADERSConnection @rx \\b(?:keep-alive|close)\\s?(?:keep-alive|close)\\b ",
    "explanation": "{\"explanation\":\"This expression is used to match the \\\"Connection\\\" header in an HTTP request to check if it contains either \\\"keep-alive\\\" or \\\"close\\\" values. \\n\\nThe regex expression consists of the following parts:\\n- \\\"\\\\b\\\" is a word boundary anchor that matches the position between a word character and a non-word character.\\n- \\\"(?:keep-alive|close)\\\" is a non-capturing group that matches either \\\"keep-alive\\\" or \\\"close\\\".\\n- \\\"\\\\s?\\\" matches zero or one whitespace character.\\n- The entire expression is wrapped in \\\"@rx\\\" to indicate that it is a regular expression.\\n\\nFor example, this expression can be used in a web application firewall to block requests that use the \\\"close\\\" value in the \\\"Connection\\\" header, which can be a sign of a potential attack.\",\"explanation_id\":265,\"version\":95}"
  },
  {
    "id": "920260",
    "regex": "SecRule REQUEST_URI|REQUEST_BODY \"@rx \\%u[fF]{2}[0-9a-fA-F]{2}\"",
    "explanation": "{\"explanation\":\"This expression is used to detect and block requests that contain encoded characters in the URL or request body. \\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_URI|REQUEST_BODY: This specifies that the rule should be applied to both the request URI and request body.\\n- \\\"@rx\\\": This is a regular expression operator that specifies that the following pattern should be treated as a regular expression.\\n- \\\"\\\\%u[fF]{2}[0-9a-fA-F]{2}\\\": This is the regular expression pattern that matches encoded characters in the URL or request body. It looks for the string \\\"%u\\\" followed by two hexadecimal characters in the range of \\\"fF\\\", followed by two more hexadecimal characters in the range of \\\"0-9a-fA-F\\\".\\n\\nFor example, if a request contains the string \\\"%u0041\\\" (which represents the Unicode character \\\"A\\\" in URL encoding), this expression would match it and trigger the rule to block the request.\",\"explanation_id\":267,\"version\":5}"
  },
  {
    "id": "920330",
    "regex": "SecRule REQUEST_HEADERSUser-Agent @rx ^$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect empty User-Agent headers in HTTP requests.\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"REQUEST_HEADERS\\\" is a variable that represents the HTTP request headers.\\n- \\\"User-Agent\\\" is the specific header being targeted.\\n- \\\"@rx\\\" is a regular expression operator that indicates the following pattern should be treated as a regular expression.\\n- \\\"^$\\\" is the regular expression pattern that matches an empty string.\\n\\nFor example, if an HTTP request is sent without a User-Agent header, this expression would trigger and potentially block the request.\",\"explanation_id\":269,\"version\":77}"
  },
  {
    "id": "920440",
    "regex": "SecRule REQUEST_BASENAME \"@rx \\.([^.]+)$\"",
    "explanation": "{\"explanation\":\"This expression is used to match the file extension of a requested resource in a web application firewall rule. \\n\\nThe regex expression consists of several parts: \\n- \\\"SecRule\\\" indicates that this is a rule in a web application firewall.\\n- \\\"REQUEST_BASENAME\\\" refers to the name of the requested resource.\\n- \\\"@rx\\\" indicates that the following is a regular expression.\\n- \\\"\\\\.\\\" matches a literal period character.\\n- \\\"([^.]+)\\\" matches one or more characters that are not periods and captures them in a group.\\n- \\\"$\\\" matches the end of the string.\\n\\nFor example, if the requested resource is \\\"example.com/image.jpg\\\", this expression would match the \\\".jpg\\\" file extension.\",\"explanation_id\":271,\"version\":81}"
  },
  {
    "id": "920450",
    "regex": "SecRule REQUEST_HEADERS_NAMES \"@rx ^.*$\"",
    "explanation": "{\"explanation\":\"This expression is used to match any string that starts with any character and ends with any character. \\n\\nThe regex expression consists of one part: \\n\\n- \\\"@rx ^.*$\\\": This is a regular expression that matches any string that starts with \\\"^\\\" and ends with \\\"$\\\". The \\\".*\\\" in between matches any character zero or more times. \\n\\nFor example, this expression can be used in a web application firewall rule to match any request header name.\",\"explanation_id\":272,\"version\":49}"
  },
  {
    "id": "920230",
    "regex": "SecRule ARGS \"@rx %[0-9a-fA-F]{2}\"",
    "explanation": "{\"explanation\":\"This expression is used to detect hexadecimal characters in the ARGS (arguments) field of an HTTP request. \\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- ARGS: This is a variable that represents the arguments field of an HTTP request.\\n- @rx: This is a keyword that indicates that the following string is a regular expression.\\n- %[0-9a-fA-F]{2}: This is the regular expression that matches any two hexadecimal characters preceded by a percent sign.\\n\\nFor example, if an HTTP request contains the argument \\\"example.com/?id=%3Cscript%3E\\\", this expression would match \\\"%3C\\\", \\\"%3E\\\", \\\"%3C\\\", and \\\"%3E\\\", which are all hexadecimal characters. This can be used to detect potential attacks that use encoded characters to bypass security measures.\",\"explanation_id\":274,\"version\":15}"
  },
  {
    "id": "930130",
    "regex": "SecRule REQUEST_FILENAME \"@pmFromFile restricted-files.data\"",
    "explanation": "{\"explanation\":\"This expression is used to match any request filename that appears in the \\\"restricted-files.data\\\" file. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"REQUEST_FILENAME\\\" is a variable that represents the filename of the requested resource.\\n- \\\"@pmFromFile\\\" is an operator that matches any of the strings contained in the specified file.\\n- \\\"restricted-files.data\\\" is the name of the file that contains the restricted filenames.\\n\\nFor example, if the \\\"restricted-files.data\\\" file contains the following strings:\\n- /etc/passwd\\n- /etc/shadow\\n- /etc/hosts\\n\\nThen, any request that includes any of these filenames in the REQUEST_FILENAME variable will be matched by this expression.\",\"explanation_id\":278,\"version\":59}"
  },
  {
    "id": "950100",
    "regex": "SecRule RESPONSE_STATUS \"@rx ^5\\d{2}$\"",
    "explanation": "{\"explanation\":\"This expression is used to match any HTTP response status code that starts with the number 5 (indicating a server error). \\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `RESPONSE_STATUS`: This is a variable that represents the HTTP response status code.\\n- `@rx`: This is a regular expression operator that indicates the following pattern should be treated as a regular expression.\\n- `^5`: This matches the start of the string and ensures that the status code starts with the number 5.\\n- `\\\\d{2}`: This matches any two digits (0-9) that follow the number 5.\\n- `$`: This matches the end of the string.\\n\\nFor example, this expression would match the following response status codes: 500, 503, 599.\",\"explanation_id\":279,\"version\":99}"
  },
  {
    "id": "921130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:\\bhttp/\\d|<(?:html|meta)\\b) ",
    "explanation": "{\"explanation\":\"This expression is used to detect HTTP requests that contain a specific pattern in their headers or body. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the request that will be inspected by the rule. In this case, the rule will look for the pattern in the cookies, arguments, or XML data.\\n- @rx: This is a flag that indicates that the following pattern is a regular expression.\\n- (?:\\\\bhttp/\\\\d|<(?:html|meta)\\\\b): This is the regular expression that will be used to match the pattern. It consists of two alternatives: either the string \\\"http/\\\" followed by a digit, or a tag that starts with either \\\"html\\\" or \\\"meta\\\".\\n\\nFor example, this expression could be used to block requests that contain a specific version of the HTTP protocol or that include certain HTML tags in their body.\",\"explanation_id\":283,\"version\":88}"
  },
  {
    "id": "921140",
    "regex": "SecRule REQUEST_HEADERS_NAMES|REQUEST_HEADERS \"@rx [\\n\\r]\"",
    "explanation": "{\"explanation\":\"This expression is used to detect if a HTTP request contains any newline or carriage return characters in its headers. \\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_HEADERS_NAMES|REQUEST_HEADERS: This specifies that the rule should be applied to either the names or values of the request headers.\\n- @rx: This is a regular expression operator that indicates that the following pattern should be treated as a regular expression.\\n- [\\\\n\\\\r]: This is the regular expression pattern that matches any newline or carriage return characters.\\n\\nFor example, if a HTTP request contains a header like \\\"User-Agent: Mozilla/5.0\\\\r\\\\n\\\", this expression would match and trigger the rule.\",\"explanation_id\":284,\"version\":100}"
  },
  {
    "id": "921170",
    "regex": "SecRule ARGS_NAMES \"@rx .\"",
    "explanation": "{\"explanation\":\"This expression is used to match any input that contains at least one character.\\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `ARGS_NAMES`: This is a variable that contains the names of all arguments passed in the request.\\n- `@rx`: This is a regular expression operator that matches any character.\\n- `.`: This is a regular expression that matches any character.\\n\\nFor example, if the input is \\\"hello\\\", this expression will match it because it contains at least one character. Similarly, if the input is \\\"123\\\", this expression will also match it because it contains at least one character.\",\"explanation_id\":287,\"version\":90}"
  },
  {
    "id": "942270",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)union.*?select.*?from ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests.\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used by the ModSecurity module to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the web request where the rule will be applied.\\n- @rx: This is a flag that indicates that the rule is a regular expression.\\n- (?i)union.*?select.*?from: This is the regular expression pattern that matches SQL injection attempts.\\n\\nFor example, if a web request contains a parameter named \\\"id\\\" with the value \\\"1 union select * from users\\\", this expression will trigger a rule violation and block the request.\",\"explanation_id\":294,\"version\":85}"
  },
  {
    "id": "942430",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* @rx ((?:[~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>][^~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>]*?){12}) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks in web application security by matching against input arguments. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- ARGS_NAMES|ARGS|XML/*: This specifies the input arguments to be checked. It can be either the argument names, values, or XML data.\\n- @rx: This is a regular expression operator that matches the input against the provided regex pattern.\\n- ((?:[~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>][^~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>]*?){12}): This is the actual regular expression pattern that matches against the input. It consists of a non-capturing group that matches any special character followed by any non-special character, repeated 12 times.\\n\\nFor example, if an input argument contains 12 consecutive special characters followed by non-special characters, this expression would trigger a match and potentially block the request.\",\"explanation_id\":305,\"version\":6}"
  },
  {
    "id": "942450",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:\\b0x[a-f\\d]{3}) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential cross-site scripting (XSS) attacks by searching for hexadecimal values in various parts of the HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity web application firewall to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the HTTP request that the rule will search for the regex pattern. \\n- @rx: This is a ModSecurity operator that specifies a regular expression pattern.\\n- (?i:\\\\b0x[a-f\\\\d]{3}): This is the regular expression pattern that will be searched for. It looks for a string that starts with \\\"0x\\\" followed by three hexadecimal digits. The \\\"i\\\" flag makes the search case-insensitive.\\n\\nFor example, if an attacker tries to inject a script containing a hexadecimal value like \\\"0x3e\\\" into a cookie or argument field, this rule will trigger and block the request.\",\"explanation_id\":307,\"version\":82}"
  },
  {
    "id": "942420",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES @rx ((?:[~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>][^~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>]*?){8}) ",
    "explanation": "{\"explanation\":\"This expression is used to match a cookie value that contains at least 8 special characters.\\nThe regex expression consists of four parts: \\n1. SecRule: A directive used in ModSecurity to define a rule.\\n2. REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES: A set of conditions that define where the rule should be applied.\\n3. @rx: A flag that indicates the following pattern is a regular expression.\\n4. ((?:[~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>][^~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>]*?){8}): The regular expression pattern that matches a cookie value containing at least 8 special characters.\\n\\nFor example, this expression can be used to block requests that contain cookies with potentially malicious values.\",\"explanation_id\":309,\"version\":98}"
  },
  {
    "id": "942460",
    "regex": "SecRule ARGS \"@rx \\W{4}\"",
    "explanation": "{\"explanation\":\"This expression is used to detect if any argument passed in the request contains a sequence of four non-word characters.\\nThe regex expression consists of:\\n- SecRule: a directive used in ModSecurity to define a rule\\n- ARGS: a variable representing the arguments passed in the request\\n- @rx: a flag indicating that the following pattern is a regular expression\\n- \\\\W{4}: a pattern matching any four non-word characters (i.e., characters that are not letters, digits, or underscores)\\n\\nFor example, this expression would match the following arguments:\\n- \\\"%%%%\\\"\\n- \\\"!@#$\\\"\\n- \\\"1234\\\" (since digits are considered non-word characters)\",\"explanation_id\":312,\"version\":49}"
  },
  {
    "id": "942421",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES @rx ((?:[~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>][^~!@#\\$%\\^&\\*\\(\\)\\-\\+=\\{\\}\\[\\]\\|:;\\´’‘`<>]*?){3}) ",
    "explanation": "{\"explanation\":\"This expression is used to match a specific pattern in the names of cookies in a web request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming web requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES: This specifies the location of the cookies in the request that will be checked. It includes all cookies except for those with names containing \\\"__utm\\\" or \\\"/_pk_ref/\\\". \\n- @rx: This is a flag that specifies that the following pattern is a regular expression.\\n- ((?:[~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>][^~!@#\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\+=\\\\{\\\\}\\\\[\\\\]\\\\|:;\\\\\\u00b4\\u2019\\u2018`<>]*?){3}): This is the regular expression pattern that will be matched against the cookie names. It consists of three groups of characters, each starting with a special character and followed by any number of non-special characters. \\n\\nFor example, this expression could be used to detect suspicious cookie names that contain unusual characters or patterns, which could indicate an attempt to exploit a vulnerability in the web application.\",\"explanation_id\":313,\"version\":42}"
  },
  {
    "id": "933120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmFromFile php-config-directives.data ",
    "explanation": "{\"explanation\":\"This expression is used to match against various parts of an HTTP request and check if any of them contain values from a list of PHP configuration directives. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule for inspecting HTTP requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the different parts of the HTTP request that the rule will inspect. Specifically, it will look at the values of cookies, cookie names, argument names, arguments, and any XML elements in the request.\\n- @pmFromFile: This is a ModSecurity operator that loads a list of values from a file and checks if any of them are present in the inspected request.\\n\\nFor example, if the file \\\"php-config-directives.data\\\" contains a list of PHP configuration directives like \\\"allow_url_fopen\\\" and \\\"register_globals\\\", this expression will check if any of those directives are present in the cookies, arguments, or XML elements of the HTTP request. If a match is found, the ModSecurity module can take action, such as blocking the request or logging it for further analysis.\",\"explanation_id\":317,\"version\":58}"
  },
  {
    "id": "933150",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @pmFromFile php-function-names-933150.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks on a web application by searching for specific patterns in the HTTP request. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is a directive used by the ModSecurity module to define a rule for inspecting HTTP requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will inspect for potential attacks. They include cookies, file names, and arguments passed in the request.\\n- @pmFromFile: This is a keyword that tells ModSecurity to load a list of strings from a file and use them to match against the variables specified in the rule.\\n- php-function-names-933150.data: This is the name of the file containing the list of strings to match against.\\n\\nFor example, if the HTTP request contains a cookie or argument that matches one of the strings in the file, the rule will trigger and take action to block the request or log the event. This helps to prevent attacks such as SQL injection or cross-site scripting.\",\"explanation_id\":320,\"version\":10}"
  },
  {
    "id": "933170",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS|ARGS_NAMES|ARGS|XML:/* @rx [oOcC]:\\d+:\\.+?\\:\\d+:{.*} ",
    "explanation": "{\"explanation\":\"This expression is used to match a specific pattern in various parts of an HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS|ARGS_NAMES|ARGS|XML:/*: These are the different parts of the HTTP request that the rule will be applied to. It includes cookies, headers, and various parameters.\\n- @rx: This is a flag that specifies that the rule will use a regular expression to match the pattern.\\n- [oOcC]: This is a character class that matches any of the letters o, O, c, or C.\\n- \\\\d+: This matches one or more digits.\\n- \\\\.+: This matches one or more periods.\\n- \\\\d+: This matches one or more digits.\\n- {.*}: This matches any characters inside curly braces.\\n\\nFor example, this expression could be used to detect a specific pattern in a cookie or parameter value, such as \\\"o:123:...:456:{some data}\\\". The rule would trigger if this pattern is found in any of the specified parts of the request.\",\"explanation_id\":321,\"version\":66}"
  },
  {
    "id": "933151",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @pmFromFile php-function-names-933151.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks on a web application by searching for specific patterns in the HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule for the web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. They include the request cookies, cookie names, request filename, argument names, arguments, and XML data.\\n- @pmFromFile: This is a function that loads a list of values from a file and uses them to match against the variables specified in the rule.\\n- php-function-names-933151.data: This is the file containing a list of PHP function names that will be used to match against the variables.\\n\\nFor example, this expression can be used to detect if an attacker is trying to execute a PHP function by searching for the function name in the HTTP request. If a match is found, the ModSecurity module can take action to block the request or alert the system administrator.\",\"explanation_id\":322,\"version\":69}"
  },
  {
    "id": "933111",
    "regex": "SecRule FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X.Filename|REQUEST_HEADERS:X-File-Name @rx .*\\.(?:php\\d*|phtml)\\..*$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious files being uploaded or requested on a web server. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for the web application firewall. \\n- FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X.Filename|REQUEST_HEADERS:X-File-Name: These are the locations where the rule will be applied. It will check the file name in the request headers or in the uploaded files. \\n- @rx: This is a regular expression operator that specifies the pattern to match. \\n- .*\\\\.(?:php\\\\d*|phtml)\\\\..*$: This is the regular expression pattern that matches any file name that ends with \\\".php\\\" followed by zero or more digits or \\\".phtml\\\" and has any characters before and after it. \\n\\nFor example, if a user tries to upload a file named \\\"malicious.php5.jpg\\\", this expression will detect it and block the request.\",\"explanation_id\":324,\"version\":13}"
  },
  {
    "id": "932160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmFromFile unix-shell.data ",
    "explanation": "{\"explanation\":\"This expression is used to match and block potential Unix shell commands in HTTP requests.\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used by the ModSecurity module to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it includes request cookies, cookie names, argument names, arguments, and XML data.\\n- @pmFromFile unix-shell.data: This is a reference to a file containing a list of Unix shell commands that the rule will match against.\\n\\nFor example, if an HTTP request contains a cookie or argument with a Unix shell command, the rule will block the request and prevent it from being processed.\",\"explanation_id\":327,\"version\":42}"
  },
  {
    "id": "953100",
    "regex": "SecRule RESPONSE_BODY \"@pmFromFile php-errors.data\"",
    "explanation": "{\"explanation\":\"This expression is used to identify any occurrences of specific PHP errors in the response body of a web application. \\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- RESPONSE_BODY: This is a variable that represents the response body of the web application.\\n- @pmFromFile: This is an operator that matches any of the strings contained in a file.\\n- php-errors.data: This is the name of the file that contains the strings to be matched.\\n\\nFor example, if the file php-errors.data contains the string \\\"Undefined variable\\\", this expression will match any response body that contains that string.\",\"explanation_id\":344,\"version\":89}"
  },
  {
    "id": "920190",
    "regex": "SecRule REQUEST_HEADERSRange|REQUEST_HEADERS:Request-Range @rx (\\d+)-(\\d+) ",
    "explanation": "{\"explanation\":\"This expression is used to match a range of values in the HTTP request headers. \\n\\nThe regex expression consists of several parts: \\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule. \\n- \\\"REQUEST_HEADERSRange\\\" and \\\"REQUEST_HEADERS:Request-Range\\\" are two different variables that contain the range values in the HTTP request headers. \\n- \\\"@rx\\\" is a regular expression operator that matches the pattern that follows. \\n- \\\"(\\\\d+)-(\\\\d+)\\\" is the regular expression pattern that matches a range of digits. \\n\\nFor example, if the HTTP request header contains \\\"Range: bytes=100-200\\\", this expression will match \\\"100-200\\\".\",\"explanation_id\":346,\"version\":83}"
  },
  {
    "id": "920240",
    "regex": "SecRule REQUEST_HEADERSContent-Type @rx ^(?i)application/x-www-form-urlencoded ",
    "explanation": "{\"explanation\":\"This expression is used to match the content type of a request header in a web application firewall rule. \\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- `REQUEST_HEADERS`: This is a variable that represents the request headers of an HTTP request.\\n- `Content-Type`: This is the name of the specific header being matched.\\n- `@rx`: This is a flag that indicates the following pattern is a regular expression.\\n- `^`: This is an anchor that matches the start of the string.\\n- `(?i)`: This is a flag that indicates the following pattern is case-insensitive.\\n- `application/x-www-form-urlencoded`: This is the specific content type being matched.\\n\\nFor example, this expression would match the content type of a request header that contains the value \\\"application/x-www-form-urlencoded\\\", regardless of case.\",\"explanation_id\":349,\"version\":25}"
  },
  {
    "id": "920311",
    "regex": "SecRule REQUEST_HEADERSAccept @rx ^$ ",
    "explanation": "{\"explanation\":\"This expression is used to match empty values in the \\\"Accept\\\" header of an HTTP request. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"REQUEST_HEADERS\\\" is a variable that refers to the headers of an HTTP request.\\n- \\\"Accept\\\" is the name of the header being checked.\\n- \\\"@rx\\\" is a flag that indicates the following pattern is a regular expression.\\n- \\\"^$\\\" is the regular expression pattern that matches an empty string.\\n\\nFor example, if an HTTP request has an \\\"Accept\\\" header with no value, this expression would match and trigger the defined rule.\",\"explanation_id\":352,\"version\":95}"
  },
  {
    "id": "920340",
    "regex": "SecRule REQUEST_HEADERSContent-Length !@rx ^0$ ",
    "explanation": "{\"explanation\":\"This expression is used to match HTTP requests that have a non-zero content length. \\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `REQUEST_HEADERS`: This is a variable that contains the HTTP request headers.\\n- `Content-Length`: This is the name of the header that specifies the length of the request body.\\n- `!@rx`: This is a negated regular expression operator that matches any value that does not match the provided regex pattern.\\n- `^0$`: This is a regular expression pattern that matches only the string \\\"0\\\".\\n\\nFor example, this expression can be used to block requests with a non-zero content length, which can be a sign of a potential attack such as a buffer overflow or a denial of service attack.\",\"explanation_id\":355,\"version\":13}"
  },
  {
    "id": "920420",
    "regex": "SecRule REQUEST_HEADERSContent-Type @rx ^[^;\\s]+ ",
    "explanation": "{\"explanation\":\"This expression is used to match the content type of an HTTP request header in a web application firewall rule.\\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_HEADERS: This is a variable that represents the HTTP request headers.\\n- Content-Type: This is the name of the specific header being matched.\\n- @rx: This is a flag that indicates the following pattern is a regular expression.\\n- ^[^;\\\\s]+: This is the regular expression pattern that matches any string that starts with one or more characters that are not semicolons or whitespace.\\n\\nFor example, if the Content-Type header in the HTTP request is \\\"application/json\\\", the regex pattern will match it. However, if the header is \\\"application/json; charset=utf-8\\\", the pattern will not match because it contains a semicolon.\",\"explanation_id\":357,\"version\":45}"
  },
  {
    "id": "930120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmFromFile lfi-os-files.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential Local File Inclusion (LFI) attacks on a web application. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule for the web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that the rule will be applied to. In this case, it includes request cookies, cookie names, argument names, arguments, and XML data.\\n- @pmFromFile: This is a function that loads a list of strings from a file and performs a partial match against them. \\n- lfi-os-files.data: This is the file containing a list of strings that will be used for the partial match.\\n\\nFor example, if the file lfi-os-files.data contains the string \\\"../etc/passwd\\\", the rule will trigger if any of the variables listed above contain that string. This is a common technique used by attackers to access sensitive files on the server by exploiting vulnerabilities in the web application.\",\"explanation_id\":362,\"version\":89}"
  },
  {
    "id": "933140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)php://(?:std(?:in|out|err)|(?:in|out)put|fd|memory|temp|filter) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks that involve the use of PHP streams in HTTP requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that will be checked for the presence of the regex pattern.\\n- @rx: This is a flag that indicates that the following pattern is a regular expression.\\n- (?i): This is a flag that indicates that the pattern should be case-insensitive.\\n- php://(?:std(?:in|out|err)|(?:in|out)put|fd|memory|temp|filter): This is the actual regular expression pattern that will be matched against the variables. It looks for the use of PHP streams, such as stdin, stdout, stderr, input, output, fd, memory, temp, or filter.\\n\\nFor example, if an attacker tries to send a request that includes the string \\\"php://input\\\" in a cookie or argument, this rule will trigger and block the request.\",\"explanation_id\":367,\"version\":82}"
  },
  {
    "id": "913120",
    "regex": "SecRule REQUEST_FILENAME|ARGS \"@pmFromFile scanners-urls.data\"",
    "explanation": "{\"explanation\":\"This expression is used to match any input that contains any of the URLs listed in the file \\\"scanners-urls.data\\\". It is commonly used in web application firewalls to block malicious requests from known scanners or attackers.\\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\": This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- \\\"REQUEST_FILENAME|ARGS\\\": This is a logical OR operator used to match either the request filename or any of the request arguments.\\n- \\\"@pmFromFile\\\": This is a ModSecurity operator used to match any input that contains any of the strings listed in a file.\\n- \\\"scanners-urls.data\\\": This is the name of the file that contains the list of URLs to match.\\n\\nFor example, if the file \\\"scanners-urls.data\\\" contains the following URLs:\\n- /admin.php\\n- /wp-admin/\\n- /phpmyadmin/\\n\\nThen the expression will match any input that contains any of these URLs, such as:\\n- http://example.com/admin.php\\n- http://example.com/index.php?param=/wp-admin/\\n- http://example.com/phpmyadmin/index.php\\n\\nOverall, this expression is used to block requests from known malicious scanners or attackers by matching any input that contains any of the URLs listed in a file.\",\"explanation_id\":368,\"version\":4}"
  },
  {
    "id": "920220",
    "regex": "SecRule REQUEST_URI \"@rx \\x25\"",
    "explanation": "{\"explanation\":\"This expression is used to detect if a URL contains the percent symbol (%), which is often used in URL encoding. \\n\\nThe regex expression consists of one part: \\n- SecRule: This is a directive used in ModSecurity to define a rule. \\n- REQUEST_URI: This is a variable that contains the requested URI. \\n- @rx: This is a regular expression operator that indicates the following pattern is a regular expression. \\n- \\\\x25: This is the regular expression pattern that matches the percent symbol (%). \\n\\nFor example, if a user requests the URL \\\"https://example.com/path/to/file%20name.html\\\", this expression would detect the presence of the percent symbol (%).\",\"explanation_id\":369,\"version\":90}"
  },
  {
    "id": "920290",
    "regex": "SecRule REQUEST_HEADERSHost @rx ^$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect empty host headers in HTTP requests.\\nThe regex expression consists of:\\n- SecRule: a directive used in ModSecurity to define a rule\\n- REQUEST_HEADERS: a variable representing the headers of the HTTP request\\n- Host: the specific header being targeted\\n- @rx: a flag indicating that the following pattern is a regular expression\\n- ^$: a regular expression pattern matching an empty string\\n\\nFor example, if a client sends an HTTP request without a host header, this expression would trigger and potentially block the request.\",\"explanation_id\":370,\"version\":48}"
  },
  {
    "id": "920200",
    "regex": "SecRule REQUEST_HEADERSRange|REQUEST_HEADERS:Request-Range @rx ^bytes=(?:(?:\\d+)?-(?:\\d+)?\\s*?\\s*){6} ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious activity in HTTP requests related to the \\\"Range\\\" header. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- \\\"REQUEST_HEADERSRange\\\" and \\\"REQUEST_HEADERS:Request-Range\\\" are variables that represent the \\\"Range\\\" header in different formats.\\n- \\\"@rx\\\" is a keyword that indicates the following pattern should be interpreted as a regular expression.\\n- \\\"^bytes=\\\" matches the literal string \\\"bytes=\\\" at the beginning of the \\\"Range\\\" header value.\\n- \\\"(?:(?:\\\\d+)?-(?:\\\\d+)?\\\\s*?\\\\s*)\\\" is a non-capturing group that matches a range specification in the format \\\"start-end\\\", where \\\"start\\\" and \\\"end\\\" are optional digits separated by a hyphen. The \\\"\\\\s*?\\\\s*\\\" part matches any whitespace characters that may appear before or after the range specification.\\n- \\\"{6}\\\" specifies that the previous group should be matched exactly six times, indicating that the \\\"Range\\\" header contains six range specifications.\\n\\nFor example, this expression would match the following \\\"Range\\\" header value:\\nbytes=0-499,1000-1499,2000-2499,3000-3499,4000-4499,5000-5499\",\"explanation_id\":371,\"version\":27}"
  },
  {
    "id": "920121",
    "regex": "SecRule FILES_NAMES|FILES \"@rx ['\\\";=]\"",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious input in file names or file content. \\n\\nThe regex expression consists of two main parts: \\n\\n1. SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests. \\n\\n2. FILES_NAMES|FILES \\\"@rx ['\\\\\\\";=]\\\": This is the actual regular expression that will be used to match against the input. It consists of two parts: \\n\\n- FILES_NAMES|FILES: This specifies that the rule will be applied to either the file names or the file content. \\n- @rx ['\\\\\\\";=]: This is the regular expression itself, which matches any character that is either a single quote, double quote, semicolon, or equals sign. These characters are often used in injection attacks to manipulate input and execute malicious code. \\n\\nFor example, if a file name or file content contains the string \\\"'; DROP TABLE users;\\\", this regular expression would match it and trigger the ModSecurity rule to block the request.\",\"explanation_id\":372,\"version\":10}"
  },
  {
    "id": "930100",
    "regex": "SecRule REQUEST_URI_RAW|ARGS|REQUEST_HEADERS|!REQUEST_HEADERSReferer|FILES|XML:/* @rx (?i)(?:[/\\x5c]|%(?:2(?:f|5(?:2f|5c|c(?:1%259c|0%25af))|%46)|5c|c(?:0%(?:[2aq]f|5c|9v)|1%(?:[19p]c|8s|af))|(?:bg%q|(?:e|f(?:8%8)?0%8)0%80%a)f|u(?:221[5-6]|EFC8|F025|002f)|%3(?:2(?:%(?:%6|4)6|F)|5%%63)|1u)|0x(?:2f|5c))(?:\\.(?:%0[0-1]|\\?)?|\\?\\.?|%(?:2(?:(?:5(?:2|c0%25a))?e|%45)|c0(?:\\.|%[25-6ae-f]e)|u(?:(?:ff0|002)e|2024)|%32(?:%(?:%6|4)5|E)|(?:e|f(?:(?:8|c%80)%8)?0%8)0%80%ae)|0x2e){23}(?:[/\\x5c]|%(?:2(?:f|5(?:2f|5c|c(?:1%259c|0%25af))|%46)|5c|c(?:0%(?:[2aq]f|5c|9v)|1%(?:[19p]c|8s|af))|(?:bg%q|(?:e|f(?:8%8)?0%8)0%80%a)f|u(?:221[5-6]|EFC8|F025|002f)|%3(?:2(?:%(?:%6|4)6|F)|5%%63)|1u)|0x(?:2f|5c)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect path traversal attacks in web requests.\\nThe regex expression consists of several parts:\\n- (?i): case-insensitive matching\\n- (?:[/\\\\x5c]|%(?:2(?:f|5(?:2f|5c|c(?:1%259c|0%25af))|%46)|5c|c(?:0%(?:[2aq]f|5c|9v)|1%(?:[19p]c|8s|af))|(?:bg%q|(?:e|f(?:8%8)?0%8)0%80%a)f|u(?:221[5-6]|EFC8|F025|002f)|%3(?:2(?:%(?:%6|4)6|F)|5%%63)|1u)|0x(?:2f|5c)): match either a forward slash, a backslash, or a URL-encoded character that represents a forward slash or backslash\\n- (?:\\\\.(?:%0[0-1]|\\\\?)?|\\\\?\\\\.?|%(?:2(?:(?:5(?:2|c0%25a))?e|%45)|c0(?:\\\\.|%[25-6ae-f]e)|u(?:(?:ff0|002)e|2024)|%32(?:%(?:%6|4)5|E)|(?:e|f(?:(?:8|c%80)%8)?0%8)0%80%ae)|0x2e): match a dot followed by either a URL-encoded character, a question mark followed by a dot, a URL-encoded character followed by a dot, or a URL-encoded character that represents a dot\\n- {23}: match the previous group exactly 23 times\\n- (?:[/\\\\x5c]|%(?:2(?:f|5(?:2f|5c|c(?:1%259c|0%25af))|%46)|5c|c(?:0%(?:[2aq]f|5c|9v)|1%(?:[19p]c|8s|af))|(?:bg%q|(?:e|f(?:8%8)?0%8)0%80%a)f|u(?:221[5-6]|EFC8|F025|002f)|%3(?:2(?:%(?:%6|4)6|F)|5%%63)|1u)|0x(?:2f|5\",\"explanation_id\":373,\"version\":33}"
  },
  {
    "id": "943100",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:\\.cookie\\b.*?;\\W*?(?:expires|domain)\\W*?=|\\bhttp-equiv\\W+set-cookie\\b) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential cookie tampering or injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule for web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a set of variables that the rule will be applied to\\n- @rx: a flag indicating that the rule is a regular expression\\n- (?i:\\\\.cookie\\\\b.*?;\\\\W*?(?:expires|domain)\\\\W*?=|\\\\bhttp-equiv\\\\W+set-cookie\\\\b): the regular expression pattern that matches the potential cookie tampering or injection attacks\\n\\nFor example, the regular expression pattern matches strings that contain \\\".cookie\\\" followed by any characters, a semicolon, and then either \\\"expires\\\" or \\\"domain\\\" with optional non-word characters in between. It also matches strings that contain \\\"http-equiv\\\" followed by non-word characters, \\\"set-cookie\\\", and then any characters.\",\"explanation_id\":374,\"version\":67}"
  },
  {
    "id": "000000",
    "regex": "000000",
    "explanation": "000000"
  },
  {
    "id": "931110",
    "regex": "SecRule QUERY_STRING|REQUEST_BODY @rx (?i)(?binclude\\s*\\([^)]*|mosConfig_absolute_path|_CONF\\[path\\]|_SERVER\\[DOCUMENT_ROOT\\]|GALLERY_BASEDIR|path\\[docroot\\]|appserv_root|config\\[root_dir\\])=(?:file|ftps?|https?):// ",
    "explanation": "{\"error\":\"SecRule QUERY_STRING|REQUEST_BODY @rx (?i)(?binclude\\\\s*\\\\([^)]*|mosConfig_absolute_path|_CONF\\\\[path\\\\]|_SERVER\\\\[DOCUMENT_ROOT\\\\]|GALLERY_BASEDIR|path\\\\[docroot\\\\]|appserv_root|config\\\\[root_dir\\\\])=(?:file|ftps?|https?)://  is not a valid regex\"}"
  },
  {
    "id": "931120",
    "regex": "SecRule ARGS @rx ^(?ifile|ftps?|https?).*?\\?+$ ",
    "explanation": "{\"error\":\"SecRule ARGS @rx ^(?ifile|ftps?|https?).*?\\\\?+$  is not a valid regex\"}"
  },
  {
    "id": "931130",
    "regex": "SecRule ARGS @rx (?i)(?(?:url|jar):)?(?:a(?:cap|f[ps]|ttachment)|b(?:eshare|itcoin|lob)|c(?:a(?:llto|p)|id|vs|ompress.(?:zlib|bzip2))|d(?:a(?:v|ta)|ict|n(?:s|tp))|e(?:d2k|xpect)|f(?:(?:ee)?d|i(?:le|nger|sh)|tps?)|g(?:it|o(?:pher)?|lob)|h(?:323|ttps?)|i(?:ax|cap|(?:ma|p)ps?|rc[6s]?)|ja(?:bbe)?r|l(?:dap[is]?|ocal_file)|m(?:a(?:ilto|ven)|ms|umble)|n(?:e(?:tdoc|ws)|fs|ntps?)|ogg|p(?:aparazzi|h(?:ar|p)|op(?:2|3s?)|r(?:es|oxy)|syc)|r(?:mi|sync|tm(?:f?p)?|ar)|s(?:3|ftp|ips?|m(?:[bs]|tps?)|n(?:ews|mp)|sh(?:2(?:.(?:s(?:hell|(?:ft|c)p)|exec|tunnel))?)?|vn(?:\\+ssh)?)|t(?:e(?:amspeak|lnet)|ftp|urns?)|u(?:dp|nreal|t2004)|v(?:entrilo|iew-source|nc)|w(?:ebcal|ss?)|x(?:mpp|ri)|zip)://(?:[^@]+@)?([^/]*) ",
    "explanation": "{\"error\":\"SecRule ARGS @rx (?i)(?(?:url|jar):)?(?:a(?:cap|f[ps]|ttachment)|b(?:eshare|itcoin|lob)|c(?:a(?:llto|p)|id|vs|ompress.(?:zlib|bzip2))|d(?:a(?:v|ta)|ict|n(?:s|tp))|e(?:d2k|xpect)|f(?:(?:ee)?d|i(?:le|nger|sh)|tps?)|g(?:it|o(?:pher)?|lob)|h(?:323|ttps?)|i(?:ax|cap|(?:ma|p)ps?|rc[6s]?)|ja(?:bbe)?r|l(?:dap[is]?|ocal_file)|m(?:a(?:ilto|ven)|ms|umble)|n(?:e(?:tdoc|ws)|fs|ntps?)|ogg|p(?:aparazzi|h(?:ar|p)|op(?:2|3s?)|r(?:es|oxy)|syc)|r(?:mi|sync|tm(?:f?p)?|ar)|s(?:3|ftp|ips?|m(?:[bs]|tps?)|n(?:ews|mp)|sh(?:2(?:.(?:s(?:hell|(?:ft|c)p)|exec|tunnel))?)?|vn(?:\\\\+ssh)?)|t(?:e(?:amspeak|lnet)|ftp|urns?)|u(?:dp|nreal|t2004)|v(?:entrilo|iew-source|nc)|w(?:ebcal|ss?)|x(?:mpp|ri)|zip)://(?:[^@]+@)?([^/]*)  is not a valid regex\"}"
  },
  {
    "id": "954110",
    "regex": "SecRule RESPONSE_BODY @rx (?Microsoft OLE DB Provider for SQL Server(?:</font>.{120}?error 800(?:04005|40e31).{140}?Timeout expired| \\(0x80040e31\\)<br>Timeout expired<br>)|<h1>internal server error</h1>.*?<h2>part of the server has crashed or it has a configuration error\\.</h2>|cannot connect to the server: timed out) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?Microsoft OLE DB Provider for SQL Server(?:</font>.{120}?error 800(?:04005|40e31).{140}?Timeout expired| \\\\(0x80040e31\\\\)<br>Timeout expired<br>)|<h1>internal server error</h1>.*?<h2>part of the server has crashed or it has a configuration error\\\\.</h2>|cannot connect to the server: timed out)  is not a valid regex\"}"
  },
  {
    "id": "921160",
    "regex": "SecRule ARGS_GET_NAMES|ARGS_GET @rx [\\n\\r]+(?s|location|refresh|(?:set-)?cookie|(?:x-)?(?:forwarded-(?:for|host|server)|host|via|remote-ip|remote-addr|originating-IP))\\s*: ",
    "explanation": "{\"error\":\"SecRule ARGS_GET_NAMES|ARGS_GET @rx [\\\\n\\\\r]+(?s|location|refresh|(?:set-)?cookie|(?:x-)?(?:forwarded-(?:for|host|server)|host|via|remote-ip|remote-addr|originating-IP))\\\\s*:  is not a valid regex\"}"
  },
  {
    "id": "942120",
    "regex": "SecRule ARGS_NAMES|ARGS|REQUEST_FILENAME|XML/* @rx (?i)!=|&&|\\|\\||>[=->]|<(?:<|=>?|>(?:[\\s\\v]+binary)?)|\\b(?:(?:xor|r(?:egexp|like)|i(?:snull|like)|notnull)\\b|collate(?:[^0-9A-Z_a-z]*?(?:U&)?[\\`]|[^0-9A-Z_a-z]+(?:(?:binary|nocase|rtrim)\\b|[0-9A-Z_a-z]*?_))|(?:likel(?:ihood|y)|unlikely)[\\s\\v]*\\()|r(?:egexp|like)[\\s\\v]+binary|not[\\s\\v]+between[\\s\\v]+(?:0[\\s\\v]+and|(?:[^]*|\\[^\\]*\\)[\\s\\v]+and[\\s\\v]+(?:[^]*|\\[^\\]*\\))|is[\\s\\v]+null|like[\\s\\v]+(?:null|[0-9A-Z_a-z]+[\\s\\v]+escape\\b)|(?:^|[^0-9A-Z_a-z])in[\\s\\v\\+]*\\([\\s\\v\\0-9]+[^\\(-\\)]*\\)|[!<->]{12}[\\s\\v]*all\\b ",
    "explanation": "{\"error\":\"SecRule ARGS_NAMES|ARGS|REQUEST_FILENAME|XML/* @rx (?i)!=|&&|\\\\|\\\\||>[=->]|<(?:<|=>?|>(?:[\\\\s\\\\v]+binary)?)|\\\\b(?:(?:xor|r(?:egexp|like)|i(?:snull|like)|notnull)\\\\b|collate(?:[^0-9A-Z_a-z]*?(?:U&)?[\\\\`]|[^0-9A-Z_a-z]+(?:(?:binary|nocase|rtrim)\\\\b|[0-9A-Z_a-z]*?_))|(?:likel(?:ihood|y)|unlikely)[\\\\s\\\\v]*\\\\()|r(?:egexp|like)[\\\\s\\\\v]+binary|not[\\\\s\\\\v]+between[\\\\s\\\\v]+(?:0[\\\\s\\\\v]+and|(?:[^]*|\\\\[^\\\\]*\\\\)[\\\\s\\\\v]+and[\\\\s\\\\v]+(?:[^]*|\\\\[^\\\\]*\\\\))|is[\\\\s\\\\v]+null|like[\\\\s\\\\v]+(?:null|[0-9A-Z_a-z]+[\\\\s\\\\v]+escape\\\\b)|(?:^|[^0-9A-Z_a-z])in[\\\\s\\\\v\\\\+]*\\\\([\\\\s\\\\v\\\\0-9]+[^\\\\(-\\\\)]*\\\\)|[!<->]{12}[\\\\s\\\\v]*all\\\\b  is not a valid regex\"}"
  },
  {
    "id": "942200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* @rx (?i).*?[\\\\)0-9`-f][\\`](?:[\\`].*?[\\`]|(?:\\r?\\n)?\\z|[^\\`]+)|[^0-9A-Z_a-z]select.+[^0-9A-Z_a-z]*?from|(?:alter|(?:(?:cre|trunc|upd)at|renam)e|d(?:e(?:lete|sc)|rop)|(?:inser|selec)t|load)[\\s\\v]*?\\([\\s\\v]*?space[\\s\\v]*?\\( ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* @rx (?i).*?[\\\\\\\\)0-9`-f][\\\\`](?:[\\\\`].*?[\\\\`]|(?:\\\\r?\\\\n)?\\\\z|[^\\\\`]+)|[^0-9A-Z_a-z]select.+[^0-9A-Z_a-z]*?from|(?:alter|(?:(?:cre|trunc|upd)at|renam)e|d(?:e(?:lete|sc)|rop)|(?:inser|selec)t|load)[\\\\s\\\\v]*?\\\\([\\\\s\\\\v]*?space[\\\\s\\\\v]*?\\\\(  is not a valid regex\"}"
  },
  {
    "id": "942370",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:Referer|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/* @rx (?i)[\\`](?:[\\s\\v]*?(?:(?:\\*.+(?:x?or|div|like|between|(?:an|i)d)[^0-9A-Z_a-z]*?[\\`]|(?:x?or|div|like|between|and)[\\s\\v][^0-9]+[\\-0-9A-Z_a-z]+.*?)[0-9]|[^\\s\\v0-9\\?A-Z_a-z]+[\\s\\v]*?[^\\s\\v0-9A-Z_a-z]+[\\s\\v]*?[\\`]|[^\\s\\v0-9A-Z_a-z]+[\\s\\v]*?[^A-Z_a-z].*?(?:#|--))|.*?\\*[\\s\\v]*?[0-9])|\\^[\\`]|[%\\(-\\+\\-<>][\\-0-9A-Z_a-z]+[^\\s\\v0-9A-Z_a-z]+[\\`][^] ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:Referer|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/* @rx (?i)[\\\\`](?:[\\\\s\\\\v]*?(?:(?:\\\\*.+(?:x?or|div|like|between|(?:an|i)d)[^0-9A-Z_a-z]*?[\\\\`]|(?:x?or|div|like|between|and)[\\\\s\\\\v][^0-9]+[\\\\-0-9A-Z_a-z]+.*?)[0-9]|[^\\\\s\\\\v0-9\\\\?A-Z_a-z]+[\\\\s\\\\v]*?[^\\\\s\\\\v0-9A-Z_a-z]+[\\\\s\\\\v]*?[\\\\`]|[^\\\\s\\\\v0-9A-Z_a-z]+[\\\\s\\\\v]*?[^A-Z_a-z].*?(?:#|--))|.*?\\\\*[\\\\s\\\\v]*?[0-9])|\\\\^[\\\\`]|[%\\\\(-\\\\+\\\\-<>][\\\\-0-9A-Z_a-z]+[^\\\\s\\\\v0-9A-Z_a-z]+[\\\\`][^]  is not a valid regex\"}"
  },
  {
    "id": "942390",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:or\\b(?:[\\s\\v]?(?:[0-9]{110}|[\\][^=]{110}[\\])[\\s\\v]?[<->]+|[\\s\\v]+(?:[0-9]{110}|[^=]{110})(?:[\\s\\v]*?[<->])?)|xor\\b[\\s\\v]+(?:[0-9]{110}|[^=]{110})(?:[\\s\\v]*?[<->])?)|[\\s\\v]+x?or[\\s\\v]+.{120}[!\\+\\-<->] ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\\\b(?:or\\\\b(?:[\\\\s\\\\v]?(?:[0-9]{110}|[\\\\][^=]{110}[\\\\])[\\\\s\\\\v]?[<->]+|[\\\\s\\\\v]+(?:[0-9]{110}|[^=]{110})(?:[\\\\s\\\\v]*?[<->])?)|xor\\\\b[\\\\s\\\\v]+(?:[0-9]{110}|[^=]{110})(?:[\\\\s\\\\v]*?[<->])?)|[\\\\s\\\\v]+x?or[\\\\s\\\\v]+.{120}[!\\\\+\\\\-<->]  is not a valid regex\"}"
  },
  {
    "id": "942400",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\band\\b(?:[\\s\\v]+(?:[0-9]{110}[\\s\\v]*?[<->]|[^=]{110})| ?(?:[0-9]{110}|[\\][^=]{110}[\\]) ?[<->]+) ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\\\band\\\\b(?:[\\\\s\\\\v]+(?:[0-9]{110}[\\\\s\\\\v]*?[<->]|[^=]{110})| ?(?:[0-9]{110}|[\\\\][^=]{110}[\\\\]) ?[<->]+)  is not a valid regex\"}"
  },
  {
    "id": "933160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b\\(?[\\]*(?:a(?:rray_(?:(?:diff|intersect)_u(?:assoc|key)|filter|map|reduce|u(?:diff|intersect)(?:_u?assoc)?)|ssert(?:_options)?)|b(?:(?:ase64_en|son_(?:de|en))code|zopen)|c(?:hr|onvert_uuencode|reate_function|url_(?:exec|file_create|init))|(?:debug_backtrac|json_(?:de|en)cod|tmpfil)e|e(?:rror_reporting|scapeshell(?:arg|cmd)|val|x(?:ec|if_(?:imagetype|read_data|t(?:agname|humbnail))))|f(?:i(?:le(?:(?:_exist|perm)s|(?:[acm]tim|inod)e|group)?|nfo_open)|open|(?:pu|unction_exis)ts|tp_(?:connec|ge|nb_(?:ge|pu)|pu)t|write)|g(?:et(?:_(?:c(?:fg_va|urrent_use)r|meta_tags)|(?:cw|lastmo)d|env|imagesize|my(?:[gpu]id|inode))|lob|z(?:compress|(?:(?:defla|wri)t|encod|fil)e|open|read))|h(?:(?:ash_(?:(?:hmac|update)_)?|ighlight_)file|e(?:ader_register_callback|x2bin)|tml(?:_entity_decode|entities|specialchars(?:_decode)?))|i(?:mage(?:2?wbmp|createfrom(?:gif|(?:jpe|pn)g|wbmp|x[bp]m)|g(?:d2?|if)|(?:jpe|pn)g|xbm)|ni_(?:get(?:_all)?|set)|ptcembed|s_(?:dir|(?:(?:execut|read|write?)ab|fi)le)|terator_apply)|m(?:b_(?:ereg(?:_(?:match|replace(?:_callback)?)|i(?:_replace)?)?|parse_str)|(?:d5|ove_uploaded)_file|ethod_exists|kdir|ysql_query)|o(?:b_(?:clean|end_(?:clean|flush)|flush|get_(?:c(?:lean|ontents)|flush)|start)|dbc_(?:connect|exec(?:ute)?|result(?:_all)?)|pendir)|p(?:a(?:rse_(?:ini_file|str)|ssthru)|g_(?:connect|(?:execut|prepar)e|query)|hp(?:_(?:strip_whitespac|unam)e|info|version)|o(?:pen|six_(?:get(?:(?:e[gu]|g)id|login|pwnam)|kill|mk(?:fifo|nod)|ttyname))|r(?:eg_(?:match(?:_all)?|replace(?:_callback(?:_array)?)?|split)|int_r|oc_(?:(?:clos|nic|terminat)e|get_status|open))|utenv)|r(?:awurl(?:de|en)code|e(?:ad(?:_exif_data|dir|(?:gz)?file)|(?:gister_(?:shutdown|tick)|name)_function)|unkit_(?:constant_(?:add|redefine)|(?:function|method)_(?:add|copy|re(?:defin|nam)e)))|s(?:e(?:ssion_s(?:et_save_handler|tart)|t(?:_(?:e(?:rror|xception)_handler|include_path|magic_quotes_runtime)|defaultstub))|h(?:a1_fil|ow_sourc)e|implexml_load_(?:file|string)|ocket_c(?:onnect|reate)|pl_autoload_register|qlite_(?:(?:(?:array|single|unbuffered)_)?query|create_(?:aggregate|function)|exec|p?open)|tr(?:eam_(?:context_create|socket_client)|ipc?slashes|rev)|ystem)|u(?:[ak]?sort|n(?:pack|serialize)|rl(?:de|en)code)|var_dump)(?:/(?:\\*.*\\*/|/.*)|#.*[\\s\\v]|\\)*[\\]*\\)?[\\s\\v]*\\(.*\\) ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\\\b\\\\(?[\\\\]*(?:a(?:rray_(?:(?:diff|intersect)_u(?:assoc|key)|filter|map|reduce|u(?:diff|intersect)(?:_u?assoc)?)|ssert(?:_options)?)|b(?:(?:ase64_en|son_(?:de|en))code|zopen)|c(?:hr|onvert_uuencode|reate_function|url_(?:exec|file_create|init))|(?:debug_backtrac|json_(?:de|en)cod|tmpfil)e|e(?:rror_reporting|scapeshell(?:arg|cmd)|val|x(?:ec|if_(?:imagetype|read_data|t(?:agname|humbnail))))|f(?:i(?:le(?:(?:_exist|perm)s|(?:[acm]tim|inod)e|group)?|nfo_open)|open|(?:pu|unction_exis)ts|tp_(?:connec|ge|nb_(?:ge|pu)|pu)t|write)|g(?:et(?:_(?:c(?:fg_va|urrent_use)r|meta_tags)|(?:cw|lastmo)d|env|imagesize|my(?:[gpu]id|inode))|lob|z(?:compress|(?:(?:defla|wri)t|encod|fil)e|open|read))|h(?:(?:ash_(?:(?:hmac|update)_)?|ighlight_)file|e(?:ader_register_callback|x2bin)|tml(?:_entity_decode|entities|specialchars(?:_decode)?))|i(?:mage(?:2?wbmp|createfrom(?:gif|(?:jpe|pn)g|wbmp|x[bp]m)|g(?:d2?|if)|(?:jpe|pn)g|xbm)|ni_(?:get(?:_all)?|set)|ptcembed|s_(?:dir|(?:(?:execut|read|write?)ab|fi)le)|terator_apply)|m(?:b_(?:ereg(?:_(?:match|replace(?:_callback)?)|i(?:_replace)?)?|parse_str)|(?:d5|ove_uploaded)_file|ethod_exists|kdir|ysql_query)|o(?:b_(?:clean|end_(?:clean|flush)|flush|get_(?:c(?:lean|ontents)|flush)|start)|dbc_(?:connect|exec(?:ute)?|result(?:_all)?)|pendir)|p(?:a(?:rse_(?:ini_file|str)|ssthru)|g_(?:connect|(?:execut|prepar)e|query)|hp(?:_(?:strip_whitespac|unam)e|info|version)|o(?:pen|six_(?:get(?:(?:e[gu]|g)id|login|pwnam)|kill|mk(?:fifo|nod)|ttyname))|r(?:eg_(?:match(?:_all)?|replace(?:_callback(?:_array)?)?|split)|int_r|oc_(?:(?:clos|nic|terminat)e|get_status|open))|utenv)|r(?:awurl(?:de|en)code|e(?:ad(?:_exif_data|dir|(?:gz)?file)|(?:gister_(?:shutdown|tick)|name)_function)|unkit_(?:constant_(?:add|redefine)|(?:function|method)_(?:add|copy|re(?:defin|nam)e)))|s(?:e(?:ssion_s(?:et_save_handler|tart)|t(?:_(?:e(?:rror|xception)_handler|include_path|magic_quotes_runtime)|defaultstub))|h(?:a1_fil|ow_sourc)e|implexml_load_(?:file|string)|ocket_c(?:onnect|reate)|pl_autoload_register|qlite_(?:(?:(?:array|single|unbuffered)_)?query|create_(?:aggregate|function)|exec|p?open)|tr(?:eam_(?:context_create|socket_client)|ipc?slashes|rev)|ystem)|u(?:[ak]?sort|n(?:pack|serialize)|rl(?:de|en)code)|var_dump)(?:/(?:\\\\*.*\\\\*/|/.*)|#.*[\\\\s\\\\v]|\\\\)*[\\\\]*\\\\)?[\\\\s\\\\v]*\\\\(.*\\\\)  is not a valid regex\"}"
  },
  {
    "id": "941160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)<[^0-9<>A-Z_a-z]*(?:[^\\s\\v\\<>]*:)?[^0-9<>A-Z_a-z]*[^0-9A-Z_a-z]*?(?:s[^0-9A-Z_a-z]*?(?:c[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?p[^0-9A-Z_a-z]*?t|t[^0-9A-Z_a-z]*?y[^0-9A-Z_a-z]*?l[^0-9A-Z_a-z]*?e|v[^0-9A-Z_a-z]*?g|e[^0-9A-Z_a-z]*?t[^0-9>A-Z_a-z])|f[^0-9A-Z_a-z]*?o[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?m|m[^0-9A-Z_a-z]*?(?:a[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?q[^0-9A-Z_a-z]*?u[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?e|e[^0-9A-Z_a-z]*?t[^0-9A-Z_a-z]*?a[^0-9>A-Z_a-z])|(?:l[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?n[^0-9A-Z_a-z]*?k|o[^0-9A-Z_a-z]*?b[^0-9A-Z_a-z]*?j[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?c[^0-9A-Z_a-z]*?t|e[^0-9A-Z_a-z]*?m[^0-9A-Z_a-z]*?b[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?d|a[^0-9A-Z_a-z]*?(?:p[^0-9A-Z_a-z]*?p[^0-9A-Z_a-z]*?l[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?t|u[^0-9A-Z_a-z]*?d[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?o|n[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?m[^0-9A-Z_a-z]*?a[^0-9A-Z_a-z]*?t[^0-9A-Z_a-z]*?e)|p[^0-9A-Z_a-z]*?a[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?a[^0-9A-Z_a-z]*?m|i?[^0-9A-Z_a-z]*?f[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?a[^0-9A-Z_a-z]*?m[^0-9A-Z_a-z]*?e|b[^0-9A-Z_a-z]*?(?:a[^0-9A-Z_a-z]*?s[^0-9A-Z_a-z]*?e|o[^0-9A-Z_a-z]*?d[^0-9A-Z_a-z]*?y|i[^0-9A-Z_a-z]*?n[^0-9A-Z_a-z]*?d[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?n[^0-9A-Z_a-z]*?g[^0-9A-Z_a-z]*?s)|i[^0-9A-Z_a-z]*?m[^0-9A-Z_a-z]*?a?[^0-9A-Z_a-z]*?g[^0-9A-Z_a-z]*?e?|v[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?d[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?o)[^0-9>A-Z_a-z])|(?:<[0-9A-Z_a-z].*[\\s\\v/]|[\\](?:.*[\\s\\v/])?)(?:background|formaction|lowsrc|on(?:a(?:bort|ctivate|d(?:apteradded|dtrack)|fter(?:print|(?:scriptexecu|upda)te)|lerting|n(?:imation(?:end|iteration|start)|tennastatechange)|ppcommand|udio(?:end|process|start))|b(?:e(?:fore(?:(?:(?:de)?activa|scriptexecu)te|c(?:opy|ut)|editfocus|p(?:aste|rint)|u(?:nload|pdate))|gin(?:Event)?)|l(?:ocked|ur)|oun(?:ce|dary)|roadcast|usy)|c(?:a(?:(?:ch|llschang)ed|nplay(?:through)?|rdstatechange)|(?:ell|fstate)change|h(?:a(?:rging(?:time)?cha)?nge|ecking)|l(?:ick|ose)|o(?:m(?:mand(?:update)?|p(?:lete|osition(?:end|start|update)))|n(?:nect(?:ed|ing)|t(?:extmenu|rolselect))|py)|u(?:echange|t))|d(?:ata(?:(?:availabl|chang)e|error|setc(?:hanged|omplete))|blclick|e(?:activate|livery(?:error|success)|vice(?:found|light|(?:mo|orienta)tion|proximity))|i(?:aling|s(?:abled|c(?:hargingtimechange|onnect(?:ed|ing))))|o(?:m(?:a(?:ctivate|ttrmodified)|(?:characterdata|subtree)modified|focus(?:in|out)|mousescroll|node(?:inserted(?:intodocument)?|removed(?:fromdocument)?))|wnloading)|r(?:ag(?:drop|e(?:n(?:d|ter)|xit)|(?:gestur|leav)e|over|start)|op)|urationchange)|e(?:mptied|n(?:abled|d(?:ed|Event)?|ter)|rror(?:update)?|xit)|f(?:ailed|i(?:lterchange|nish)|o(?:cus(?:in|out)?|rm(?:change|input)))|g(?:amepad(?:axismove|button(?:down|up)|(?:dis)?connected)|et)|h(?:ashchange|e(?:adphoneschange|l[dp])|olding)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|put|valid))|key(?:down|press|up)|l(?:evelchange|o(?:ad(?:e(?:d(?:meta)?data|nd)|start)?|secapture)|y)|m(?:ark|essage|o(?:use(?:down|enter|(?:lea|mo)ve|o(?:ut|ver)|up|wheel)|ve(?:end|start)?|z(?:a(?:fterpaint|udioavailable)|(?:beforeresiz|orientationchang|t(?:apgestur|imechang))e|(?:edgeui(?:c(?:ancel|omplet)|start)e|network(?:down|up)loa)d|fullscreen(?:change|error)|m(?:agnifygesture(?:start|update)?|ouse(?:hittest|pixelscroll))|p(?:ointerlock(?:change|error)|resstapgesture)|rotategesture(?:start|update)?|s(?:crolledareachanged|wipegesture(?:end|start|update)?))))|no(?:match|update)|o(?:(?:bsolet|(?:ff|n)lin)e|pen|verflow(?:changed)?)|p(?:a(?:ge(?:hide|show)|int|(?:st|us)e)|lay(?:ing)?|op(?:state|up(?:hid(?:den|ing)|show(?:ing|n)))|ro(?:gress|pertychange))|r(?:atechange|e(?:adystatechange|ceived|movetrack|peat(?:Event)?|quest|s(?:et|ize|u(?:lt|m(?:e|ing)))|trieving)|ow(?:e(?:nter|xit)|s(?:delete|inserted)))|s(?:croll|e(?:ek(?:complete|ed|ing)|lect(?:start)?|n(?:ding|t)|t)|how|(?:ound|peech)(?:end|start)|t(?:a(?:lled|rt|t(?:echange|uschanged))|k(?:comma|sessione)nd|op)|u(?:bmit|ccess|spend)|vg(?:abort|error|(?:un)?load|resize|scroll|zoom))|t(?:ext|ime(?:out|update)|ouch(?:cancel|en(?:d|ter)|(?:lea|mo)ve|start)|ransition(?:cancel|end|run))|u(?:n(?:derflow|load)|p(?:dateready|gradeneeded)|s(?:erproximity|sdreceived))|v(?:ersion|o(?:ic|lum)e)change|w(?:a(?:it|rn)ing|heel)|zoom)|ping|s(?:rc|tyle))[\\x08-\\n\\f-\\r ]*?= ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @rx (?i)<[^0-9<>A-Z_a-z]*(?:[^\\\\s\\\\v\\\\<>]*:)?[^0-9<>A-Z_a-z]*[^0-9A-Z_a-z]*?(?:s[^0-9A-Z_a-z]*?(?:c[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?p[^0-9A-Z_a-z]*?t|t[^0-9A-Z_a-z]*?y[^0-9A-Z_a-z]*?l[^0-9A-Z_a-z]*?e|v[^0-9A-Z_a-z]*?g|e[^0-9A-Z_a-z]*?t[^0-9>A-Z_a-z])|f[^0-9A-Z_a-z]*?o[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?m|m[^0-9A-Z_a-z]*?(?:a[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?q[^0-9A-Z_a-z]*?u[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?e|e[^0-9A-Z_a-z]*?t[^0-9A-Z_a-z]*?a[^0-9>A-Z_a-z])|(?:l[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?n[^0-9A-Z_a-z]*?k|o[^0-9A-Z_a-z]*?b[^0-9A-Z_a-z]*?j[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?c[^0-9A-Z_a-z]*?t|e[^0-9A-Z_a-z]*?m[^0-9A-Z_a-z]*?b[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?d|a[^0-9A-Z_a-z]*?(?:p[^0-9A-Z_a-z]*?p[^0-9A-Z_a-z]*?l[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?t|u[^0-9A-Z_a-z]*?d[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?o|n[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?m[^0-9A-Z_a-z]*?a[^0-9A-Z_a-z]*?t[^0-9A-Z_a-z]*?e)|p[^0-9A-Z_a-z]*?a[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?a[^0-9A-Z_a-z]*?m|i?[^0-9A-Z_a-z]*?f[^0-9A-Z_a-z]*?r[^0-9A-Z_a-z]*?a[^0-9A-Z_a-z]*?m[^0-9A-Z_a-z]*?e|b[^0-9A-Z_a-z]*?(?:a[^0-9A-Z_a-z]*?s[^0-9A-Z_a-z]*?e|o[^0-9A-Z_a-z]*?d[^0-9A-Z_a-z]*?y|i[^0-9A-Z_a-z]*?n[^0-9A-Z_a-z]*?d[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?n[^0-9A-Z_a-z]*?g[^0-9A-Z_a-z]*?s)|i[^0-9A-Z_a-z]*?m[^0-9A-Z_a-z]*?a?[^0-9A-Z_a-z]*?g[^0-9A-Z_a-z]*?e?|v[^0-9A-Z_a-z]*?i[^0-9A-Z_a-z]*?d[^0-9A-Z_a-z]*?e[^0-9A-Z_a-z]*?o)[^0-9>A-Z_a-z])|(?:<[0-9A-Z_a-z].*[\\\\s\\\\v/]|[\\\\](?:.*[\\\\s\\\\v/])?)(?:background|formaction|lowsrc|on(?:a(?:bort|ctivate|d(?:apteradded|dtrack)|fter(?:print|(?:scriptexecu|upda)te)|lerting|n(?:imation(?:end|iteration|start)|tennastatechange)|ppcommand|udio(?:end|process|start))|b(?:e(?:fore(?:(?:(?:de)?activa|scriptexecu)te|c(?:opy|ut)|editfocus|p(?:aste|rint)|u(?:nload|pdate))|gin(?:Event)?)|l(?:ocked|ur)|oun(?:ce|dary)|roadcast|usy)|c(?:a(?:(?:ch|llschang)ed|nplay(?:through)?|rdstatechange)|(?:ell|fstate)change|h(?:a(?:rging(?:time)?cha)?nge|ecking)|l(?:ick|ose)|o(?:m(?:mand(?:update)?|p(?:lete|osition(?:end|start|update)))|n(?:nect(?:ed|ing)|t(?:extmenu|rolselect))|py)|u(?:echange|t))|d(?:ata(?:(?:availabl|chang)e|error|setc(?:hanged|omplete))|blclick|e(?:activate|livery(?:error|success)|vice(?:found|light|(?:mo|orienta)tion|proximity))|i(?:aling|s(?:abled|c(?:hargingtimechange|onnect(?:ed|ing))))|o(?:m(?:a(?:ctivate|ttrmodified)|(?:characterdata|subtree)modified|focus(?:in|out)|mousescroll|node(?:inserted(?:intodocument)?|removed(?:fromdocument)?))|wnloading)|r(?:ag(?:drop|e(?:n(?:d|ter)|xit)|(?:gestur|leav)e|over|start)|op)|urationchange)|e(?:mptied|n(?:abled|d(?:ed|Event)?|ter)|rror(?:update)?|xit)|f(?:ailed|i(?:lterchange|nish)|o(?:cus(?:in|out)?|rm(?:change|input)))|g(?:amepad(?:axismove|button(?:down|up)|(?:dis)?connected)|et)|h(?:ashchange|e(?:adphoneschange|l[dp])|olding)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|put|valid))|key(?:down|press|up)|l(?:evelchange|o(?:ad(?:e(?:d(?:meta)?data|nd)|start)?|secapture)|y)|m(?:ark|essage|o(?:use(?:down|enter|(?:lea|mo)ve|o(?:ut|ver)|up|wheel)|ve(?:end|start)?|z(?:a(?:fterpaint|udioavailable)|(?:beforeresiz|orientationchang|t(?:apgestur|imechang))e|(?:edgeui(?:c(?:ancel|omplet)|start)e|network(?:down|up)loa)d|fullscreen(?:change|error)|m(?:agnifygesture(?:start|update)?|ouse(?:hittest|pixelscroll))|p(?:ointerlock(?:change|error)|resstapgesture)|rotategesture(?:start|update)?|s(?:crolledareachanged|wipegesture(?:end|start|update)?))))|no(?:match|update)|o(?:(?:bsolet|(?:ff|n)lin)e|pen|verflow(?:changed)?)|p(?:a(?:ge(?:hide|show)|int|(?:st|us)e)|lay(?:ing)?|op(?:state|up(?:hid(?:den|ing)|show(?:ing|n)))|ro(?:gress|pertychange))|r(?:atechange|e(?:adystatechange|ceived|movetrack|peat(?:Event)?|quest|s(?:et|ize|u(?:lt|m(?:e|ing)))|trieving)|ow(?:e(?:nter|xit)|s(?:delete|inserted)))|s(?:croll|e(?:ek(?:complete|ed|ing)|lect(?:start)?|n(?:ding|t)|t)|how|(?:ound|peech)(?:end|start)|t(?:a(?:lled|rt|t(?:echange|uschanged))|k(?:comma|sessione)nd|op)|u(?:bmit|ccess|spend)|vg(?:abort|error|(?:un)?load|resize|scroll|zoom))|t(?:ext|ime(?:out|update)|ouch(?:cancel|en(?:d|ter)|(?:lea|mo)ve|start)|ransition(?:cancel|end|run))|u(?:n(?:derflow|load)|p(?:dateready|gradeneeded)|s(?:erproximity|sdreceived))|v(?:ersion|o(?:ic|lum)e)change|w(?:a(?:it|rn)ing|heel)|zoom)|ping|s(?:rc|tyle))[\\\\x08-\\\\n\\\\f-\\\\r ]*?=  is not a valid regex\"}"
  },
  {
    "id": "941180",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @pm document.cookie document.domain document.write .parentnode .innerhtml window.location -moz-binding <!-- <![cdata[ ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* @pm document.cookie document.domain document.write .parentnode .innerhtml window.location -moz-binding <!-- <![cdata[  is not a valid regex\"}"
  },
  {
    "id": "953110",
    "regex": "SecRule RESPONSE_BODY @rx (?b(?:f(?:tp_(?:nb_)?f?(?:ge|pu)t|get(?:s?s|c)|scanf|write|open|read)|gz(?:(?:encod|writ)e|compress|open|read)|s(?:ession_start|candir)|read(?:(?:gz)?file|dir)|move_uploaded_file|(?:proc_|bz)open|call_user_func)|\\$_(?:(?:pos|ge)t|session))\\b ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?b(?:f(?:tp_(?:nb_)?f?(?:ge|pu)t|get(?:s?s|c)|scanf|write|open|read)|gz(?:(?:encod|writ)e|compress|open|read)|s(?:ession_start|candir)|read(?:(?:gz)?file|dir)|move_uploaded_file|(?:proc_|bz)open|call_user_func)|\\\\$_(?:(?:pos|ge)t|session))\\\\b  is not a valid regex\"}"
  },
  {
    "id": "951110",
    "regex": "SecRule RESPONSE_BODY @rx (?iJET Database Engine|Access Database Engine|\\[Microsoft\\]\\[ODBC Microsoft Access Driver\\]) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?iJET Database Engine|Access Database Engine|\\\\[Microsoft\\\\]\\\\[ODBC Microsoft Access Driver\\\\])  is not a valid regex\"}"
  },
  {
    "id": "951120",
    "regex": "SecRule RESPONSE_BODY @rx (?iORA-[0-9][0-9][0-9][0-9]|java\\.sql\\.SQLException|Oracle error|Oracle.*Driver|Warning.*oci_.*|Warning.*ora_.*) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?iORA-[0-9][0-9][0-9][0-9]|java\\\\.sql\\\\.SQLException|Oracle error|Oracle.*Driver|Warning.*oci_.*|Warning.*ora_.*)  is not a valid regex\"}"
  },
  {
    "id": "951130",
    "regex": "SecRule RESPONSE_BODY @rx (?iDB2 SQL error:|\\[IBM\\]\\[CLI Driver\\]\\[DB2/6000\\]|CLI Driver.*DB2|DB2 SQL error|db2_\\w+\\() ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?iDB2 SQL error:|\\\\[IBM\\\\]\\\\[CLI Driver\\\\]\\\\[DB2/6000\\\\]|CLI Driver.*DB2|DB2 SQL error|db2_\\\\w+\\\\()  is not a valid regex\"}"
  },
  {
    "id": "951140",
    "regex": "SecRule RESPONSE_BODY @rx (?i[DM_QUERY_E_SYNTAX\\]|has occurred in the vicinity of:) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i[DM_QUERY_E_SYNTAX\\\\]|has occurred in the vicinity of:)  is not a valid regex\"}"
  },
  {
    "id": "951160",
    "regex": "SecRule RESPONSE_BODY @rx (?i)Exception (?condition )?\\d+\\. Transaction rollback\\. ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)Exception (?condition )?\\\\d+\\\\. Transaction rollback\\\\.  is not a valid regex\"}"
  },
  {
    "id": "951180",
    "regex": "SecRule RESPONSE_BODY @rx (?iAn illegal character has been found in the statement|com\\.informix\\.jdbc|Exception.*Informix) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?iAn illegal character has been found in the statement|com\\\\.informix\\\\.jdbc|Exception.*Informix)  is not a valid regex\"}"
  },
  {
    "id": "951190",
    "regex": "SecRule RESPONSE_BODY @rx (?iWarning.*ingres_|Ingres SQLSTATE|Ingres\\W.*Driver) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?iWarning.*ingres_|Ingres SQLSTATE|Ingres\\\\W.*Driver)  is not a valid regex\"}"
  },
  {
    "id": "951200",
    "regex": "SecRule RESPONSE_BODY @rx (?i<b>Warning</b>: ibase_|Unexpected end of command in statement) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i<b>Warning</b>: ibase_|Unexpected end of command in statement)  is not a valid regex\"}"
  },
  {
    "id": "951210",
    "regex": "SecRule RESPONSE_BODY @rx (?iSQL error.*POS[0-9]+.*|Warning.*maxdb.*) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?iSQL error.*POS[0-9]+.*|Warning.*maxdb.*)  is not a valid regex\"}"
  },
  {
    "id": "951220",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?System\\.Data\\.OleDb\\.OleDbException|\\[Microsoft\\]\\[ODBC SQL Server Driver\\]|\\[Macromedia\\]\\[SQLServer JDBC Driver\\]|\\[SqlException|System\\.Data\\.SqlClient\\.SqlException|Unclosed quotation mark after the character string|80040e14|mssql_query\\(\\)|Microsoft OLE DB Provider for ODBC Drivers|Microsoft OLE DB Provider for SQL Server|Incorrect syntax near|Sintaxis incorrecta cerca de|Syntax error in string in query expression|Procedure or function .* expects parameter|Unclosed quotation mark before the character string|Syntax error .* in query expression|Data type mismatch in criteria expression\\.|ADODB\\.Field \\(0x800A0BCD\\)|the used select statements have different number of columns|OLE DB.*SQL Server|Warning.*mssql_.*|Driver.*SQL[ _-]*Server|SQL Server.*Driver|SQL Server.*[0-9a-fA-F]{8}|Exception.*\\WSystem\\.Data\\.SqlClient\\.) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?System\\\\.Data\\\\.OleDb\\\\.OleDbException|\\\\[Microsoft\\\\]\\\\[ODBC SQL Server Driver\\\\]|\\\\[Macromedia\\\\]\\\\[SQLServer JDBC Driver\\\\]|\\\\[SqlException|System\\\\.Data\\\\.SqlClient\\\\.SqlException|Unclosed quotation mark after the character string|80040e14|mssql_query\\\\(\\\\)|Microsoft OLE DB Provider for ODBC Drivers|Microsoft OLE DB Provider for SQL Server|Incorrect syntax near|Sintaxis incorrecta cerca de|Syntax error in string in query expression|Procedure or function .* expects parameter|Unclosed quotation mark before the character string|Syntax error .* in query expression|Data type mismatch in criteria expression\\\\.|ADODB\\\\.Field \\\\(0x800A0BCD\\\\)|the used select statements have different number of columns|OLE DB.*SQL Server|Warning.*mssql_.*|Driver.*SQL[ _-]*Server|SQL Server.*Driver|SQL Server.*[0-9a-fA-F]{8}|Exception.*\\\\WSystem\\\\.Data\\\\.SqlClient\\\\.)  is not a valid regex\"}"
  },
  {
    "id": "951230",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?supplied argument is not a valid |SQL syntax.*)MySQL|Column count doesnt match(?: value count at row)?|mysql_fetch_array\\(\\)|on MySQL result index|You have an error in your SQL syntax(?:;| near)|MyS(?:QL server version for the right syntax to use|qlClient\\.)|\\[MySQL\\]\\[ODBC|(?:Table [^]+ doesnt exis|valid MySQL resul)t|Warning.{110}mysql_(?:[\\(-\\)_a-z]{126})?|ERROR [0-9]{4} \\([0-9a-z]{5}\\): ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?supplied argument is not a valid |SQL syntax.*)MySQL|Column count doesnt match(?: value count at row)?|mysql_fetch_array\\\\(\\\\)|on MySQL result index|You have an error in your SQL syntax(?:;| near)|MyS(?:QL server version for the right syntax to use|qlClient\\\\.)|\\\\[MySQL\\\\]\\\\[ODBC|(?:Table [^]+ doesnt exis|valid MySQL resul)t|Warning.{110}mysql_(?:[\\\\(-\\\\)_a-z]{126})?|ERROR [0-9]{4} \\\\([0-9a-z]{5}\\\\):  is not a valid regex\"}"
  },
  {
    "id": "951240",
    "regex": "SecRule RESPONSE_BODY @rx (?i)P(?ostgreSQL(?: query failed:|.{120}ERROR)|G::[a-z]*Error)|pg_(?:query|exec)\\(\\) \\[:|Warning.*\\bpg_.*|valid PostgreSQL result|Npgsql\\.|Supplied argument is not a valid PostgreSQL .*? resource|Unable to connect to PostgreSQL server ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)P(?ostgreSQL(?: query failed:|.{120}ERROR)|G::[a-z]*Error)|pg_(?:query|exec)\\\\(\\\\) \\\\[:|Warning.*\\\\bpg_.*|valid PostgreSQL result|Npgsql\\\\.|Supplied argument is not a valid PostgreSQL .*? resource|Unable to connect to PostgreSQL server  is not a valid regex\"}"
  },
  {
    "id": "951260",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?Sybase message:|Warning.{220}sybase|Sybase.*Server message.*) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?Sybase message:|Warning.{220}sybase|Sybase.*Server message.*)  is not a valid regex\"}"
  },
  {
    "id": "920100",
    "regex": "SecRule REQUEST_LINE !@rx (?i)^(?get /[^#\\?]*(?:\\?[^\\s\\v#]*)?(?:#[^\\s\\v]*)?|(?:connect (?:(?:[0-9]{13}\\.){3}[0-9]{13}\\.?(?::[0-9]+)?|[\\--9A-Z_a-z]+:[0-9]+)|options \\*|[a-z]{310}[\\s\\v]+(?:[0-9A-Z_a-z]{37}?://[\\--9A-Z_a-z]*(?::[0-9]+)?)?/[^#\\?]*(?:\\?[^\\s\\v#]*)?(?:#[^\\s\\v]*)?)[\\s\\v]+[\\.-9A-Z_a-z]+)$ ",
    "explanation": "{\"error\":\"SecRule REQUEST_LINE !@rx (?i)^(?get /[^#\\\\?]*(?:\\\\?[^\\\\s\\\\v#]*)?(?:#[^\\\\s\\\\v]*)?|(?:connect (?:(?:[0-9]{13}\\\\.){3}[0-9]{13}\\\\.?(?::[0-9]+)?|[\\\\--9A-Z_a-z]+:[0-9]+)|options \\\\*|[a-z]{310}[\\\\s\\\\v]+(?:[0-9A-Z_a-z]{37}?://[\\\\--9A-Z_a-z]*(?::[0-9]+)?)?/[^#\\\\?]*(?:\\\\?[^\\\\s\\\\v#]*)?(?:#[^\\\\s\\\\v]*)?)[\\\\s\\\\v]+[\\\\.-9A-Z_a-z]+)$  is not a valid regex\"}"
  },
  {
    "id": "920120",
    "regex": "SecRule FILES|FILES_NAMES !@rx (?i)^(?&(?:(?:[acegiln-or-suz]acut|[aeiou]grav|[ain-o]tild)e|[c-elnr-tz]caron|(?:[cgk-lnr-t]cedi|[aeiouy]um)l|[aceg-josuwy]circ|[au]ring|a(?:mp|pos)|nbsp|oslash);|[^\\;=])*$ ",
    "explanation": "{\"error\":\"SecRule FILES|FILES_NAMES !@rx (?i)^(?&(?:(?:[acegiln-or-suz]acut|[aeiou]grav|[ain-o]tild)e|[c-elnr-tz]caron|(?:[cgk-lnr-t]cedi|[aeiouy]um)l|[aceg-josuwy]circ|[au]ring|a(?:mp|pos)|nbsp|oslash);|[^\\\\;=])*$  is not a valid regex\"}"
  },
  {
    "id": "920170",
    "regex": "SecRule REQUEST_METHOD @rx ^(?GET|HEAD)$ ",
    "explanation": "{\"error\":\"SecRule REQUEST_METHOD @rx ^(?GET|HEAD)$  is not a valid regex\"}"
  },
  {
    "id": "950130",
    "regex": "SecRule RESPONSE_BODY @rx (?<(?:TITLE>Index of.*?<H|title>Index of.*?<h)1>Index of|>\\[To Parent Directory\\]</[Aa]><br>) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?<(?:TITLE>Index of.*?<H|title>Index of.*?<h)1>Index of|>\\\\[To Parent Directory\\\\]</[Aa]><br>)  is not a valid regex\"}"
  },
  {
    "id": "943110",
    "regex": "SecRule ARGS_NAMES @rx ^(?jsessionid|aspsessionid|asp\\.net_sessionid|phpsession|phpsessid|weblogicsession|session_id|session-id|cfid|cftoken|cfsid|jservsession|jwsession)$ ",
    "explanation": "{\"error\":\"SecRule ARGS_NAMES @rx ^(?jsessionid|aspsessionid|asp\\\\.net_sessionid|phpsession|phpsessid|weblogicsession|session_id|session-id|cfid|cftoken|cfsid|jservsession|jwsession)$  is not a valid regex\"}"
  },
  {
    "id": "943120",
    "regex": "SecRule ARGS_NAMES @rx ^(?jsessionid|aspsessionid|asp\\.net_sessionid|phpsession|phpsessid|weblogicsession|session_id|session-id|cfid|cftoken|cfsid|jservsession|jwsession)$ ",
    "explanation": "{\"error\":\"SecRule ARGS_NAMES @rx ^(?jsessionid|aspsessionid|asp\\\\.net_sessionid|phpsession|phpsessid|weblogicsession|session_id|session-id|cfid|cftoken|cfsid|jservsession|jwsession)$  is not a valid regex\"}"
  }
]
