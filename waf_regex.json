[
  {
    "id": "933100",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:<\\?(?:[^x]|x[^m]|xm[^l]|xml[^\\s]|xml$|$)|<\\?php|\\[(?:\\/|\\\\\\\\)?php\\]) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential PHP injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used by the ModSecurity web application firewall to define a rule\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a set of variables that the rule applies to, including cookies, arguments, and XML data\\n- @rx: a flag indicating that the rule uses a regular expression\\n- (?:<\\\\?(?:[^x]|x[^m]|xm[^l]|xml[^\\\\s]|xml$|$)|<\\\\?php|\\\\[(?:\\\\/|\\\\\\\\\\\\\\\\)?php\\\\]): the regular expression itself, which matches common PHP opening tags, including <?php and <?, as well as [php] tags used by some forum software.\\n\\nFor example, if a web request includes a parameter like \\\"?name=<?php echo 'hello'; ?>\\\", this rule would trigger and block the request.\",\"explanation_id\":39,\"version\":13}\n"
  },
  {
    "id": "933110",
    "regex": "SecRule FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X.Filename|REQUEST_HEADERS:X-File-Name @rx .*\\.(?:php\\d*|phtml)\\.*$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious files being uploaded or requested on a web server. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for the web application firewall. \\n- FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X.Filename|REQUEST_HEADERS:X-File-Name: These are the locations where the rule will be applied. It will check the file name in the uploaded file or in the request headers. \\n- @rx: This is a regular expression operator that specifies that the following pattern is a regular expression. \\n- .*\\\\.(?:php\\\\d*|phtml)\\\\.*$: This is the regular expression pattern that matches any file name that ends with \\\".php\\\" followed by zero or more digits or \\\".phtml\\\" and may have additional periods before the end of the string. \\n\\nFor example, if a user tries to upload a file named \\\"malicious.php5\\\" or requests a file named \\\"index.phtml.bak\\\", this rule will trigger and block the request.\",\"explanation_id\":40,\"version\":43}\n"
  },
  {
    "id": "933200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:zlib|glob|phar|ssh2|rar|ogg|expect|zip):// ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks that involve the use of certain protocols in the input data. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the request that will be checked for the presence of the specified pattern.\\n- @rx: This is a flag that indicates that the pattern is a regular expression.\\n- (?i:zlib|glob|phar|ssh2|rar|ogg|expect|zip)://: This is the regular expression pattern that will be matched against the input data. It looks for the presence of any of the specified protocols followed by a colon and two slashes.\\n\\nFor example, if the input data contains a string like \\\"zlib://example.com\\\", this expression will trigger a rule violation and block the request.\",\"explanation_id\":41,\"version\":61}\n"
  },
  {
    "id": "933160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:s(?:e(?:t(?:_(?:e(?:xception|rror)_handler|magic_quotes_runtime|include_path)|defaultstub)|ssion_s(?:et_save_handler|tart))|qlite_(?:(?:(?:unbuffered|single|array)_)?query|create_(?:aggregate|function)|p?open|exec)|tr(?:eam_(?:context_create|socket_client)|ipc?slashes|rev)|implexml_load_(?:string|file)|ocket_c(?:onnect|reate)|h(?:ow_sourc|a1_fil)e|pl_autoload_register|ystem)|p(?:r(?:eg_(?:replace(?:_callback(?:_array)?)?|match(?:_all)?|split)|oc_(?:(?:terminat|clos|nic)e|get_status|open)|int_r)|o(?:six_(?:get(?:(?:e[gu]|g)id|login|pwnam)|mk(?:fifo|nod)|ttyname|kill)|pen)|hp(?:_(?:strip_whitespac|unam)e|version|info)|g_(?:(?:execut|prepar)e|connect|query)|a(?:rse_(?:ini_file|str)|ssthru)|utenv)|r(?:unkit_(?:function_(?:re(?:defin|nam)e|copy|add)|method_(?:re(?:defin|nam)e|copy|add)|constant_(?:redefine|add))|e(?:(?:gister_(?:shutdown|tick)|name)_function|ad(?:(?:gz)?file|_exif_data|dir))|awurl(?:de|en)code)|i(?:mage(?:createfrom(?:(?:jpe|pn)g|x[bp]m|wbmp|gif)|(?:jpe|pn)g|g(?:d2?|if)|2?wbmp|xbm)|s_(?:(?:(?:execut|write?|read)ab|fi)le|dir)|nai_(?:get(?:_all)?|set)|terator_apply|ptcembed)|g(?:et(?:_(?:c(?:urrent_use|fg_va)r|meta_tags)|my(?:[gpu]id|inode)|(?:lastmo|cw)d|imagesize|env)|z(?:(?:(?:defla|wri)t|encod|fil)e|compress|open|read)|lob)|a(?:rray_(?:u(?:intersect(?:_u?assoc)?|diff(?:_u?assoc)?)|intersect_u(?:assoc|key)|diff_u(?:assoc|key)|filter|reduce|map)|ssert(?:_options)?)|h(?:tml(?:specialchars(?:_decode)?|_entity_decode|entities)|(?:ash(?:_(?:update|hmac))?|ighlight)_file|e(?:ader_register_callback|x2bin))|f(?:i(?:le(?:(?:[acm]tim|inod)e|(?:_exist|perm)s|group)?|nfo_open)|tp_(?:nb_(?:ge|pu)|connec|ge|pu)t|(?:unction_exis|pu)ts|write|open)|o(?:b_(?:get_(?:c(?:ontents|lean)|flush)|end_(?:clean|flush)|clean|flush|start)|dbc_(?:result(?:_all)?|exec(?:ute)?|connect)|pendir)|m(?:b_(?:ereg(?:_(?:replace(?:_callback)?|match)|i(?:_replace)?)?|parse_str)|(?:ove_uploaded|d5)_file|ethod_exists|ysql_query|kdir)|e(?:x(?:if_(?:t(?:humbnail|agname)|imagetype|read_data)|ec)|scapeshell(?:arg|cmd)|rror_reporting|val)|c(?:url_(?:file_create|exec|init)|onvert_uuencode|reate_function|hr)|u(?:n(?:serialize|pack)|rl(?:de|en)code|[ak]?sort)|(?:json_(?:de|en)cod|debug_backtrac|tmpfil)e|b(?:(?:son_(?:de|en)|ase64_en)code|zopen)|var_dump)(?:\\s|/\\*.*\\*/|//.*|#.*)*\\(.*\\) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential security threats in web requests by searching for certain PHP functions that may be used maliciously. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for a web application firewall (WAF) \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the request where the rule should be applied \\n- @rx: indicates that the following is a regular expression \\n- (?i): sets the regular expression to be case-insensitive \\n- \\\\b(?:...): the main part of the regular expression, which searches for a list of PHP functions that may be used maliciously \\n- (\\\\s|/\\\\*.*\\\\*/|//.*|#.*)*: allows for any whitespace or comments before the function call \\n- \\\\(.*\\\\): matches any arguments passed to the function \\n\\nFor example, this expression would detect if a request contained a call to the PHP function \\\"exec\\\", which could be used to execute arbitrary commands on the server.\",\"explanation_id\":42,\"version\":77}\n"
  },
  {
    "id": "933210",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @rx (?:(?:\\(|\\[)[a-zA-Z0-9_.$\\\\[\\](){}/*\\s]+(?:\\)|\\])[0-9_.$\\\\[\\](){}/*\\s]*\\([a-zA-Z0-9_.$\\\\[\\](){}/*\\s].*\\)|\\([\\s]*string[\\s]*\\)[\\s]*(?:\\|)) ",
    "explanation": "{\"explanation\":\"This expression is used for web application firewall (WAF) rules to detect and prevent attacks on web applications. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for a WAF\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the HTTP request where the rule should be applied\\n- @rx: indicates that this is a regular expression rule\\n- (?:(?:\\\\(|\\\\[)[a-zA-Z0-9_.$\\\\\\\\[\\\\](){}/*\\\\s]+(?:\\\\)|\\\\])[0-9_.$\\\\\\\\[\\\\](){}/*\\\\s]*\\\\([a-zA-Z0-9_.$\\\\\\\\[\\\\](){}/*\\\\s].*\\\\)|\\\\([\\\\s]*string[\\\\s]*\\\\)[\\\\s]*(?:\\\\|)): the actual regular expression that matches against the input data\\n\\nFor example, this rule would match against a request parameter that contains a function call with alphanumeric characters and certain special characters, or a string that is being used in a comparison operation. This can help prevent attacks such as SQL injection or cross-site scripting (XSS).\",\"explanation_id\":43,\"version\":43}\n"
  },
  {
    "id": "933161",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:i(?:s(?:_(?:in(?:t(?:eger)?|finite)|n(?:u(?:meric|ll)|an)|(?:calla|dou)ble|s(?:calar|tring)|f(?:inite|loat)|re(?:source|al)|l(?:ink|ong)|a(?:rray)?|object|bool)|set)|n(?:(?:clud|vok)e|t(?:div|val))|(?:mplod|dat)e|conv)|s(?:t(?:r(?:(?:le|sp)n|coll)|at)|(?:e(?:rializ|ttyp)|huffl)e|i(?:milar_text|zeof|nh?)|p(?:liti?|rintf)|(?:candi|ubst)r|y(?:mlink|slog)|o(?:undex|rt)|leep|rand|qrt)|f(?:ile(?:(?:siz|typ)e|owner|pro)|l(?:o(?:atval|ck|or)|ush)|(?:rea|mo)d|t(?:ell|ok)|unction|close|gets|stat|eof)|c(?:h(?:o(?:wn|p)|eckdate|root|dir|mod)|o(?:(?:(?:nsta|u)n|mpac)t|sh?|py)|lose(?:dir|log)|(?:urren|ryp)t|eil)|e(?:x(?:(?:trac|i)t|p(?:lode)?)|a(?:ster_da(?:te|ys)|ch)|r(?:ror_log|egi?)|mpty|cho|nd)|l(?:o(?:g(?:1[0p])?|caltime)|i(?:nk(?:info)?|st)|(?:cfirs|sta)t|evenshtein|trim)|d(?:i(?:(?:skfreespac)?e|r(?:name)?)|e(?:fined?|coct)|(?:oubleva)?l|ate)|r(?:e(?:(?:quir|cod|nam)e|adlin[ek]|wind|set)|an(?:ge|d)|ound|sort|trim)|m(?:b(?:split|ereg)|i(?:crotime|n)|a(?:i[ln]|x)|etaphone|y?sql|hash)|u(?:n(?:(?:tain|se)t|iqid|link)|s(?:leep|ort)|cfirst|mask)|a(?:s(?:(?:se|o)rt|inh?)|r(?:sort|ray)|tan[2h]?|cosh?|bs)|t(?:e(?:xtdomain|mpnam)|a(?:int|nh?)|ouch|ime|rim)|h(?:e(?:ader(?:s_(?:lis|sen)t)?|brev)|ypot|ash)|p(?:a(?:thinfo|ck)|r(?:intf?|ev)|close|o[sw]|i)|g(?:et(?:t(?:ext|ype)|date)|mdate)|o(?:penlog|ctdec|rd)|b(?:asename|indec)|n(?:atsor|ex)t|k(?:sort|ey)|quotemeta|wordwrap|virtual|join)(?:\\s|/\\*.*\\*/|//.*|#.*)*\\(.*\\) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential code injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*: a list of variables to be checked for potential code injection\\n- @rx: a flag indicating that the rule is a regular expression\\n- (?i): a flag indicating that the regular expression is case-insensitive\\n- \\\\b(?:i(?:s(?:_(?:in(?:t(?:eger)?|finite)|n(?:u(?:meric|ll)|an)|(?:calla|dou)ble|s(?:calar|tring)|f(?:inite|loat)|re(?:source|al)|l(?:ink|ong)|a(?:rray)?|object|bool)|set)|n(?:(?:clud|vok)e|t(?:div|val))|(?:mplod|dat)e|conv)|s(?:t(?:r(?:(?:le|sp)n|coll)|at)|(?:e(?:rializ|ttyp)|huffl)e|i(?:milar_text|zeof|nh?)|p(?:liti?|rintf)|(?:candi|ubst)r|y(?:mlink|slog)|o(?:undex|rt)|leep|rand|qrt)|f(?:ile(?:(?:siz|typ)e|owner|pro)|l(?:o(?:atval|ck|or)|ush)|(?:rea|mo)d|t(?:ell|ok)|unction|close|gets|stat|eof)|c(?:h(?:o(?:wn|p)|eckdate|root|dir|mod)|o(?:(?:(?:nsta|u)n|mpac)t|sh?|py)|lose(?:dir|log)|(?:urren|ryp)t|eil)|e(?:x(?:(?:trac|i)t|p(?:lode)?)|a(?:ster_da(?:te|ys)|ch)|r(?:ror_log|egi?)|mpty|cho|nd)|l(?:o(?:g(?:1[0p])?|caltime)|i(?:nk(?:info)?|st)|(?:cfirs|sta)t|evenshtein|trim)|d(?:i(?:(?:skfreespac)?e|r(?:name)?)|e(?:fined?|coct\",\"explanation_id\":44,\"version\":71}\n"
  },
  {
    "id": "934100",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:(?:_(?:\\$\\$ND_FUNC\\$\\$_|_js_function)|(?:new\\s+Function|\\beval)\\s*\\(|String\\s*\\.\\s*fromCharCode|function\\s*\\(\\s*\\)\\s*{|this\\.constructor)|module\\.exports\\s*=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious code injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied (e.g. cookies, query parameters, request body)\\n- @rx: indicates that the rule is a regular expression\\n- (?:(?:_(?:\\\\$\\\\$ND_FUNC\\\\$\\\\$_|_js_function)|(?:new\\\\s+Function|\\\\beval)\\\\s*\\\\(|String\\\\s*\\\\.\\\\s*fromCharCode|function\\\\s*\\\\(\\\\s*\\\\)\\\\s*{|this\\\\.constructor)|module\\\\.exports\\\\s*=): the actual regular expression that matches various patterns of potentially malicious code, such as the use of eval or the creation of new functions.\\n\\nFor example, this rule would trigger if a web request contained a cookie with a value like \\\"_$$ND_FUNC$$_alert('xss')\\\" or a query parameter like \\\"param=new Function('alert(1)')\\\".\",\"explanation_id\":45,\"version\":21}\n"
  },
  {
    "id": "942140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:\\b(?:(?:m(?:s(?:ys(?:ac(?:cess(?:objects|storage|xml)|es)|(?:relationship|object|querie)s|modules2?)|db)|aster\\.\\.sysdatabases|ysql\\.db)|pg_(?:catalog|toast)|information_schema|northwind|tempdb)\\b|s(?:(?:ys(?:\\.database_name|aux)|qlite(?:_temp)?_master)\\b|chema(?:_name\\b|\\W*\\())|d(?:atabas|b_nam)e\\W*\\()) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied (e.g. cookies, query parameters, XML data)\\n- @rx: indicates that the rule is a regular expression\\n- (?i:\\\\b(?:(?:m(?:s(?:ys(?:ac(?:cess(?:objects|storage|xml)|es)|(?:relationship|object|querie)s|modules2?)|db)|aster\\\\.\\\\.sysdatabases|ysql\\\\.db)|pg_(?:catalog|toast)|information_schema|northwind|tempdb)\\\\b|s(?:(?:ys(?:\\\\.database_name|aux)|qlite(?:_temp)?_master)\\\\b|chema(?:_name\\\\b|\\\\W*\\\\())|d(?:atabas|b_nam)e\\\\W*\\\\()): the actual regular expression that matches various SQL injection patterns, such as attempts to access system tables or execute arbitrary SQL commands.\\n\\nFor example, this rule would trigger if a web request contained a cookie or query parameter with a value like \\\"SELECT * FROM users\\\" or \\\"DROP TABLE users\\\".\",\"explanation_id\":46,\"version\":55}\n"
  },
  {
    "id": "942170",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:select|;)\\s+(?:benchmark|sleep|if)\\s*?\\(\\s*?\\(?\\s*?\\w+) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web application firewalls or intrusion detection systems.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that the rule will be applied to. They include HTTP cookies, HTTP request parameters, and XML data.\\n- @rx: This is a transformation action that specifies the rule will use a regular expression to match the input.\\n- (?i:(?:select|;)\\\\s+(?:benchmark|sleep|if)\\\\s*?\\\\(\\\\s*?\\\\(?\\\\s*?\\\\w+): This is the regular expression that matches SQL injection attacks. It looks for the keywords \\\"select\\\" or \\\";\\\" followed by whitespace and then \\\"benchmark\\\", \\\"sleep\\\", or \\\"if\\\" followed by optional whitespace and parentheses, and finally a word character.\\n\\nFor example, this rule will match the following SQL injection attacks:\\n- SELECT benchmark(1000000,MD5(1));\\n- ; sleep(10);\\n- SELECT IF(1=1,'true','false') FROM users;\\n\\nNote that this rule may generate false positives if legitimate SQL queries contain the same keywords and syntax as the attack patterns. Therefore, it should be used in conjunction with other security measures and tuned to the specific application being protected.\",\"explanation_id\":47,\"version\":25}\n"
  },
  {
    "id": "942220",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx ^(?i:-0000023456|4294967295|4294967296|2147483648|2147483647|0000012345|-2147483648|-2147483649|0000023456|3.0.00738585072007e-308|1e309)$ ",
    "explanation": "{\"explanation\":\"This expression is used to match a specific set of numeric values in various parts of an HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for filtering incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the HTTP request where the regex will be applied. It will match against cookies, arguments, and XML data.\\n- @rx: This is a flag that specifies that the regex pattern should be treated as a regular expression.\\n- ^: This is the start of the regex pattern.\\n- (?i:...): This is a non-capturing group that specifies that the pattern inside should be matched case-insensitively.\\n- -0000023456|4294967295|4294967296|2147483648|2147483647|0000012345|-2147483648|-2147483649|0000023456|3.0.00738585072007e-308|1e309: These are the specific numeric values that the regex will match against.\\n- $: This is the end of the regex pattern.\\n\\nFor example, this expression could be used to block requests that contain certain malicious values, such as SQL injection attempts or buffer overflow attacks.\",\"explanation_id\":48,\"version\":101}\n"
  },
  {
    "id": "942240",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:[\\`](?:;*?\\s*?waitfor\\s+(?:delay|time)\\s+[\\`]|;.*?:\\s*?goto)|alter\\s*?\\w+.*?cha(?:racte)?r\\s+set\\s+\\w+)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web application security. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a set of variables to be checked for the presence of the SQL injection pattern\\n- @rx: a flag indicating that the pattern is a regular expression\\n- (?i:...): the actual regular expression pattern, which matches SQL injection attempts that use the \\\"waitfor delay\\\" or \\\"waitfor time\\\" commands, or the \\\"goto\\\" statement, or the \\\"alter character set\\\" command.\\n\\nFor example, this expression will match the following SQL injection attempts:\\n- '; WAITFOR DELAY '0:0:10'--\\n- ALTER TABLE users CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\\n- SELECT * FROM users WHERE username = 'admin' OR 1=1; --' \\n\\nThe expression is designed to prevent attackers from injecting malicious SQL code into a web application's database by detecting and blocking such attempts.\",\"explanation_id\":49,\"version\":83}\n"
  },
  {
    "id": "942280",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:;\\s*?shutdown\\s*?(?:[#;]|\\/\\*|--|\\{)|waitfor\\s*?delay\\s?[\\`]+\\s?\\d|select\\s*?pg_sleep)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web application requests.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the HTTP request that the rule will be applied to.\\n- @rx: This is a transformation function that applies a regular expression to the variable.\\n- (?i:(?:;\\\\s*?shutdown\\\\s*?(?:[#;]|\\\\/\\\\*|--|\\\\{)|waitfor\\\\s*?delay\\\\s?[\\\\`]+\\\\s?\\\\d|select\\\\s*?pg_sleep)): This is the regular expression that will be applied to the variable. It looks for common SQL injection attack patterns such as \\\"shutdown\\\" or \\\"waitfor delay\\\".\\n\\nFor example, if a user submits a request with a cookie that contains the string \\\";shutdown\\\", this rule will trigger and block the request.\",\"explanation_id\":50,\"version\":1}\n"
  },
  {
    "id": "942320",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:create\\s+(?:procedure|function)\\s*?\\w+\\s*?\\(\\s*?\\)\\s*?-|;\\s*?(?:declare|open)\\s+[\\w-]+|procedure\\s+analyse\\s*?\\(|declare[^\\w]+[@#]\\s*?\\w+|exec\\s*?\\(\\s*?\\@)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests.\\nThe regex expression consists of several parts:\\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web server.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied, including cookies, query string parameters, and XML data.\\n- @rx: indicates that the rule uses a regular expression to match against the request data.\\n- (?i:...): the actual regular expression pattern, which looks for common SQL injection patterns such as \\\"create procedure\\\", \\\"declare\\\", and \\\"exec\\\".\\n\\nFor example, if a web request contains a cookie with the value \\\"create procedure myproc()\\\", the rule will trigger and block the request.\",\"explanation_id\":51,\"version\":91}\n"
  },
  {
    "id": "942350",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:;\\s*?(?:(?:(?:trunc|cre|upd)at|renam)e|(?:inser|selec)t|de(?:lete|sc)|alter|load)\\b\\s*?[\\[(]?\\w{2}|create\\s+function\\s+.+\\s+returns)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- @rx: indicates that the rule is a regular expression\\n- (?i:...): the actual regular expression that matches SQL injection attempts. It looks for certain SQL keywords (e.g. \\\"select\\\", \\\"insert\\\", \\\"delete\\\") followed by a word of at least two characters, optionally enclosed in brackets or parentheses. The \\\"i\\\" flag makes the match case-insensitive.\\n\\nFor example, this rule would match a request parameter like \\\"id=1; DROP TABLE users\\\", which contains the SQL keyword \\\"DROP\\\" followed by a table name. The rule would trigger and block the request, preventing the SQL injection attack.\",\"explanation_id\":52,\"version\":43}\n"
  },
  {
    "id": "942110",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* @rx (?:^\\s*[\\`;]+|[\\`]+\\s*$) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web application requests. \\n\\nThe regex expression consists of two parts separated by the pipe symbol: \\n\\n1. ARGS_NAMES|ARGS|XML/*: This part specifies the target of the rule, which can be either the parameter names (ARGS_NAMES), the parameter values (ARGS), or the XML data (XML/*) in the request. \\n\\n2. @rx (?:^\\\\s*[\\\\`;]+|[\\\\`]+\\\\s*$): This part is the regular expression pattern that matches the potential SQL injection attack. It looks for strings that start with zero or more whitespace characters followed by one or more semicolons or backticks, or strings that end with one or more backticks followed by zero or more whitespace characters. \\n\\nFor example, if the request contains a parameter named \\\"username\\\" with the value \\\"admin'; DROP TABLE users;\\\", this expression would detect it as a potential SQL injection attack.\",\"explanation_id\":53,\"version\":93}\n"
  },
  {
    "id": "942130",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* @rx (?i:[\\s\\`()]*?\\b([\\d\\w]+)\\b[\\s\\`()]*?(?:<(?:=(?:[\\s\\`()]*?(?!\\b\\1\\b)[\\d\\w]+|>[\\s\\`()]*?(?:\\b\\1\\b))|>?[\\s\\`()]*?(?!\\b\\1\\b)[\\d\\w]+)|(?:not\\s+(?:regexp|like)|is\\s+not|>=?|!=|\\^)[\\s\\`()]*?(?!\\b\\1\\b)[\\d\\w]+|(?:(?:sounds\\s+)?like|r(?:egexp|like)|=)[\\s\\`()]*?(?:\\b\\1\\b))) ",
    "explanation": "{\"explanation\":\"This expression is used to match and identify potential SQL injection attacks in web application security. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a ModSecurity directive that specifies a rule to be applied to incoming requests\\n- ARGS_NAMES|ARGS|XML/*: specifies the location of the input data to be checked for SQL injection attacks\\n- @rx: specifies that the rule is a regular expression\\n- (?i:): sets the regular expression to be case-insensitive\\n- [\\\\s\\\\`()]*?: matches any whitespace, parentheses, or backticks before the potential SQL injection attack\\n- \\\\b([\\\\d\\\\w]+)\\\\b: captures the potential SQL injection attack as a word boundary, consisting of one or more digits or letters\\n- [\\\\s\\\\`()]*?: matches any whitespace, parentheses, or backticks after the potential SQL injection attack\\n- (?:<(?:=(?:[\\\\s\\\\`()]*?(?!\\\\b\\\\1\\\\b)[\\\\d\\\\w]+|>[\\\\s\\\\`()]*?(?:\\\\b\\\\1\\\\b))|>?[\\\\s\\\\`()]*?(?!\\\\b\\\\1\\\\b)[\\\\d\\\\w]+)|(?:not\\\\s+(?:regexp|like)|is\\\\s+not|>=?|!=|\\\\^)[\\\\s\\\\`()]*?(?!\\\\b\\\\1\\\\b)[\\\\d\\\\w]+|(?:(?:sounds\\\\s+)?like|r(?:egexp|like)|=)[\\\\s\\\\`()]*?(?:\\\\b\\\\1\\\\b)): checks for various SQL injection attack patterns, including comparison operators, logical operators, and SQL functions\\n- ?: specifies a non-capturing group\\n\\nFor example, the regex expression would match the following potential SQL injection attack: \\n- ' OR 1=1 -- \\n- 1; DROP TABLE users-- \\n- SELECT * FROM users WHERE username = 'admin' AND password = 'password'\",\"explanation_id\":54,\"version\":49}\n"
  },
  {
    "id": "942180",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:[\\`](?:\\s*?(?:(?:between|x?or|and|div)[\\w\\s-]+\\s*?[+<>=()-]\\s*?[\\d\\`]|like(?:[\\w\\s-]+\\s*?[+<>=()-]\\s*?[\\d\\`]|\\W+[\\w\\`(])|[!=|](?:[\\d\\s!=+-]+.*?[\\`(].*?|[\\d\\s!=]+.*?\\d+)$|[^\\w\\s]?=\\s*?[\\`])|(?:\\W*?[+=]+\\W*?|[<>~]+)[\\`])|(?:/\\*)+[\\`]+\\s?(?:\\/\\*|--|\\{|#)?|\\d[\\`]\\s+[\\`]\\s+\\d|where\\s[\\s\\w\\.-]+\\s=|^admin\\s*?[\\`]|\\sis\\s*?0\\W) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the regex should be applied\\n- @rx: indicates that this is a regular expression rule\\n- (?i:...): the actual regular expression pattern, which matches various SQL injection attempts, including those using keywords like \\\"between\\\", \\\"or\\\", \\\"and\\\", \\\"like\\\", and \\\"where\\\", as well as various operators and special characters. \\n\\nFor example, this rule would detect a SQL injection attempt in a web request that includes the string \\\"1' OR '1'='1\\\" in a cookie or argument value.\",\"explanation_id\":55,\"version\":19}\n"
  },
  {
    "id": "942200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:(?:(?:(?:trunc|cre|upd)at|renam)e|(?:inser|selec)t|de(?:lete|sc)|alter|load)\\s*?\\(\\s*?space\\s*?\\(|.*?[)\\da-f\\`][\\`](?:[\\`].*?[\\`]|(?:\\r?\\n)?\\z|[^\\`]+)|\\Wselect.+\\W*?from)) ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:(?:(?:(?:trunc|cre|upd)at|renam)e|(?:inser|selec)t|de(?:lete|sc)|alter|load)\\\\s*?\\\\(\\\\s*?space\\\\s*?\\\\(|.*?[)\\\\da-f\\\\`][\\\\`](?:[\\\\`].*?[\\\\`]|(?:\\\\r?\\\\n)?\\\\z|[^\\\\`]+)|\\\\Wselect.+\\\\W*?from))  is not a valid regex\"}\n"
  },
  {
    "id": "942210",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:(?:n(?:and|ot)|(?:x?x)?or|between|\\|\\||like|and|div|&&)[\\s(]+\\w+[\\s)]*?[!=+]+[\\s\\d]*?[\\`=()]|\\d(?:\\s*?(?:between|like|x?or|and|div)\\s*?\\d+\\s*?[\\-+]|\\s+group\\s+by.+\\()|\\/\\w+;?\\s+(?:between|having|select|like|x?or|and|div)\\W|--\\s*?(?:(?:insert|update)\\s*?\\w{2}|alter|drop)|#\\s*?(?:(?:insert|update)\\s*?\\w{2}|alter|drop)|;\\s*?(?:(?:insert|update)\\s*?\\w{2}|alter|drop)|\\@.+=\\s*?\\(\\s*?select|[^\\w]SET\\s*?\\@\\w+)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- @rx: indicates that this is a regular expression rule\\n- (?i:...): the actual regular expression pattern, which matches various SQL injection attempts, including boolean-based, time-based, error-based, and other techniques.\\n\\nFor example, the regular expression pattern matches strings like:\\n- \\\"1' or '1'='1\\\" (boolean-based)\\n- \\\"sleep(5)\\\" (time-based)\\n- \\\"1/0\\\" (error-based)\\n- \\\"SELECT * FROM users WHERE username = 'admin'; DROP TABLE users;\\\" (SQL injection with multiple statements)\",\"explanation_id\":56,\"version\":65}\n"
  },
  {
    "id": "942260",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:[\\`]\\s*?(?:(?:n(?:and|ot)|(?:x?x)?or|between|\\|\\||and|div|&&)\\s+[\\s\\w]+=\\s*?\\w+\\s*?having\\s+|like(?:\\s+[\\s\\w]+=\\s*?\\w+\\s*?having\\s+|\\W*?[\\`\\d])|[^?\\w\\s=.;)(]++\\s*?[(@\\`]*?\\s*?\\w+\\W+\\w|\\*\\s*?\\w+\\W+[\\`])|(?:union\\s*?(?:distinct|[(!@]*?|all)?\\s*?[([]*?\\s*?select|select\\s+?[\\[\\]()\\s\\w\\.\\`-]+from)\\s+|\\w\\s+like\\s+[\\`]|find_in_set\\s*?\\(|like\\s*?[\\`]%) ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:[\\\\`]\\\\s*?(?:(?:n(?:and|ot)|(?:x?x)?or|between|\\\\|\\\\||and|div|&&)\\\\s+[\\\\s\\\\w]+=\\\\s*?\\\\w+\\\\s*?having\\\\s+|like(?:\\\\s+[\\\\s\\\\w]+=\\\\s*?\\\\w+\\\\s*?having\\\\s+|\\\\W*?[\\\\`\\\\d])|[^?\\\\w\\\\s=.;)(]++\\\\s*?[(@\\\\`]*?\\\\s*?\\\\w+\\\\W+\\\\w|\\\\*\\\\s*?\\\\w+\\\\W+[\\\\`])|(?:union\\\\s*?(?:distinct|[(!@]*?|all)?\\\\s*?[([]*?\\\\s*?select|select\\\\s+?[\\\\[\\\\]()\\\\s\\\\w\\\\.\\\\`-]+from)\\\\s+|\\\\w\\\\s+like\\\\s+[\\\\`]|find_in_set\\\\s*?\\\\(|like\\\\s*?[\\\\`]%)  is not a valid regex\"}\n"
  },
  {
    "id": "942300",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:(?:n(?:and|ot)|(?:x?x)?or|between|\\|\\||like|and|div|&&)\\s+\\s*?\\w+\\(|\\)\\s*?when\\s*?\\d+\\s*?then|[\\`]\\s*?(?:--|\\{|#)|cha?r\\s*?\\(\\s*?\\d|\\/\\*!\\s?\\d+)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web applications using ModSecurity. \\n\\nThe regex expression consists of several parts: \\n- SecRule: ModSecurity rule keyword\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: ModSecurity target locations\\n- @rx: ModSecurity operator to match regular expressions\\n- (?i:...): Regular expression pattern to match SQL injection attacks, including keywords such as \\\"and\\\", \\\"or\\\", \\\"not\\\", \\\"like\\\", \\\"between\\\", and \\\"div\\\", as well as numeric and character functions and comments.\\n\\nFor example, this expression would match the following SQL injection attack: \\nSELECT * FROM users WHERE username = 'admin' AND password = 'password' OR 1=1;\",\"explanation_id\":57,\"version\":43}\n"
  },
  {
    "id": "942330",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:^(?:[\\`\\\\\\\\]*?(?:[^\\`]+[\\`]|[\\d\\`]+)\\s*?(?:n(?:and|ot)|(?:x?x)?or|between|\\|\\||like|and|div|&&)\\s*?[\\w\\`][+&!@().-]|.?[\\`]$)|\\@(?:[\\w-]+\\s(?:between|like|x?or|and|div)\\s*?[^\\w\\s]|\\w+\\s+(?:between|like|x?or|and|div)\\s*?[\\`\\d]+)|[\\`]\\s*?(?:between|like|x?or|and|div)\\s*?[\\`]?\\d|[^\\w\\s:]\\s*?\\d\\W+[^\\w\\s]\\s*?[\\`].|[^\\w\\s]\\w+\\s*?[|-]\\s*?[\\`]\\s*?\\w|\\Winformation_schema|\\\\\\\\x(?:23|27|3d)|table_name\\W)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web application requests. \\n\\nThe regex expression consists of several parts: \\n- It first specifies the locations to search for potential injection points (request cookies, arguments, and XML data). \\n- It then uses a combination of various regex patterns to match common SQL injection techniques, such as using logical operators (AND, OR), comparison operators (LIKE, BETWEEN), and special characters (``, `, @, etc.) to manipulate the query. \\n- It also includes specific patterns to detect attempts to access the information_schema database or extract table names. \\n\\nFor example, the regex pattern `(?i:(?:^(?:[\\\\`\\\\\\\\\\\\\\\\]*?(?:[^\\\\`]+[\\\\`]|[\\\\d\\\\`]+)\\\\s*?(?:n(?:and|ot)|(?:x?x)?or|between|\\\\|\\\\||like|and|div|&&)\\\\s*?[\\\\w\\\\`][+&!@().-]|.?[\\\\`]$)` matches strings that start with a combination of backticks and backslashes, followed by a logical or comparison operator, and ending with a backtick. This is a common pattern used to inject SQL commands into a query. \\n\\nOverall, this regex expression is a comprehensive tool for detecting and preventing SQL injection attacks in web applications.\",\"explanation_id\":58,\"version\":79}\n"
  },
  {
    "id": "942370",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:[\\`](?:\\s*?(?:(?:\\*.+(?:(?:an|i)d|between|like|x?or|div)\\W*?[\\`]|(?:between|like|x?or|and|div)\\s[^\\d]+[\\w-]+.*?)\\d|[^\\w\\s?]+\\s*?[^\\w\\s]+\\s*?[\\`]|[^\\w\\s]+\\s*?[\\W\\d].*?(?:--|#))|.*?\\*\\s*?\\d)|[()\\*<>%+-][\\w-]+[^\\w\\s]+[\\`][^]|\\^[\\`]) ",
    "explanation": "{\"explanation\":\"This expression is used for web application firewall (WAF) rule creation to detect and prevent SQL injection attacks. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for a WAF\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the HTTP request where the rule should be applied\\n- @rx: indicates that the rule is a regular expression\\n- (?i:...): the actual regular expression that matches SQL injection attempts\\n\\nFor example, the regular expression matches SQL injection attempts that include keywords such as \\\"and\\\", \\\"or\\\", \\\"like\\\", \\\"between\\\", and \\\"div\\\", as well as various symbols and characters that are commonly used in SQL injection attacks.\",\"explanation_id\":59,\"version\":3}\n"
  },
  {
    "id": "942390",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:\\b(?:(?i:xor)\\b\\s+(?:[^=]{110}(?:\\s*?[=<>])?|\\d{110}(?:\\s*?[=<>])?)|(?i:or)\\b\\s+(?:[^=]{110}(?:\\s*?[=<>])?|\\d{110}(?:\\s*?[=<>])?))|(?i:\\bor\\b ?[\\\\][^=]{110}[\\\\] ?[=<>]+)|(?i:\\s+xor\\s+.{120}[+\\-!<>=])|(?i:\\s+or\\s+.{120}[+\\-!<>=])|(?i:\\bor\\b ?\\d{110} ?[=<>]+)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied (e.g. cookies, query parameters, XML data)\\n- @rx: indicates that the rule is a regular expression\\n- (?:...): a non-capturing group that contains several sub-patterns separated by the \\\"|\\\" character\\n- \\\\b(?:(?i:xor)\\\\b\\\\s+(?:[^=]{110}(?:\\\\s*?[=<>])?|\\\\d{110}(?:\\\\s*?[=<>])?)|(?i:or)\\\\b\\\\s+(?:[^=]{110}(?:\\\\s*?[=<>])?|\\\\d{110}(?:\\\\s*?[=<>])?))|(?i:\\\\bor\\\\b ?[\\\\\\\\][^=]{110}[\\\\\\\\] ?[=<>]+)|(?i:\\\\s+xor\\\\s+.{120}[+\\\\-!<>=])|(?i:\\\\s+or\\\\s+.{120}[+\\\\-!<>=])|(?i:\\\\bor\\\\b ?\\\\d{110} ?[=<>]+): the actual regular expression pattern that matches various SQL injection attack patterns\\n\\nFor example, this expression would match a request parameter that contains the string \\\"xor\\\" followed by 110 non-equal characters and an optional comparison operator, or the string \\\"or\\\" followed by the same pattern. It would also match similar patterns with escape characters or numeric values instead of characters. Finally, it would match patterns with \\\"xor\\\" or \\\"or\\\" followed by 120 characters and a comparison operator.\",\"explanation_id\":60,\"version\":17}\n"
  },
  {
    "id": "942410",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:\\b(?:c(?:o(?:n(?:v(?:ert(?:_tz)?)?|cat(?:_ws)?|nection_id)|(?:mpres)?s|ercibility|(?:un)?t|alesce)|ur(?:rent_(?:time(?:stamp)?|date|user)|(?:dat|tim)e)|h(?:ar(?:(?:acter)?_length|set)?|r)|iel(?:ing)?|ast|r32)|s(?:t(?:d(?:dev(?:_(?:sam|po)p)?)?|r(?:_to_date|cmp))|u(?:b(?:str(?:ing(?:_index)?)?|(?:dat|tim)e)|m)|e(?:c(?:_to_time|ond)|ssion_user)|ys(?:tem_user|date)|ha[12]?|oundex|chema|ig?n|leep|pace|qrt)|i(?:s(?:_(?:ipv(?:4(?:_(?:compat|mapped))?|6)|n(?:ot(?:_null)?|ull)|(?:free|used)_lock)|null)?|n(?:et(?:6_(?:aton|ntoa)|_(?:aton|ntoa))|s(?:ert|tr)|terval)?|f(?:null)?)|d(?:a(?:t(?:e(?:_(?:format|add|sub)|diff)?|abase)|y(?:of(?:month|week|year)|name)?)|e(?:(?:s_(?:de|en)cryp|faul)t|grees|code)|count|ump)|l(?:o(?:ca(?:l(?:timestamp)?|te)|g(?:10|2)?|ad_file|wer)|ast(?:_(?:insert_id|day))?|e(?:(?:as|f)t|ngth)|case|trim|pad|n)|u(?:n(?:compress(?:ed_length)?|ix_timestamp|hex)|tc_(?:time(?:stamp)?|date)|p(?:datexml|per)|uid(?:_short)?|case|ser)|r(?:a(?:wto(?:nhex(?:toraw)?|hex)|dians|nd)|e(?:p(?:lace|eat)|lease_lock|verse)|o(?:w_count|und)|ight|trim|pad)|t(?:ime(?:_(?:format|to_sec)|stamp(?:diff|add)?|diff)?|o_(?:(?:second|day)s|base64|n?char)|r(?:uncate|im)|an)|m(?:a(?:ke(?:_set|date)|ster_pos_wait|x)|i(?:(?:crosecon)?d|n(?:ute)?)|o(?:nth(?:name)?|d)|d5)|f(?:i(?:eld(?:_in_set)?|nd_in_set)|rom_(?:unixtime|base64|days)|o(?:und_rows|rmat)|loor)|p(?:o(?:w(?:er)?|sition)|eriod_(?:diff|add)|rocedure_analyse|assword|g_sleep|i)|a(?:s(?:cii(?:str)?|in)|es_(?:de|en)crypt|dd(?:dat|tim)e|(?:co|b)s|tan2?|vg)|b(?:i(?:t_(?:length|count|x?or|and)|n(?:_to_num)?)|enchmark)|e(?:x(?:tract(?:value)?|p(?:ort_set)?)|nc(?:rypt|ode)|lt)|g(?:r(?:oup_conca|eates)t|et_(?:format|lock))|v(?:a(?:r(?:_(?:sam|po)p|iance)|lues)|ersion)|o(?:(?:ld_passwo)?rd|ct(?:et_length)?)|we(?:ek(?:ofyear|day)?|ight_string)|n(?:o(?:t_in|w)|ame_const|ullif)|h(?:ex(?:toraw)?|our)|qu(?:arter|ote)|year(?:week)?|xmltype)\\W*?\\() ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web server\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- @rx: indicates that the rule is a regular expression\\n- (?i:\\\\b(?:c(?:o(?:n(?:v(?:ert(?:_tz)?)?|cat(?:_ws)?|nection_id)|(?:mpres)?s|ercibility|(?:un)?t|oalesce)|ur(?:rent_(?:time(?:stamp)?|date|user)|(?:dat|tim)e)|h(?:ar(?:(?:acter)?_length|set)?|r)|iel(?:ing)?|ast|r32)|s(?:t(?:d(?:dev(?:_(?:sam|po)p)?)?|r(?:_to_date|cmp))|u(?:b(?:str(?:ing(?:_index)?)?|(?:dat|tim)e)|m)|e(?:c(?:_to_time|ond)|ssion_user)|ys(?:tem_user|date)|ha[12]?|oundex|chema|ig?n?|leep|pace|qrt)|i(?:s(?:_(?:ipv(?:4(?:_(?:compat|mapped))?|6)|n(?:ot(?:_null)?|ull)|(?:free|used)_lock)|null)?|n(?:et(?:6_(?:aton|ntoa)|_(?:aton|ntoa))|s(?:ert|tr)|terval)?|f(?:null)?)|d(?:a(?:t(?:e(?:_(?:format|add|sub)|diff)?|abase)|y(?:of(?:month|week|year)|name)?)|e(?:(?:s_(?:de|en)cryp|faul)t|grees|code)|count|ump)|l(?:o(?:ca(?:l(?:timestamp)?|te)|g(?:10|2)?|ad_file|wer)|ast(?:_(?:insert_id|day))?|e(?:(?:as|f)t|ngth)|case|trim|pad|n)|u(?:n(?:compress(?:ed_length)?|ix_timestamp|hex)|tc_(?:time(?:stamp)?|date\",\"explanation_id\":61,\"version\":101}\n"
  },
  {
    "id": "942480",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:\\b(?:(?:s(?:elect\\b.{1100}?\\b(?:(?:(?:length|count)\\b.{1100}?|.*?\\bdump\\b.*)\\bfrom|to(?:p\\b.{1100}?\\bfrom|_(?:numbe|cha)r)|(?:from\\b.{1100}?\\bwher|data_typ)e|instr)|ys_context)|in(?:to\\b\\W*?\\b(?:dump|out)file|sert\\b\\W*?\\binto|ner\\b\\W*?\\bjoin)|u(?:nion\\b.{1100}?\\bselect|tl_inaddr)|group\\b.*?\\bby\\b.{1100}?\\bhaving|d(?:elete\\b\\W*?\\bfrom|bms_\\w+\\.)|load\\b\\W*?\\bdata\\b.*?\\binfile)\\b|print\\b\\W*?\\@\\@)|(?:;\\W*?\\b(?:shutdown|drop)|collation\\W*?\\(a|\\@\\@version)\\b|(?:s(?:qloledb|a)|msdasql|dbo))) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web application requests. \\n\\nThe regex expression consists of several parts: \\n- It first specifies the sources of input to be checked, including request cookies, request cookie names, argument names, arguments, and XML data. \\n- It then uses a regular expression to match common SQL injection attack patterns, including SELECT statements with long strings of characters, UNION SELECT statements, GROUP BY and HAVING clauses, DELETE statements, and attempts to shut down or drop the database. It also looks for specific keywords like \\\"print\\\" and \\\"@@version\\\" that may indicate an attack. \\n\\nFor example, the regex would match a request that includes the following string: \\n\\\"SELECT * FROM users WHERE username = 'admin' AND password = 'password' OR 1=1; DROP TABLE users;\\\" \\n\\nOverall, this regex is a useful tool for detecting and preventing SQL injection attacks in web applications.\",\"explanation_id\":62,\"version\":53}\n"
  },
  {
    "id": "942510",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:`((?:[\\w\\s=_\\-+{}()<@]){229}|(?:[A-Za-z0-9+\\/]{4})+(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?)`) ",
    "explanation": "{\"explanation\":\"This expression is used to search for a specific pattern in HTTP requests and responses. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different variables that the rule will be applied to. In this case, it will look for the pattern in cookies, arguments, and XML data.\\n- @rx: This is a flag that specifies that the rule will use a regular expression to match the pattern.\\n- (?:`((?:[\\\\w\\\\s=_\\\\-+{}()<@]){229}|(?:[A-Za-z0-9+\\\\/]{4})+(?:[A-Za-z0-9+\\\\/]{2}==|[A-Za-z0-9+\\\\/]{3}=)?)`): This is the regular expression itself. It looks for a string that is either 229 characters long and contains only certain characters, or is a base64-encoded string that is at least 4 characters long.\\n\\nFor example, this expression could be used to search for a specific type of malicious code that is known to be encoded in base64 and inserted into HTTP requests or responses.\",\"explanation_id\":63,\"version\":19}\n"
  },
  {
    "id": "942101",
    "regex": "SecRule REQUEST_BASENAME \"@detectSQLi\"",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests.\\nThe regex expression consists of one part: \\\"@detectSQLi\\\" is a ModSecurity operator that matches common SQL injection patterns in the request URI, headers, and body.\\nFor example, if a user tries to submit a SQL query through a form input, this expression will trigger and block the request.\",\"explanation_id\":64,\"version\":17}\n"
  },
  {
    "id": "942251",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\W+\\d*?\\s*?having\\s*?[^\\s\\-] ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests.\\nThe regex expression consists of several parts:\\n- SecRule: a directive used in ModSecurity to define a rule\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a list of variables to be checked for the presence of the regex pattern\\n- @rx: a flag indicating that the pattern is a regular expression\\n- (?i): a flag indicating that the pattern is case-insensitive\\n- \\\\W+: matches one or more non-word characters (e.g. spaces, punctuation)\\n- \\\\d*?: matches zero or more digits (non-greedy)\\n- \\\\s*?: matches zero or more whitespace characters (non-greedy)\\n- having: matches the word \\\"having\\\"\\n- [^\\\\s\\\\-]: matches any character that is not a whitespace or a hyphen\\n\\nFor example, this expression would match the following strings:\\n- \\\"1 having 1=1\\\"\\n- \\\"having 1=1\\\"\\n- \\\"HAVING 1=1\\\"\\n- \\\"having 1=1--\\\"\\n- \\\"having 1=1/*\\\"\",\"explanation_id\":65,\"version\":99}\n"
  },
  {
    "id": "951100",
    "regex": "SecRule RESPONSE_BODY \"@pmFromFile sql-errors.data\"",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in the response body of a web application. \\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- RESPONSE_BODY: This is a variable that represents the response body of the web application.\\n- @pmFromFile: This is an operator that matches any of the strings in a file specified by the argument. In this case, the file is \\\"sql-errors.data\\\".\\n- sql-errors.data: This is a file that contains a list of known SQL injection attack strings.\\n\\nFor example, if the response body of a web application contains any of the strings in \\\"sql-errors.data\\\", the rule will be triggered and the web application firewall will take action to prevent the attack.\",\"explanation_id\":66,\"version\":73}\n"
  },
  {
    "id": "930100",
    "regex": "SecRule REQUEST_URI_RAW|ARGS|REQUEST_HEADERS|!REQUEST_HEADERSReferer|XML:/* @rx (?i)(?:\\x5c|(?:%(?:c(?:0%(?:[2aq]f|5c|9v)|1%(?:[19p]c|8s|af))|2(?:5(?:c(?:0%25af|1%259c)|2f|5c)|%46|f)|(?:(?:f(?:8%8)?0%8|e)0%80%a|bg%q)f|%3(?:2(?:%(?:%6|4)6|F)|5%%63)|u(?:221[56]|002f|EFC8|F025)|1u|5c)|0x(?:2f|5c)|\\/))(?:%(?:(?:f(?:(?:c%80|8)%8)?0%8|e)0%80%ae|2(?:(?:5(?:c0%25a|2))?e|%45)|u(?:(?:002|ff0)e|2024)|%32(?:%(?:%6|4)5|E)|c0(?:%[256aef]e|\\.))|\\.(?:%0[01]|\\?)?|\\?\\.?|0x2e){2}(?:\\x5c|(?:%(?:c(?:0%(?:[2aq]f|5c|9v)|1%(?:[19p]c|8s|af))|2(?:5(?:c(?:0%25af|1%259c)|2f|5c)|%46|f)|(?:(?:f(?:8%8)?0%8|e)0%80%a|bg%q)f|%3(?:2(?:%(?:%6|4)6|F)|5%%63)|u(?:221[56]|002f|EFC8|F025)|1u|5c)|0x(?:2f|5c)|\\/)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect directory traversal attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- The first part matches the request URI, request arguments, and request headers (excluding the Referer header) using the SecRule directive. \\n- The second part matches various encoded characters and sequences that could be used to bypass input validation and access files outside of the intended directory. \\n\\nFor example, the regex matches strings like \\\"../\\\", \\\"%2e%2e%2f\\\", and \\\"....//\\\".\",\"explanation_id\":67,\"version\":81}\n"
  },
  {
    "id": "941130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/* @rx (?i)[\\s\\S](?:!ENTITY\\s+(?:\\S+|%\\s+\\S+)\\s+(?:PUBLIC|SYSTEM)|x(?:link:href|html|mlns)|data:text\\/html|pattern\\b.*?=|formaction|\\@import|;base64)\\b ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks in web requests by matching against various parts of the request, including cookies, headers, and arguments. \\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule for detecting attacks.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/*: These are different parts of the request that the rule will match against, including cookies, headers, arguments, and XML data.\\n- @rx: This is a flag used to indicate that the rule is a regular expression.\\n- (?i)[\\\\s\\\\S](?:!ENTITY\\\\s+(?:\\\\S+|%\\\\s+\\\\S+)\\\\s+(?:PUBLIC|SYSTEM)|x(?:link:href|html|mlns)|data:text\\\\/html|pattern\\\\b.*?=|formaction|\\\\@import|;base64)\\\\b: This is the actual regular expression that will be used to match against the request. It includes various patterns that are commonly used in attacks, such as attempts to include external entities or execute JavaScript code.\\n\\nFor example, this rule could be used to detect attempts to inject malicious code into a web application by including JavaScript code in a form field or by attempting to include an external entity in an XML document.\",\"explanation_id\":68,\"version\":73}\n"
  },
  {
    "id": "941160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:<\\w[\\s\\S]*[\\s\\/]|[\\](?:[\\s\\S]*[\\s\\/])?)(?:on(?:d(?:e(?:vice(?:(?:orienta|mo)tion|proximity|found|light)|livery(?:success|error)|activate)|r(?:ag(?:e(?:n(?:ter|d)|xit)|(?:gestur|leav)e|start|drop|over)|op)|i(?:s(?:c(?:hargingtimechange|onnect(?:ing|ed))|abled)|aling)|ata(?:setc(?:omplete|hanged)|(?:availabl|chang)e|error)|urationchange|ownloading|blclick)|Moz(?:M(?:agnifyGesture(?:Update|Start)?|ouse(?:PixelScroll|Hittest))|S(?:wipeGesture(?:Update|Start|End)?|crolledAreaChanged)|(?:(?:Press)?TapGestur|BeforeResiz)e|EdgeUI(?:C(?:omplet|ancel)|Start)ed|RotateGesture(?:Update|Start)?|A(?:udioAvailable|fterPaint))|c(?:o(?:m(?:p(?:osition(?:update|start|end)|lete)|mand(?:update)?)|n(?:t(?:rolselect|extmenu)|nect(?:ing|ed))|py)|a(?:(?:llschang|ch)ed|nplay(?:through)?|rdstatechange)|h(?:(?:arging(?:time)?ch)?ange|ecking)|(?:fstate|ell)change|u(?:echange|t)|l(?:ick|ose))|s(?:t(?:a(?:t(?:uschanged|echange)|lled|rt)|k(?:sessione|comma)nd|op)|e(?:ek(?:complete|ing|ed)|(?:lec(?:tstar)?)?t|n(?:ding|t))|(?:peech|ound)(?:start|end)|u(?:ccess|spend|bmit)|croll|how)|m(?:o(?:z(?:(?:pointerlock|fullscreen)(?:change|error)|(?:orientation|time)change|network(?:down|up)load)|use(?:(?:lea|mo)ve|o(?:ver|ut)|enter|wheel|down|up)|ve(?:start|end)?)|essage|ark)|a(?:n(?:imation(?:iteration|start|end)|tennastatechange)|fter(?:(?:scriptexecu|upda)te|print)|udio(?:process|start|end)|d(?:apteradded|dtrack)|ctivate|lerting|bort)|b(?:e(?:fore(?:(?:(?:de)?activa|scriptexecu)te|u(?:nload|pdate)|p(?:aste|rint)|c(?:opy|ut)|editfocus)|gin(?:Event)?)|oun(?:dary|ce)|l(?:ocked|ur)|roadcast|usy)|DOM(?:Node(?:Inserted(?:IntoDocument)?|Removed(?:FromDocument)?)|(?:CharacterData|Subtree)Modified|A(?:ttrModified|ctivate)|Focus(?:Out|In)|MouseScroll)|r(?:e(?:s(?:u(?:m(?:ing|e)|lt)|ize|et)|adystatechange|pea(?:tEven)?t|movetrack|trieving|ceived)|ow(?:s(?:inserted|delete)|e(?:nter|xit))|atechange)|p(?:op(?:up(?:hid(?:den|ing)|show(?:ing|n))|state)|a(?:ge(?:hide|show)|(?:st|us)e|int)|ro(?:pertychange|gress)|lay(?:ing)?)|t(?:ouch(?:(?:lea|mo)ve|en(?:ter|d)|cancel|start)|ransition(?:cancel|end|run)|ime(?:update|out)|ext)|u(?:s(?:erproximity|sdreceived)|p(?:gradeneeded|dateready)|n(?:derflow|load))|f(?:o(?:rm(?:change|input)|cus(?:out|in)?)|i(?:lterchange|nish)|ailed)|l(?:o(?:ad(?:e(?:d(?:meta)?data|nd)|start)|secapture)|evelchange|y)|g(?:amepad(?:(?:dis)?connected|button(?:down|up)|axismove)|et)|e(?:n(?:d(?:Event|ed)?|abled|ter)|rror(?:update)?|mptied|xit)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|valid|put))|o(?:(?:(?:ff|n)lin|bsolet)e|verflow(?:changed)?|pen)|SVG(?:(?:Unl|L)oad|Resize|Scroll|Abort|Error|Zoom)|h(?:e(?:adphoneschange|l[dp])|ashchange|olding)|v(?:o(?:lum|ic)e|ersion)change|w(?:a(?:it|rn)ing|heel)|key(?:press|down|up)|(?:AppComman|Loa)d|no(?:update|match)|Request|zoom)|s(?:tyle|rc)|background|formaction|lowsrc|ping)[\\s\\x08]*?=|<[^\\w<>]*(?:[^<>\\\\s]*:)?[^\\w<>]*\\W*?(?:(?:a\\W*?(?:n\\W*?i\\W*?m\\W*?a\\W*?t\\W*?e|p\\W*?p\\W*?l\\W*?e\\W*?t|u\\W*?d\\W*?i\\W*?o)|b\\W*?(?:i\\W*?n\\W*?d\\W*?i\\W*?n\\W*?g\\W*?s|a\\W*?s\\W*?e|o\\W*?d\\W*?y)|i?\\W*?f\\W*?r\\W*?a\\W*?m\\W*?e|o\\W*?b\\W*?j\\W*?e\\W*?c\\W*?t|i\\W*?m\\W*?a?\\W*?g\\W*?e?|e\\W*?m\\W*?b\\W*?e\\W*?d|p\\W*?a\\W*?r\\W*?a\\W*?m|v\\W*?i\\W*?d\\W*?e\\W*?o|l\\W*?i\\W*?n\\W*?k)[^>\\w]|s\\W*?(?:c\\W*?r\\W*?i\\W*?p\\W*?t|t\\W*?y\\W*?l\\W*?e|e\\W*?t[^>\\w]|v\\W*?g)|m\\W*?(?:a\\W*?r\\W*?q\\W*?u\\W*?e\\W*?e|e\\W*?t\\W*?a[^>\\w])|f\\W*?o\\W*?r\\W*?m)) ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:<\\\\w[\\\\s\\\\S]*[\\\\s\\\\/]|[\\\\](?:[\\\\s\\\\S]*[\\\\s\\\\/])?)(?:on(?:d(?:e(?:vice(?:(?:orienta|mo)tion|proximity|found|light)|livery(?:success|error)|activate)|r(?:ag(?:e(?:n(?:ter|d)|xit)|(?:gestur|leav)e|start|drop|over)|op)|i(?:s(?:c(?:hargingtimechange|onnect(?:ing|ed))|abled)|aling)|ata(?:setc(?:omplete|hanged)|(?:availabl|chang)e|error)|urationchange|ownloading|blclick)|Moz(?:M(?:agnifyGesture(?:Update|Start)?|ouse(?:PixelScroll|Hittest))|S(?:wipeGesture(?:Update|Start|End)?|crolledAreaChanged)|(?:(?:Press)?TapGestur|BeforeResiz)e|EdgeUI(?:C(?:omplet|ancel)|Start)ed|RotateGesture(?:Update|Start)?|A(?:udioAvailable|fterPaint))|c(?:o(?:m(?:p(?:osition(?:update|start|end)|lete)|mand(?:update)?)|n(?:t(?:rolselect|extmenu)|nect(?:ing|ed))|py)|a(?:(?:llschang|ch)ed|nplay(?:through)?|rdstatechange)|h(?:(?:arging(?:time)?ch)?ange|ecking)|(?:fstate|ell)change|u(?:echange|t)|l(?:ick|ose))|s(?:t(?:a(?:t(?:uschanged|echange)|lled|rt)|k(?:sessione|comma)nd|op)|e(?:ek(?:complete|ing|ed)|(?:lec(?:tstar)?)?t|n(?:ding|t))|(?:peech|ound)(?:start|end)|u(?:ccess|spend|bmit)|croll|how)|m(?:o(?:z(?:(?:pointerlock|fullscreen)(?:change|error)|(?:orientation|time)change|network(?:down|up)load)|use(?:(?:lea|mo)ve|o(?:ver|ut)|enter|wheel|down|up)|ve(?:start|end)?)|essage|ark)|a(?:n(?:imation(?:iteration|start|end)|tennastatechange)|fter(?:(?:scriptexecu|upda)te|print)|udio(?:process|start|end)|d(?:apteradded|dtrack)|ctivate|lerting|bort)|b(?:e(?:fore(?:(?:(?:de)?activa|scriptexecu)te|u(?:nload|pdate)|p(?:aste|rint)|c(?:opy|ut)|editfocus)|gin(?:Event)?)|oun(?:dary|ce)|l(?:ocked|ur)|roadcast|usy)|DOM(?:Node(?:Inserted(?:IntoDocument)?|Removed(?:FromDocument)?)|(?:CharacterData|Subtree)Modified|A(?:ttrModified|ctivate)|Focus(?:Out|In)|MouseScroll)|r(?:e(?:s(?:u(?:m(?:ing|e)|lt)|ize|et)|adystatechange|pea(?:tEven)?t|movetrack|trieving|ceived)|ow(?:s(?:inserted|delete)|e(?:nter|xit))|atechange)|p(?:op(?:up(?:hid(?:den|ing)|show(?:ing|n))|state)|a(?:ge(?:hide|show)|(?:st|us)e|int)|ro(?:pertychange|gress)|lay(?:ing)?)|t(?:ouch(?:(?:lea|mo)ve|en(?:ter|d)|cancel|start)|ransition(?:cancel|end|run)|ime(?:update|out)|ext)|u(?:s(?:erproximity|sdreceived)|p(?:gradeneeded|dateready)|n(?:derflow|load))|f(?:o(?:rm(?:change|input)|cus(?:out|in)?)|i(?:lterchange|nish)|ailed)|l(?:o(?:ad(?:e(?:d(?:meta)?data|nd)|start)|secapture)|evelchange|y)|g(?:amepad(?:(?:dis)?connected|button(?:down|up)|axismove)|et)|e(?:n(?:d(?:Event|ed)?|abled|ter)|rror(?:update)?|mptied|xit)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|valid|put))|o(?:(?:(?:ff|n)lin|bsolet)e|verflow(?:changed)?|pen)|SVG(?:(?:Unl|L)oad|Resize|Scroll|Abort|Error|Zoom)|h(?:e(?:adphoneschange|l[dp])|ashchange|olding)|v(?:o(?:lum|ic)e|ersion)change|w(?:a(?:it|rn)ing|heel)|key(?:press|down|up)|(?:AppComman|Loa)d|no(?:update|match)|Request|zoom)|s(?:tyle|rc)|background|formaction|lowsrc|ping)[\\\\s\\\\x08]*?=|<[^\\\\w<>]*(?:[^<>\\\\\\\\s]*:)?[^\\\\w<>]*\\\\W*?(?:(?:a\\\\W*?(?:n\\\\W*?i\\\\W*?m\\\\W*?a\\\\W*?t\\\\W*?e|p\\\\W*?p\\\\W*?l\\\\W*?e\\\\W*?t|u\\\\W*?d\\\\W*?i\\\\W*?o)|b\\\\W*?(?:i\\\\W*?n\\\\W*?d\\\\W*?i\\\\W*?n\\\\W*?g\\\\W*?s|a\\\\W*?s\\\\W*?e|o\\\\W*?d\\\\W*?y)|i?\\\\W*?f\\\\W*?r\\\\W*?a\\\\W*?m\\\\W*?e|o\\\\W*?b\\\\W*?j\\\\W*?e\\\\W*?c\\\\W*?t|i\\\\W*?m\\\\W*?a?\\\\W*?g\\\\W*?e?|e\\\\W*?m\\\\W*?b\\\\W*?e\\\\W*?d|p\\\\W*?a\\\\W*?r\\\\W*?a\\\\W*?m|v\\\\W*?i\\\\W*?d\\\\W*?e\\\\W*?o|l\\\\W*?i\\\\W*?n\\\\W*?k)[^>\\\\w]|s\\\\W*?(?:c\\\\W*?r\\\\W*?i\\\\W*?p\\\\W*?t|t\\\\W*?y\\\\W*?l\\\\W*?e|e\\\\W*?t[^>\\\\w]|v\\\\W*?g)|m\\\\W*?(?:a\\\\W*?r\\\\W*?q\\\\W*?u\\\\W*?e\\\\W*?e|e\\\\W*?t\\\\W*?a[^>\\\\w])|f\\\\W*?o\\\\W*?r\\\\W*?m))  is not a valid regex\"}\n"
  },
  {
    "id": "941170",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* @rx (?i)(?:\\W|^)(?:javascript:(?:[\\s\\S]+[=\\\\\\(\\[\\.<]|[\\s\\S]*?(?:\\bname\\b|\\\\[ux]\\d))|data:(?:(?:[a-z]\\w+\\/\\w[\\w+-]+\\w)?[;]|[\\s\\S]*?;[\\s\\S]*?\\b(?:base64|charset=)|[\\s\\S]*?[\\s\\S]*?<[\\s\\S]*?\\w[\\s\\S]*?>))|@\\W*?i\\W*?m\\W*?p\\W*?o\\W*?r\\W*?t\\W*?(?:\\/\\*[\\s\\S]*?)?(?:[\\]|\\W*?u\\W*?r\\W*?l[\\s\\S]*?\\()|\\W*?-\\W*?m\\W*?o\\W*?z\\W*?-\\W*?b\\W*?i\\W*?n\\W*?d\\W*?i\\W*?n\\W*?g[\\s\\S]*?:[\\s\\S]*?\\W*?u\\W*?r\\W*?l[\\s\\S]*?\\( ",
    "explanation": "{\"explanation\":\"This expression is used to detect and prevent potential XSS attacks on web applications. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the HTTP request where the regex should be applied\\n- @rx: indicates that this is a regular expression rule\\n- (?i): sets the regex to be case-insensitive\\n- (?:\\\\W|^): matches any non-word character or the beginning of a line\\n- (?:javascript:(?:[\\\\s\\\\S]+[=\\\\\\\\\\\\(\\\\[\\\\.<]|[\\\\s\\\\S]*?(?:\\\\bname\\\\b|\\\\\\\\[ux]\\\\d))|data:(?:(?:[a-z]\\\\w+\\\\/\\\\w[\\\\w+-]+\\\\w)?[;]|[\\\\s\\\\S]*?;[\\\\s\\\\S]*?\\\\b(?:base64|charset=)|[\\\\s\\\\S]*?[\\\\s\\\\S]*?<[\\\\s\\\\S]*?\\\\w[\\\\s\\\\S]*?>)): matches any JavaScript or data URI that may be used to execute malicious code\\n- |@\\\\W*?i\\\\W*?m\\\\W*?p\\\\W*?o\\\\W*?r\\\\W*?t\\\\W*?(?:\\\\/\\\\*[\\\\s\\\\S]*?)?(?:[\\\\]|\\\\W*?u\\\\W*?r\\\\W*?l[\\\\s\\\\S]*?\\\\()|\\\\W*?-\\\\W*?m\\\\W*?o\\\\W*?z\\\\W*?-\\\\W*?b\\\\W*?i\\\\W*?n\\\\W*?d\\\\W*?i\\\\W*?n\\\\W*?g[\\\\s\\\\S]*?:[\\\\s\\\\S]*?\\\\W*?u\\\\W*?r\\\\W*?l[\\\\s\\\\S]*?\\\\(: matches any import statement that may be used to load malicious code\\n\\nFor example, this expression would detect and prevent a potential XSS attack where an attacker injects a script into a vulnerable web application by passing a malicious script through a URL parameter or cookie.\",\"explanation_id\":69,\"version\":15}\n"
  },
  {
    "id": "941190",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:<style.*?>.*?(?:@[i\\\\\\\\]|(?:[:=]|&#x?0*(?:58|3A|61|3D);?).*?(?:[(\\\\\\\\]|&#x?0*(?:40|28|92|5C);?))) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule for web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a set of variables to be checked for the presence of the regex pattern\\n- @rx: a flag indicating that the pattern is a regular expression\\n- (?i:<style.*?>.*?(?:@[i\\\\\\\\\\\\\\\\]|(?:[:=]|&#x?0*(?:58|3A|61|3D);?).*?(?:[(\\\\\\\\\\\\\\\\]|&#x?0*(?:40|28|92|5C);?))): the actual regular expression pattern to be matched\\n\\nThe regular expression pattern matches any occurrence of the <style> tag in the web request, followed by any characters (including newlines) up to the first occurrence of one of the following:\\n- @[i\\\\\\\\]: a string starting with \\\"@\\\" followed by \\\"i\\\" or \\\"\\\\\\\" (escaped)\\n- (?:[:=]|&#x?0*(?:58|3A|61|3D);?): a non-capturing group that matches either \\\":\\\" or \\\"=\\\", or a string starting with \\\"&#\\\" followed by either \\\"58\\\", \\\"3A\\\", \\\"61\\\", or \\\"3D\\\" (representing the ASCII codes for these characters)\\n- .*?: any characters (including newlines) up to the first occurrence of one of the following:\\n  - [(\\\\\\\\]: a string starting with \\\"(\\\" or \\\"\\\\\\\" (escaped)\\n  - &#x?0*(?:40|28|92|5C);?: a string starting with \\\"&#\\\" followed by either \\\"40\\\", \\\"28\\\", \\\"92\\\", or \\\"5C\\\" (representing the ASCII codes for these characters)\\n\\nFor example, the regular expression would match the following strings:\\n- <style>body { background-image: url('http://example.com'); }</style>\\n- <style>body { background-image: url('http://example.com'); } @import url('http://example.com');</style>\\n- <style>body { background-image: url('http://example.com'); } background-color: #fff;</style>\\n\\nBut it would not match the following strings:\\n- <style>body { background-image: url('http://example.com'); }</style><script>alert('hello');</script>\\n- <style>body {\",\"explanation_id\":70,\"version\":5}\n"
  },
  {
    "id": "941210",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:j|&#x?0*(?:74|4A|106|6A);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:a|&#x?0*(?:65|41|97|61);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:v|&#x?0*(?:86|56|118|76);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:a|&#x?0*(?:65|41|97|61);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:s|&#x?0*(?:83|53|115|73);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:c|&#x?0*(?:67|43|99|63);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:r|&#x?0*(?:82|52|114|72);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:i|&#x?0*(?:73|49|105|69);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:p|&#x?0*(?:80|50|112|70);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:t|&#x?0*(?:84|54|116|74);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?::|&(?:#x?0*(?:58|3A);?|colon;)).) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential JavaScript injection attacks in HTTP requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the HTTP request where the rule should be applied\\n- @rx: indicates that the rule is a regular expression\\n- (?i:...): the actual regular expression that matches a string of characters that could potentially be a JavaScript injection attack\\n\\nFor example, the regular expression matches strings that start with \\\"j\\\", followed by any number of tabs, newlines, or the characters for tab and newline in HTML entities, followed by \\\"a\\\", then more tabs/newlines, then \\\"v\\\", and so on, until it reaches \\\"t\\\" or \\\":\\\". This pattern is often used in JavaScript injection attacks to bypass input validation filters.\",\"explanation_id\":71,\"version\":69}\n"
  },
  {
    "id": "941220",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:(?:v|&#x?0*(?:86|56|118|76);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:b|&#x?0*(?:66|42|98|62);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:s|&#x?0*(?:83|53|115|73);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:c|&#x?0*(?:67|43|99|63);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:r|&#x?0*(?:82|52|114|72);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:i|&#x?0*(?:73|49|105|69);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:p|&#x?0*(?:80|50|112|70);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?:t|&#x?0*(?:84|54|116|74);?)(?:\\t|&(?:#x?0*(?:9|13|10|A|D);?|tab;|newline;))*(?::|&(?:#x?0*(?:58|3A);?|colon;)).) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied (e.g. cookies, query parameters, XML data)\\n- @rx: indicates that the rule is a regular expression\\n- (?i:...): the actual regular expression pattern, which matches any string that contains a series of characters that spell out the word \\\"script\\\" in various ways (e.g. \\\"vbscript\\\", \\\"&#118;script\\\", \\\"s&#99;ript\\\", etc.), with optional tabs, newlines, and semicolons in between. \\n\\nFor example, this rule would match the following strings: \\n- \\\"vbscript\\\\t:\\\\nalert(1);\\\"\\n- \\\"&#x56;script\\\\t:\\\\nalert(1);\\\"\\n- \\\"s&#x63;ript\\\\t:\\\\nalert(1);\\\"\\n- \\\"vbscript:alert(1);\\\"\\n- \\\"&#x56;script:alert(1);\\\"\\n- \\\"s&#x63;ript:alert(1);\\\"\",\"explanation_id\":72,\"version\":17}\n"
  },
  {
    "id": "941230",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)<EMBED[\\s/+].*?(?:src|type).*?= ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious code injection through various HTTP request parameters. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for detecting and preventing attacks.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different request parameters that the rule will be applied to. \\n- @rx: This is a ModSecurity operator that specifies a regular expression pattern to match against the input.\\n- (?i): This is a flag that makes the regular expression case-insensitive.\\n- <EMBED[\\\\s/+].*?(?:src|type).*?= : This is the regular expression pattern that will be matched against the input. It looks for the <EMBED> tag followed by any whitespace, forward slash, or plus sign, and then looks for either the \\\"src\\\" or \\\"type\\\" attribute followed by an equal sign. \\n\\nFor example, if an HTTP request contains a parameter that includes an <EMBED> tag with a potentially malicious \\\"src\\\" or \\\"type\\\" attribute, this rule will trigger and block the request.\",\"explanation_id\":73,\"version\":25}\n"
  },
  {
    "id": "941250",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:<META[\\s/+].*?http-equiv[\\s/+]*=[\\s/+]*[\\`]?(?:(?:c|&#x?0*(?:67|43|99|63);?)|(?:r|&#x?0*(?:82|52|114|72);?)|(?:s|&#x?0*(?:83|53|115|73);?))) ",
    "explanation": "{\"explanation\":\"This expression is used to match HTTP requests that contain a specific type of meta tag. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that the rule will be applied to. In this case, it will look for the meta tag in the request cookies, arguments, or XML.\\n- @rx: This is a flag that specifies that the rule will use a regular expression to match.\\n- (?i:<META[\\\\s/+].*?http-equiv[\\\\s/+]*=[\\\\s/+]*[\\\\`]?(?:(?:c|&#x?0*(?:67|43|99|63);?)|(?:r|&#x?0*(?:82|52|114|72);?)|(?:s|&#x?0*(?:83|53|115|73);?))): This is the regular expression that will match the meta tag. It looks for the string \\\"<META\\\" followed by any number of spaces or forward slashes, then the string \\\"http-equiv\\\" followed by any number of spaces or forward slashes, and finally one of three possible strings: \\\"content-type\\\", \\\"refresh\\\", or \\\"set-cookie\\\". The regular expression is case-insensitive.\\n\\nFor example, this rule would match an HTTP request that contains the following meta tag: \\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\">\",\"explanation_id\":74,\"version\":7}\n"
  },
  {
    "id": "941270",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)<LINK[\\s/+].*?href[\\s/+]*= ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious links in HTTP requests.\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a set of variables to be checked for the presence of the regex pattern\\n- @rx: a flag indicating that the pattern is a regular expression\\n- (?i): a flag indicating that the pattern is case-insensitive\\n- <LINK[\\\\s/+].*?href[\\\\s/+]*=: the pattern to be matched, which looks for the string \\\"<LINK\\\" followed by any number of whitespace or forward slash characters, followed by the string \\\"href\\\", followed by any number of whitespace or forward slash characters\\n\\nFor example, this expression would match the following HTTP request:\\nGET /index.html HTTP/1.1\\nHost: example.com\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\nAccept-Language: en-US,en;q=0.5\\nAccept-Encoding: gzip, deflate\\nReferer: http://example.com/\\nCookie: PHPSESSID=1234567890abcdef; othercookie=foo\\nConnection: keep-alive\\nUpgrade-Insecure-Requests: 1\\n\\n<html>\\n<head>\\n<title>Example</title>\\n<link rel=\\\"stylesheet\\\" href=\\\"/style.css\\\">\\n</head>\\n<body>\\n<h1>Hello, world!</h1>\\n<a href=\\\"/malicious.html\\\">Click here for free money!</a>\\n</body>\\n</html>\\n\\nThe expression would match the string \\\"<link rel=\\\"stylesheet\\\" href=\\\"/style.css\\\">\\\" but not the string \\\"<a href=\\\"/malicious.html\\\">Click here for free money!</a>\\\".\",\"explanation_id\":75,\"version\":101}\n"
  },
  {
    "id": "941280",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)<BASE[\\s/+].*?href[\\s/+]*= ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential security threats in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule for detecting security threats. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it will look for the specified pattern in the request cookies, arguments, and XML data. \\n- @rx: This is a flag that specifies that the rule will use a regular expression to match the pattern. \\n- (?i): This is a flag that specifies that the regular expression will be case-insensitive. \\n- <BASE[\\\\s/+].*?href[\\\\s/+]*=: This is the actual regular expression that the rule will use to match the pattern. It looks for the string \\\"<BASE\\\" followed by one or more whitespace, forward slash, or plus characters, followed by any number of characters (non-greedy), followed by the string \\\"href\\\" followed by zero or more whitespace, forward slash, or plus characters. \\n\\nFor example, if a web request contains a string like \\\"<BASE href='/evil.js'>\\\", this rule will trigger and block the request.\",\"explanation_id\":76,\"version\":19}\n"
  },
  {
    "id": "941290",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)<APPLET[\\s/+>] ",
    "explanation": "{\"explanation\":\"This expression is used to detect the presence of the <APPLET> tag in HTTP requests and responses. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule for inspecting HTTP requests and responses.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that can be inspected by the rule. In this case, the rule is looking for the <APPLET> tag in any of these variables.\\n- @rx: This is a flag that specifies that the rule should use a regular expression to match the pattern.\\n- (?i)<APPLET[\\\\s/+>]: This is the regular expression pattern that the rule is looking for. It matches the <APPLET> tag, regardless of case, followed by any combination of whitespace, forward slashes, or closing angle brackets.\\n\\nFor example, if a user were to send an HTTP request with the following payload:\\n```\\nGET /index.html HTTP/1.1\\nHost: example.com\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\n<APPLET code=\\\"HelloWorld.class\\\"></APPLET>\\n```\\nThe rule would trigger and potentially block the request, depending on the configuration of the ModSecurity module.\",\"explanation_id\":77,\"version\":65}\n"
  },
  {
    "id": "941310",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx \\xbc[^\\xbe>]*[\\xbe>]|<[^\\xbe]*\\xbe ",
    "explanation": "{\"explanation\":\"This expression is used to match and block potential cross-site scripting (XSS) attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n\\n1. `SecRule` - a directive used by the ModSecurity module to define a rule for web application firewall (WAF) protection.\\n2. `REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*` - a set of variables that the rule will be applied to, including request cookies, cookie names, argument names, arguments, and XML data.\\n3. `@rx` - a flag indicating that the rule uses a regular expression pattern.\\n4. `\\\\xbc[^\\\\xbe>]*[\\\\xbe>]` - the regular expression pattern used to match potential XSS attacks. This pattern matches any character sequence that starts with the byte sequence `\\\\xbc` and ends with either the byte sequence `\\\\xbe` or the `>` character. This pattern is designed to match encoded JavaScript or HTML tags that may be used in XSS attacks.\\n5. `<[^\\\\xbe]*\\\\xbe` - an additional regular expression pattern used to match HTML tags that may be used in XSS attacks.\\n\\nFor example, this rule would block a request that includes a cookie with an encoded JavaScript payload, or an argument that includes an HTML tag with a JavaScript payload. It would also block XML data that includes an encoded JavaScript payload.\",\"explanation_id\":78,\"version\":39}\n"
  },
  {
    "id": "941370",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS|XML:/* @rx (?:self|document|this|top|window)\\s*(?:/\\*|[\\[)]).+?(?:\\]|\\*/) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential Cross-Site Scripting (XSS) attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule for web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it will check for the presence of the specified regex pattern in the cookies, cookie names, arguments, and XML data.\\n- @rx: This is a flag that specifies that the rule will use a regular expression pattern to match against the input data.\\n- (?:self|document|this|top|window): This is a non-capturing group that matches any of the specified keywords.\\n- \\\\s*: This matches any whitespace character.\\n- (?:/\\\\*|[\\\\[)]): This is another non-capturing group that matches either a forward slash followed by an asterisk or an opening square bracket or parenthesis.\\n- .+?: This matches any character one or more times, but as few times as possible.\\n- (?:\\\\]|\\\\*/): This is a non-capturing group that matches either a closing square bracket or an asterisk followed by a forward slash.\\n\\nFor example, if a user submits a request with a cookie that contains the string \\\"document/*alert(1)*/\\\", this expression will detect it as a potential XSS attack and block the request.\",\"explanation_id\":79,\"version\":25}\n"
  },
  {
    "id": "941101",
    "regex": "SecRule REQUEST_HEADERSReferer @detectXSS ",
    "explanation": "{\"explanation\":\"This expression is used to detect cross-site scripting (XSS) attacks in the Referer header of an HTTP request. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in the ModSecurity web application firewall to define a rule.\\n- \\\"REQUEST_HEADERSReferer\\\" is a variable that represents the Referer header in an HTTP request.\\n- \\\"@detectXSS\\\" is a pre-defined operator in ModSecurity that checks for common XSS attack patterns in the input.\\n\\nFor example, if an attacker tries to inject malicious code into the Referer header of an HTTP request, this expression will trigger a rule violation and block the request.\",\"explanation_id\":80,\"version\":97}\n"
  },
  {
    "id": "941150",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:s(?:tyle|rc)|href)\\b[\\s\\S]*?= ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential XSS attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. They include request cookies, request headers, arguments, and XML data.\\n- @rx: This is a transformation action that applies a regular expression to the selected variables.\\n- (?i)\\\\b(?:s(?:tyle|rc)|href)\\\\b[\\\\s\\\\S]*?= : This is the regular expression that matches potential XSS attacks. It looks for the presence of \\\"style\\\", \\\"script\\\", or \\\"href\\\" tags followed by any characters (including newlines) and an equal sign.\\n\\nFor example, if a user submits a request with a script tag in the argument field, this expression will trigger and block the request.\",\"explanation_id\":81,\"version\":45}\n"
  },
  {
    "id": "941330",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i:[\\][ ]*(?:[^a-z0-9~_: ]|in).*?(?:(?:l|\\\\\\\\u006C)(?:o|\\\\\\\\u006F)(?:c|\\\\\\\\u0063)(?:a|\\\\\\\\u0061)(?:t|\\\\\\\\u0074)(?:i|\\\\\\\\u0069)(?:o|\\\\\\\\u006F)(?:n|\\\\\\\\u006E)|(?:n|\\\\\\\\u006E)(?:a|\\\\\\\\u0061)(?:m|\\\\\\\\u006D)(?:e|\\\\\\\\u0065)|(?:o|\\\\\\\\u006F)(?:n|\\\\\\\\u006E)(?:e|\\\\\\\\u0065)(?:r|\\\\\\\\u0072)(?:r|\\\\\\\\u0072)(?:o|\\\\\\\\u006F)(?:r|\\\\\\\\u0072)|(?:v|\\\\\\\\u0076)(?:a|\\\\\\\\u0061)(?:l|\\\\\\\\u006C)(?:u|\\\\\\\\u0075)(?:e|\\\\\\\\u0065)(?:O|\\\\\\\\u004F)(?:f|\\\\\\\\u0066)).*?=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to.\\n- @rx: This is a flag that specifies that the rule is a regular expression.\\n- (?i:...): This is the actual regular expression that matches potential SQL injection attacks. It looks for any non-alphanumeric characters followed by the word \\\"in\\\" and then any non-alphanumeric characters. It then looks for any of the following keywords: \\\"location\\\", \\\"name\\\", \\\"onerror\\\", \\\"valueOf\\\". Finally, it looks for an equal sign.\\n\\nFor example, this expression will match the following strings:\\n- \\\"1 in (select * from users)\\\"\\n- \\\"name' or 1=1 --\\\"\\n- \\\"location.href='http://example.com'\\\"\\n- \\\"valueOf(document.cookie)\\\"\",\"explanation_id\":82,\"version\":49}\n"
  },
  {
    "id": "941340",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)[\\\\][ ]*(?:[^a-z0-9~_:\\ ]|in).+?[.].+?= ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n\\n1. SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting and preventing attacks. \\n2. REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the web request that the rule will be applied to. It includes cookies, arguments, and XML data. \\n3. @rx: This is a ModSecurity operator that specifies a regular expression pattern to match against the request data. \\n4. (?i)[\\\\\\\\][ ]*(?:[^a-z0-9~_:\\\\ ]|in).+?[.].+?= : This is the regular expression pattern that will be used to detect SQL injection attacks. It matches any string that starts with a backslash followed by zero or more spaces, followed by a non-alphanumeric character or the word \\\"in\\\", followed by one or more characters, a dot, one or more characters, and an equal sign. \\n\\nFor example, if a web request contains a parameter like \\\"username= ' or 1=1 --\\\", the regular expression pattern will match it and the ModSecurity rule will block the request to prevent a potential SQL injection attack.\",\"explanation_id\":83,\"version\":9}\n"
  },
  {
    "id": "920350",
    "regex": "SecRule REQUEST_HEADERSHost @rx ^[\\d.:]+$ ",
    "explanation": "{\"explanation\":\"This expression is used to match IP addresses in the Host header of an HTTP request. \\n\\nThe regex expression consists of the following parts:\\n- `^` and `$`: anchors that match the start and end of the string, respectively\\n- `[]`: a character set that matches any character within it\\n- `\\\\d`: a shorthand character class that matches any digit\\n- `.` and `:`: literal characters that match a period or colon, respectively\\n- `+`: a quantifier that matches one or more of the preceding character or character set\\n\\nFor example, this expression would match the following IP addresses in the Host header:\\n- 127.0.0.1\\n- 192.168.1.1\\n- ::1\\n- fe80::1\\n\\nHowever, it would not match domain names or other non-IP address values in the Host header.\",\"explanation_id\":84,\"version\":29}\n"
  },
  {
    "id": "920470",
    "regex": "SecRule REQUEST_HEADERSContent-Type !@rx ^[\\w/.+-]+(?:\\s?;\\s?(?:action|boundary|charset|type|start(?:-info)?)\\s?=\\s?[\\\\w.()+/:=?<>@-]+)*$ ",
    "explanation": "{\"explanation\":\"This expression is used to match against the \\\"Content-Type\\\" header in an HTTP request and ensure that it contains valid parameters. \\n\\nThe regex expression consists of several parts: \\n- \\\"^[\\\\w/.+-]+\\\" matches the content type itself, which can contain letters, numbers, and certain symbols. \\n- \\\"(?:\\\\s?;\\\\s?(?:action|boundary|charset|type|start(?:-info)?)\\\\s?=\\\\s?[\\\\\\\\w.()+/:=?<>@-]+)*\\\" matches any parameters that may follow the content type. These parameters are separated by semicolons and can include \\\"action\\\", \\\"boundary\\\", \\\"charset\\\", \\\"type\\\", and \\\"start-info\\\". Each parameter is followed by an equals sign and a value, which can contain letters, numbers, and certain symbols. \\n\\nFor example, this expression would match against the following Content-Type header: \\n\\\"multipart/form-data; boundary=---------------------------1234567890\\\" \\n\\nHowever, it would not match against the following Content-Type header: \\n\\\"application/json; charset=utf-8; format=pretty\\\" \\n\\nThis expression is commonly used in web application firewalls to prevent attacks such as SQL injection and cross-site scripting by ensuring that the Content-Type header is properly formatted.\",\"explanation_id\":85,\"version\":23}\n"
  },
  {
    "id": "920275",
    "regex": "SecRule REQUEST_HEADERSSec-Fetch-User @validateByteRange 32343842-59616365-909597-122 ",
    "explanation": "{\"explanation\":\"This expression is used to validate the byte range of the \\\"Sec-Fetch-User\\\" request header in a web application. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- \\\"REQUEST_HEADERS\\\" specifies that the rule will be applied to the request headers.\\n- \\\"Sec-Fetch-User\\\" is the name of the request header that will be validated.\\n- \\\"@validateByteRange\\\" is a ModSecurity operator that checks if the value of the specified header falls within a given byte range.\\n- \\\"32343842-59616365-909597-122\\\" is the byte range that the value of the \\\"Sec-Fetch-User\\\" header must fall within.\\n\\nFor example, if the value of the \\\"Sec-Fetch-User\\\" header is \\\"B8YaCe\\\", it will be considered valid because it falls within the byte range specified in the regex expression. However, if the value of the header is \\\"abc123\\\", it will be considered invalid because it does not fall within the specified byte range.\",\"explanation_id\":86,\"version\":83}\n"
  },
  {
    "id": "921110",
    "regex": "SecRule ARGS_NAMES|ARGS|REQUEST_BODY|XML/* @rx (?:get|post|head|options|connect|put|delete|trace|track|patch|propfind|propatch|mkcol|copy|move|lock|unlock)\\s+(?:\\/|\\w)[^\\s]*(?:\\s+http\\/\\d|[\\r\\n]) ",
    "explanation": "{\"explanation\":\"This expression is used to match HTTP request methods and URLs in web application firewall rules.\\n\\nThe regex expression consists of several parts:\\n- `SecRule`: This is a directive used in ModSecurity rules to define a security rule.\\n- `ARGS_NAMES|ARGS|REQUEST_BODY|XML/*`: This specifies the locations in the HTTP request where the regex should be applied. It can match against the names of arguments, the values of arguments, the request body, or any XML data in the request.\\n- `@rx`: This specifies that the following string is a regular expression.\\n- `(?:get|post|head|options|connect|put|delete|trace|track|patch|propfind|propatch|mkcol|copy|move|lock|unlock)`: This matches any of the listed HTTP request methods.\\n- `\\\\s+`: This matches one or more whitespace characters.\\n- `(?:\\\\/|\\\\w)`: This matches either a forward slash or a word character (letter, digit, or underscore).\\n- `[^\\\\s]*`: This matches zero or more non-whitespace characters.\\n- `(?:\\\\s+http\\\\/\\\\d|[\\\\r\\\\n])`: This matches either a whitespace character followed by \\\"http/\\\" and a digit, or a carriage return or newline character.\\n\\nFor example, this regex could match the following HTTP request:\\n```\\nPOST /login.php HTTP/1.1\\nHost: example.com\\nContent-Type: application/x-www-form-urlencoded\\nContent-Length: 25\\n\\nusername=johndoe&password=1234\\n```\",\"explanation_id\":87,\"version\":17}\n"
  },
  {
    "id": "901410",
    "regex": "SecRule UNIQUE_ID \"@rx ^.\"",
    "explanation": "{\"explanation\":\"This expression is used to match any string that starts with any character. \\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `UNIQUE_ID`: This is a variable that holds a unique identifier for each request.\\n- `@rx`: This is a keyword used to indicate that the following string is a regular expression.\\n- `^`: This is a metacharacter used to match the beginning of a string.\\n- `.`: This is a metacharacter used to match any character.\\n\\nFor example, this expression would match the following strings: \\\"hello\\\", \\\"123\\\", \\\"!\\\", etc.\",\"explanation_id\":88,\"version\":57}\n"
  },
  {
    "id": "932115",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?i)(?:;|\\{|\\||\\|\\||&|&&|\\n|\\r|`)\\s*[\\(@\\\\\\s]*(?:[\\w\\\\./]+/|[\\\\\\\\\\\\^]*\\w[\\\\\\\\\\\\^]*:.*\\\\\\\\|[\\^\\.\\w \\/\\\\\\\\]*\\\\\\\\)?[\\\\^]*(?:s[\\\\^]*(?:y[\\\\^]*s[\\\\^]*(?:t[\\\\^]*e[\\\\^]*m[\\\\^]*(?:p[\\\\^]*r[\\\\^]*o[\\\\^]*p[\\\\^]*e[\\\\^]*r[\\\\^]*t[\\\\^]*i[\\\\^]*e[\\\\^]*s[\\\\^]*(?:d[\\\\^]*a[\\\\^]*t[\\\\^]*a[\\\\^]*e[\\\\^]*x[\\\\^]*e[\\\\^]*c[\\\\^]*u[\\\\^]*t[\\\\^]*i[\\\\^]*o[\\\\^]*n[\\\\^]*p[\\\\^]*r[\\\\^]*e[\\\\^]*v[\\\\^]*e[\\\\^]*n[\\\\^]*t[\\\\^]*i[\\\\^]*o[\\\\^]*n|(?:p[\\\\^]*e[\\\\^]*r[\\\\^]*f[\\\\^]*o[\\\\^]*r[\\\\^]*m[\\\\^]*a[\\\\^]*n[\\\\^]*c|h[\\\\^]*a[\\\\^]*r[\\\\^]*d[\\\\^]*w[\\\\^]*a[\\\\^]*r)[\\\\^]*e|a[\\\\^]*d[\\\\^]*v[\\\\^]*a[\\\\^]*n[\\\\^]*c[\\\\^]*e[\\\\^]*d)|i[\\\\^]*n[\\\\^]*f[\\\\^]*o)|k[\\\\^]*e[\\\\^]*y|d[\\\\^]*m)|h[\\\\^]*(?:o[\\\\^]*(?:w[\\\\^]*(?:g[\\\\^]*r[\\\\^]*p|m[\\\\^]*b[\\\\^]*r)[\\\\^]*s|r[\\\\^]*t[\\\\^]*c[\\\\^]*u[\\\\^]*t)|e[\\\\^]*l[\\\\^]*l[\\\\^]*r[\\\\^]*u[\\\\^]*n[\\\\^]*a[\\\\^]*s|u[\\\\^]*t[\\\\^]*d[\\\\^]*o[\\\\^]*w[\\\\^]*n|r[\\\\^]*p[\\\\^]*u[\\\\^]*b[\\\\^]*w|a[\\\\^]*r[\\\\^]*e|i[\\\\^]*f[\\\\^]*t)|e[\\\\^]*(?:t[\\\\^]*(?:(?:x[\\\\^]*)?(?:[\\s;]|\\.|/|<|>).*|l[\\\\^]*o[\\\\^]*c[\\\\^]*a[\\\\^]*l)|c[\\\\^]*p[\\\\^]*o[\\\\^]*l|l[\\\\^]*e[\\\\^]*c[\\\\^]*t)|c[\\\\^]*(?:h[\\\\^]*t[\\\\^]*a[\\\\^]*s[\\\\^]*k[\\\\^]*s|l[\\\\^]*i[\\\\^]*s[\\\\^]*t)|u[\\\\^]*b[\\\\^]*(?:i[\\\\^]*n[\\\\^]*a[\\\\^]*c[\\\\^]*l|s[\\\\^]*t)|t[\\\\^]*a[\\\\^]*r[\\\\^]*t[\\\\^]*(?:[\\s;]|\\.|/|<|>).*|i[\\\\^]*g[\\\\^]*v[\\\\^]*e[\\\\^]*r[\\\\^]*i[\\\\^]*f|l[\\\\^]*(?:e[\\\\^]*e[\\\\^]*p|m[\\\\^]*g[\\\\^]*r)|o[\\\\^]*r[\\\\^]*t|f[\\\\^]*c|v[\\\\^]*n)|p[\\\\^]*(?:s[\\\\^]*(?:s[\\\\^]*(?:h[\\\\^]*u[\\\\^]*t[\\\\^]*d[\\\\^]*o[\\\\^]*w[\\\\^]*n|e[\\\\^]*r[\\\\^]*v[\\\\^]*i[\\\\^]*c[\\\\^]*e|u[\\\\^]*s[\\\\^]*p[\\\\^]*e[\\\\^]*n[\\\\^]*d)|l[\\\\^]*(?:o[\\\\^]*g[\\\\^]*(?:g[\\\\^]*e[\\\\^]*d[\\\\^]*o[\\\\^]*n|l[\\\\^]*i[\\\\^]*s[\\\\^]*t)|i[\\\\^]*s[\\\\^]*t)|p[\\\\^]*(?:a[\\\\^]*s[\\\\^]*s[\\\\^]*w[\\\\^]*d|i[\\\\^]*n[\\\\^]*g)|g[\\\\^]*e[\\\\^]*t[\\\\^]*s[\\\\^]*i[\\\\^]*d|e[\\\\^]*x[\\\\^]*e[\\\\^]*c|f[\\\\^]*i[\\\\^]*l[\\\\^]*e|i[\\\\^]*n[\\\\^]*f[\\\\^]*o|k[\\\\^]*i[\\\\^]*l[\\\\^]*l)|o[\\\\^]*(?:w[\\\\^]*e[\\\\^]*r[\\\\^]*(?:s[\\\\^]*h[\\\\^]*e[\\\\^]*l[\\\\^]*l(?:[\\\\^]*_[\\\\^]*i[\\\\^]*s[\\\\^]*e)?|c[\\\\^]*f[\\\\^]*g)|r[\\\\^]*t[\\\\^]*q[\\\\^]*r[\\\\^]*y|p[\\\\^]*d)|r[\\\\^]*(?:i[\\\\^]*n[\\\\^]*t[\\\\^]*(?:(?:[\\s;]|\\.|/|<|>).*|b[\\\\^]*r[\\\\^]*m)|n[\\\\^]*(?:c[\\\\^]*n[\\\\^]*f[\\\\^]*g|m[\\\\^]*n[\\\\^]*g[\\\\^]*r)|o[\\\\^]*m[\\\\^]*p[\\\\^]*t)|a[\\\\^]*t[\\\\^]*h[\\\\^]*(?:p[\\\\^]*i[\\\\^]*n[\\\\^]*g|(?:[\\s;]|\\.|/|<|>).*)|e[\\\\^]*r[\\\\^]*(?:l(?:[\\\\^]*(?:s[\\\\^]*h|5))?|f[\\\\^]*m[\\\\^]*o[\\\\^]*n)|y[\\\\^]*t[\\\\^]*h[\\\\^]*o[\\\\^]*n(?:[\\\\^]*(?:3(?:[\\\\^]*m)?|2))?|k[\\\\^]*g[\\\\^]*m[\\\\^]*g[\\\\^]*r|h[\\\\^]*p(?:[\\\\^]*[57])?|u[\\\\^]*s[\\\\^]*h[\\\\^]*d|i[\\\\^]*n[\\\\^]*g)|r[\\\\^]*(?:e[\\\\^]*(?:(?:p[\\\\^]*l[\\\\^]*a[\\\\^]*c[\\\\^]*e|n(?:[\\\\^]*a[\\\\^]*m[\\\\^]*e)?|s[\\\\^]*e[\\\\^]*t)[\\\\^]*(?:[\\s;]|\\.|/|<|>).*|g[\\\\^]*(?:s[\\\\^]*v[\\\\^]*r[\\\\^]*3[\\\\^]*2|e[\\\\^]*d[\\\\^]*i[\\\\^]*t|(?:[\\s;]|\\.|/|<|>).*|i[\\\\^]*n[\\\\^]*i)|c[\\\\^]*(?:d[\\\\^]*i[\\\\^]*s[\\\\^]*c|o[\\\\^]*v[\\\\^]*e[\\\\^]*r)|k[\\\\^]*e[\\\\^]*y[\\\\^]*w[\\\\^]*i[\\\\^]*z)|u[\\\\^]*(?:n[\\\\^]*(?:d[\\\\^]*l[\\\\^]*l[\\\\^]*3[\\\\^]*2|a[\\\\^]*s)|b[\\\\^]*y[\\\\^]*(?:1(?:[\\\\^]*[89])?|2[\\\\^]*[012]))|a[\\\\^]*(?:s[\\\\^]*(?:p[\\\\^]*h[\\\\^]*o[\\\\^]*n[\\\\^]*e|d[\\\\^]*i[\\\\^]*a[\\\\^]*l)|r[\\\\^]*(?:[\\s;]|\\.|/|<|>).*)|m[\\\\^]*(?:(?:d[\\\\^]*i[\\\\^]*r[\\\\^]*)?(?:[\\s;]|\\.|/|<|>).*|t[\\\\^]*s[\\\\^]*h[\\\\^]*a[\\\\^]*r[\\\\^]*e)|o[\\\\^]*(?:u[\\\\^]*t[\\\\^]*e[\\\\^]*(?:[\\s;]|\\.|/|<|>).*|b[\\\\^]*o[\\\\^]*c[\\\\^]*o[\\\\^]*p[\\\\^]*y)|s[\\\\^]*(?:t[\\\\^]*r[\\\\^]*u[\\\\^]*i|y[\\\\^]*n[\\\\^]*c)|d[\\\\^]*(?:[\\s;]|\\.|/|<|>).*)|t[\\\\^]*(?:a[\\\\^]*(?:s[\\\\^]*k[\\\\^]*(?:k[\\\\^]*i[\\\\^]*l[\\\\^]*l|l[\\\\^]*i[\\\\^]*s[\\\\^]*t|s[\\\\^]*c[\\\\^]*h[\\\\^]*d|m[\\\\^]*g[\\\\^]*r)|k[\\\\^]*e[\\\\^]*o[\\\\^]*w[\\\\^]*n)|(?:i[\\\\^]*m[\\\\^]*e[\\\\^]*o[\\\\^]*u|p[\\\\^]*m[\\\\^]*i[\\\\^]*n[\\\\^]*i|e[\\\\^]*l[\\\\^]*n[\\\\^]*e|l[\\\\^]*i[\\\\^]*s)[\\\\^]*t|s[\\\\^]*(?:d[\\\\^]*i[\\\\^]*s[\\\\^]*c[\\\\^]*o|s[\\\\^]*h[\\\\^]*u[\\\\^]*t[\\\\^]*d)[\\\\^]*n|y[\\\\^]*p[\\\\^]*e[\\\\^]*(?:p[\\\\^]*e[\\\\^]*r[\\\\^]*f|(?:[\\s;]|\\.|/|<|>).*)|r[\\\\^]*(?:a[\\\\^]*c[\\\\^]*e[\\\\^]*r[\\\\^]*t|e[\\\\^]*e))|w[\\\\^]*(?:i[\\\\^]*n[\\\\^]*(?:d[\\\\^]*i[\\\\^]*f[\\\\^]*f|m[\\\\^]*s[\\\\^]*d[\\\\^]*p|v[\\\\^]*a[\\\\^]*r|r[\\\\^]*[ms])|u[\\\\^]*(?:a[\\\\^]*(?:u[\\\\^]*c[\\\\^]*l[\\\\^]*t|p[\\\\^]*p)|s[\\\\^]*a)|s[\\\\^]*c[\\\\^]*(?:r[\\\\^]*i[\\\\^]*p[\\\\^]*t|u[\\\\^]*i)|e[\\\\^]*v[\\\\^]*t[\\\\^]*u[\\\\^]*t[\\\\^]*i[\\\\^]*l|m[\\\\^]*i[\\\\^]*(?:m[\\\\^]*g[\\\\^]*m[\\\\^]*t|c)|a[\\\\^]*i[\\\\^]*t[\\\\^]*f[\\\\^]*o[\\\\^]*r|h[\\\\^]*o[\\\\^]*a[\\\\^]*m[\\\\^]*i|g[\\\\^]*e[\\\\^]*t)|u[\\\\^]*(?:s[\\\\^]*(?:e[\\\\^]*r[\\\\^]*a[\\\\^]*c[\\\\^]*c[\\\\^]*o[\\\\^]*u[\\\\^]*n[\\\\^]*t[\\\\^]*c[\\\\^]*o[\\\\^]*n[\\\\^]*t[\\\\^]*r[\\\\^]*o[\\\\^]*l[\\\\^]*s[\\\\^]*e[\\\\^]*t[\\\\^]*t[\\\\^]*i[\\\\^]*n[\\\\^]*g[\\\\^]*s|r[\\\\^]*s[\\\\^]*t[\\\\^]*a[\\\\^]*t)|n[\\\\^]*(?:r[\\\\^]*a[\\\\^]*r|z[\\\\^]*i[\\\\^]*p))|q[\\\\^]*(?:u[\\\\^]*e[\\\\^]*r[\\\\^]*y[\\\\^]*(?:[\\s;]|\\.|/|<|>).*|p[\\\\^]*r[\\\\^]*o[\\\\^]*c[\\\\^]*e[\\\\^]*s[\\\\^]*s|w[\\\\^]*i[\\\\^]*n[\\\\^]*s[\\\\^]*t[\\\\^]*a|g[\\\\^]*r[\\\\^]*e[\\\\^]*p)|o[\\\\^]*(?:d[\\\\^]*b[\\\\^]*c[\\\\^]*(?:a[\\\\^]*d[\\\\^]*3[\\\\^]*2|c[\\\\^]*o[\\\\^]*n[\\\\^]*f)|p[\\\\^]*e[\\\\^]*n[\\\\^]*f[\\\\^]*i[\\\\^]*l[\\\\^]*e[\\\\^]*s)|v[\\\\^]*(?:o[\\\\^]*l[\\\\^]*(?:[\\s;]|\\.|/|<|>).*|e[\\\\^]*r[\\\\^]*i[\\\\^]*f[\\\\^]*y)|x[\\\\^]*c[\\\\^]*(?:a[\\\\^]*c[\\\\^]*l[\\\\^]*s|o[\\\\^]*p[\\\\^]*y)|z[\\\\^]*i[\\\\^]*p[\\\\^]*(?:[\\s;]|\\.|/|<|>).*)(?:\\.[\\\\^]*\\w+)?\\b ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks in web application security. \\n\\nThe regex expression consists of several parts, including various characters and keywords that may indicate malicious intent. It searches for patterns that may indicate an attempt to execute arbitrary code or access sensitive information. \\n\\nFor example, it looks for strings that contain keywords such as \\\"eval\\\", \\\"exec\\\", \\\"system\\\", \\\"shell\\\", \\\"passthru\\\", \\\"assert\\\", \\\"include\\\", \\\"require\\\", \\\"fopen\\\", \\\"readfile\\\", \\\"fwrite\\\", \\\"file_put_contents\\\", \\\"mail\\\", \\\"header\\\", \\\"base64_decode\\\", \\\"gzinflate\\\", \\\"preg_replace\\\", \\\"str_replace\\\", \\\"base64_encode\\\", \\\"urlencode\\\", \\\"urldecode\\\", \\\"ini_set\\\", \\\"error_reporting\\\", \\\"ini_restore\\\", \\\"extract\\\", \\\"parse_str\\\", \\\"putenv\\\", \\\"define\\\", \\\"unlink\\\", \\\"rmdir\\\", \\\"mkdir\\\", \\\"chmod\\\", \\\"chown\\\", \\\"chgrp\\\", \\\"symlink\\\", \\\"link\\\", \\\"rename\\\", \\\"copy\\\", \\\"move_uploaded_file\\\", \\\"file_exists\\\", \\\"is_file\\\", \\\"is_dir\\\", \\\"file_get_contents\\\", \\\"file\\\", \\\"glob\\\", \\\"scandir\\\", \\\"dir\\\", \\\"opendir\\\", \\\"closedir\\\", \\\"curl\\\", \\\"socket\\\", \\\"fsockopen\\\", \\\"pfsockopen\\\", \\\"stream_socket_client\\\", \\\"stream_socket_server\\\", \\\"stream_context_create\\\", \\\"stream_set_timeout\\\", \\\"stream_set_blocking\\\", \\\"stream_select\\\", \\\"stream_get_contents\\\", \\\"stream_copy_to_stream\\\", \\\"stream_wrapper_register\\\", \\\"stream_filter_append\\\", \\\"stream_bucket_append\\\", \\\"stream_context_set_option\\\", \\\"stream_context_get_options\\\", \\\"stream_socket_enable_crypto\\\", \\\"stream_socket_accept\\\", \\\"stream_socket_recvfrom\\\", \\\"stream_socket_sendto\\\", \\\"stream_socket_shutdown\\\", \\\"stream_socket_get_name\\\", \\\"stream_socket_pair\\\", \\\"stream_socket_recvmsg\\\", \\\"stream_socket_sendmsg\\\", \\\"stream_socket_get_option\\\", \\\"stream_socket_pair\\\", \\\"stream_socket_recvmsg\\\", \\\"stream_socket_sendmsg\\\", \\\"stream_socket_get_option\\\", \\\"stream_socket_recvmsg\\\", \\\"stream_socket_sendmsg\\\", \\\"stream_socket_get_option\\\", \\\"stream_socket_recvmsg\\\", \\\"stream_socket_sendmsg\\\", \\\"stream_socket_get_option\\\", \\\"stream_socket_recvmsg\\\", \\\"stream_socket_sendmsg\\\", \\\"stream_socket_get_option\\\", \\\"stream_socket_recvmsg\\\", \\\"stream_socket_sendmsg\\\", \\\"stream_socket_get_option\\\", \\\"stream_socket_recvmsg\\\", \\\"stream_socket_sendmsg\\\", \\\"stream_socket_get_option\\\", \\\"stream_socket_recvmsg\\\", \\\"stream_socket_sendmsg\\\", \\\"\",\"explanation_id\":89,\"version\":97}\n"
  },
  {
    "id": "932130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:\\$(?:\\((?:\\(.*\\)|.*)\\)|\\{.*\\})|[<>]\\(.*\\)) ",
    "explanation": "{\"explanation\":\"This expression is used to identify potential injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, and XML data.\\n- @rx: This is a ModSecurity operator that specifies a regular expression pattern to match against the selected variables.\\n- (?:\\\\$(?:\\\\((?:\\\\(.*\\\\)|.*)\\\\)|\\\\{.*\\\\})|[<>]\\\\(.*\\\\)): This is the regular expression pattern that matches potential injection attacks. It looks for either a variable that starts with a dollar sign and is followed by parentheses or curly braces, or a string that starts with either a less than or greater than symbol and is followed by parentheses.\\n\\nFor example, this expression would match the following inputs:\\n- $(_GET['id'])\\n- ${_POST['username']}\\n- <script>alert('hello')</script>\",\"explanation_id\":90,\"version\":95}\n"
  },
  {
    "id": "932200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx ([*?`\\\\][^/\\n]+/|\\$[({\\[#a-zA-Z0-9]|/[^/]+?[*?`\\\\]) ",
    "explanation": "{\"explanation\":\"This expression is used to match potentially malicious input in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting and blocking potentially malicious requests. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the request that the rule will apply to. It will look for the regex pattern in the values of cookies, cookie names, argument names, arguments, and XML data. \\n- @rx: This is a ModSecurity operator that specifies that the following string is a regular expression. \\n- ([*?`\\\\\\\\][^/\\\\n]+/|\\\\$[({\\\\[#a-zA-Z0-9]|/[^/]+?[*?`\\\\\\\\]): This is the actual regular expression pattern that will be matched against the request data. It looks for various patterns that could indicate malicious input, such as special characters followed by alphanumeric characters, or non-greedy matches for forward slashes. \\n\\nFor example, this expression could match input like \\\"'; DROP TABLE users--\\\" or \\\"/etc/passwd\\\".\",\"explanation_id\":91,\"version\":43}\n"
  },
  {
    "id": "954100",
    "regex": "SecRule RESPONSE_BODY [a-z]inetpub\\b ",
    "explanation": "{\"explanation\":\"This expression is used to match any occurrence of the word \\\"inetpub\\\" in the response body of an HTTP request.\\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"RESPONSE_BODY\\\" is a variable that represents the response body of an HTTP request.\\n- \\\"[a-z]\\\" is a character class that matches any lowercase letter.\\n- \\\"\\\\b\\\" is a word boundary that matches the end of a word.\\n\\nFor example, if the response body contains the string \\\"C:\\\\inetpub\\\\wwwroot\\\\index.html\\\", this expression would match the word \\\"inetpub\\\".\",\"explanation_id\":202,\"version\":82}"
  },
  {
    "id": "954130",
    "regex": "SecRule RESPONSE_STATUS \"!^404$\"",
    "explanation": "{\"explanation\":\"This expression is used to match any response status that is not equal to 404. It is commonly used in web application firewalls to block or allow certain responses based on their status codes.\\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- RESPONSE_STATUS: This is a variable that represents the HTTP response status code.\\n- \\\"!^404$\\\": This is a negative lookahead assertion that matches any response status code that does not start with 404 and end with nothing else.\\n\\nFor example, if the response status is 200, the expression will match it because it does not start with 404. However, if the response status is 404, the expression will not match it because it starts with 404.\",\"explanation_id\":204,\"version\":92}"
  },
  {
    "id": "921110",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* (?:\\n|\\r)+(?:get|post|head|options|connect|put|delete|trace|propfind|propatch|mkcol|copy|move|lock|unlock)\\s+ ",
    "explanation": "{\"explanation\":\"This expression is used to detect HTTP requests in web application firewall rules.\\nThe regex expression consists of three parts: \\n1. `SecRule ARGS_NAMES|ARGS|XML/*`: This specifies the location of the input data to be matched against the regex. It can be in the form of request parameters (ARGS), request headers (ARGS_NAMES), or XML data (XML/*).\\n2. `(?:\\\\n|\\\\r)+`: This matches one or more occurrences of a newline character or a carriage return character.\\n3. `(?:get|post|head|options|connect|put|delete|trace|propfind|propatch|mkcol|copy|move|lock|unlock)\\\\s+`: This matches one or more occurrences of an HTTP method (GET, POST, etc.) followed by one or more whitespace characters.\\n\\nFor example, the regex expression can match the following HTTP request:\\n```\\nPOST /login HTTP/1.1\\nHost: example.com\\nContent-Type: application/x-www-form-urlencoded\\nContent-Length: 27\\n\\nusername=johndoe&password=1234\\n```\",\"explanation_id\":205,\"version\":60}"
  },
  {
    "id": "921130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?:\\bhttp\\/(?:0\\.9|1\\.[01])|<(?:html|meta)\\b) ",
    "explanation": "{\"explanation\":\"This expression is used to identify potential HTTP protocol violations and HTML injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the web request that the rule will be applied to. \\n- (?:\\\\bhttp\\\\/(?:0\\\\.9|1\\\\.[01])|<(?:html|meta)\\\\b): This is the pattern that the rule will match against. It consists of two parts: \\n  - \\\\bhttp\\\\/(?:0\\\\.9|1\\\\.[01])\\\\b: This matches any HTTP version that is not 1.1 or 1.0, or HTTP 0.9. This is because these versions are not commonly used and may indicate an attack. \\n  - <(?:html|meta)\\\\b: This matches any HTML tag that starts with \\\"html\\\" or \\\"meta\\\". This is because these tags can be used to inject malicious code into a web page. \\n\\nFor example, if a web request contains a cookie with the name \\\"__utm\\\", the rule will not be applied to that cookie. However, if the request contains an HTML tag that starts with \\\"html\\\" or \\\"meta\\\", the rule will be triggered and the request will be blocked or logged, depending on the configuration of ModSecurity.\",\"explanation_id\":207,\"version\":5}"
  },
  {
    "id": "921160",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* (?:\\n|\\r)+(?:\\s+|location|refresh|(?:set-)?cookie|(X-)?(?:forwarded-(?:for|host|server)|host|via|remote-ip|remote-addr|originating-IP))\\s*: ",
    "explanation": "{\"explanation\":\"This expression is used to match HTTP headers in web application firewall rules. \\n\\nThe regex expression consists of several parts: \\n- `SecRule`: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- `ARGS_NAMES|ARGS|XML/*`: This is a regular expression that matches any of the following: parameter names, parameter values, or XML data.\\n- `(?:\\\\n|\\\\r)+`: This matches one or more occurrences of a newline or carriage return character.\\n- `(?:\\\\s+|location|refresh|(?:set-)?cookie|(X-)?(?:forwarded-(?:for|host|server)|host|via|remote-ip|remote-addr|originating-IP))`: This matches one of the following: one or more whitespace characters, the words \\\"location\\\" or \\\"refresh\\\", the word \\\"cookie\\\" or \\\"set-cookie\\\", or any of the listed HTTP headers (e.g. X-Forwarded-For, Remote-Addr).\\n\\nFor example, this expression could be used in a ModSecurity rule to block requests that contain certain HTTP headers, such as X-Forwarded-For or Remote-Addr, which could be used to bypass IP-based access controls.\",\"explanation_id\":209,\"version\":32}"
  },
  {
    "id": "921151",
    "regex": "SecRule ARGS_GET \"(\\n|\\r)\"",
    "explanation": "{\"explanation\":\"This expression is used to detect new line or carriage return characters in the ARGS_GET parameter of an HTTP request. \\n\\nThe regex expression consists of two parts: \\n1. \\\"(\\\\n|\\\\r)\\\" - This is a capturing group that matches either a new line character (\\\\n) or a carriage return character (\\\\r). \\n2. SecRule ARGS_GET - This is a ModSecurity rule that applies the regex expression to the ARGS_GET parameter of an HTTP request. \\n\\nFor example, if an attacker tries to inject a new line character into the ARGS_GET parameter in order to bypass input validation, this expression can be used to detect and block the malicious request.\",\"explanation_id\":211,\"version\":7}"
  },
  {
    "id": "942170",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:(select|;)\\s+(?:benchmark|if|sleep)\\s*?\\(\\s*?\\(?\\s*?\\w+)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web application requests.\\nThe regex expression consists of several parts:\\n- SecRule: a ModSecurity directive that defines a rule to be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a set of request data locations to be checked for SQL injection attempts.\\n- (?i:(?:(select|;)\\\\s+(?:benchmark|if|sleep)\\\\s*?\\\\(\\\\s*?\\\\(?\\\\s*?\\\\w+)): the actual regular expression that matches SQL injection attempts. It looks for the keywords \\\"select\\\" or \\\";\\\" followed by whitespace and one of the SQL injection functions \\\"benchmark\\\", \\\"if\\\", or \\\"sleep\\\", followed by optional whitespace and parentheses, and finally a word character.\\n\\nFor example, this expression would match the following SQL injection attempts:\\n- SELECT * FROM users WHERE username = 'admin' AND password = 'password' OR SLEEP(5)\\n- ; DROP TABLE users;\\n- SELECT IF(1=1,'true','false') FROM users\\n\\nOverall, this expression is a security measure to prevent malicious users from exploiting vulnerabilities in web applications by injecting SQL code into their requests.\",\"explanation_id\":213,\"version\":80}"
  },
  {
    "id": "942190",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:\\s*?(?:exec|execute).*?(?:\\W)xp_cmdshell)|(?:[\\`]\\s*?!\\s*?[\\`\\w])|(?:from\\W+information_schema\\W)|(?:(?:(?:current_)?user|database|schema|connection_id)\\s*?\\([^\\)]*?)|(?:[\\`];?\\s*?(?:select|union|having)\\b\\s*?[^\\s])|(?:\\wiif\\s*?\\()|(?:(?:exec|execute)\\s+master\\.)|(?:union select @)|(?:union[\\w(\\s]*?select)|(?:select.*?\\w?user\\()|(?:into[\\s+]+(?:dump|out)file\\s*?[\\`])) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web application requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the request where the rule should be applied (e.g. cookies, arguments, XML data)\\n- (?i:...): a non-capturing group that contains the actual regular expression pattern\\n- (?:\\\\s*?(?:exec|execute).*?(?:\\\\W)xp_cmdshell): matches variations of the \\\"exec\\\" or \\\"execute\\\" keywords followed by the \\\"xp_cmdshell\\\" command, which can be used to execute arbitrary commands on the server\\n- (?:[\\\\`]\\\\s*?!\\\\s*?[\\\\`\\\\w]): matches the use of the \\\"!\\\" operator in combination with backticks, which can be used to execute shell commands\\n- (?:from\\\\W+information_schema\\\\W): matches the use of the \\\"information_schema\\\" database, which can be used to obtain sensitive information about the database structure\\n- (?:(?:(?:current_)?user|database|schema|connection_id)\\\\s*?\\\\([^\\\\)]*?): matches various functions that can be used to obtain sensitive information about the database or the current user\\n- (?:[\\\\`];?\\\\s*?(?:select|union|having)\\\\b\\\\s*?[^\\\\s]): matches variations of SQL injection attacks that use the \\\"select\\\", \\\"union\\\", or \\\"having\\\" keywords\\n- (?:\\\\wiif\\\\s*?\\\\(): matches the \\\"iif\\\" function, which can be used to execute arbitrary code\\n- (?:exec|execute)\\\\s+master\\\\.): matches variations of the \\\"exec\\\" or \\\"execute\\\" keywords followed by the \\\"master\\\" database, which can be used to execute arbitrary commands on the server\\n- (?:union select @): matches variations of SQL injection attacks that use the \\\"union\\\" keyword followed by a variable\\n- (?:union[\\\\w(\\\\s]*?select): matches variations of SQL injection attacks that use the \\\"union\\\" keyword followed by a \\\"select\\\" statement\\n- (?:select.*?\\\\w?user\\\\()): matches variations of SQL injection attacks that use the \\\"select\\\" keyword followed by a function that can be used to obtain sensitive information about the current user\\n- (?:into\",\"explanation_id\":214,\"version\":78}"
  },
  {
    "id": "942220",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:^(-0000023456|4294967295|4294967296|2147483648|2147483647|0000012345|-2147483648|-2147483649|0000023456|3.0.00738585072007e-308|1e309)$)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect and block potential attacks that involve inputting specific numerical values in cookies, arguments, or XML data. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule that will be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the locations where the rule will be applied. It includes cookies, arguments, and XML data.\\n- (?i:...): This is a non-capturing group that contains the actual regular expression pattern.\\n- (?:^(-0000023456|4294967295|4294967296|2147483648|2147483647|0000012345|-2147483648|-2147483649|0000023456|3.0.00738585072007e-308|1e309)$): This is the regular expression pattern that matches specific numerical values. \\n\\nFor example, if an attacker tries to input the value \\\"4294967295\\\" in a cookie or argument, this expression will detect it and block the request.\",\"explanation_id\":215,\"version\":9}"
  },
  {
    "id": "942270",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:(union(.*?)select(.*?)from))) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the web request that the rule will be applied to. In this case, the rule will be applied to cookies, arguments, and XML data.\\n- (?i:(?:(union(.*?)select(.*?)from))): This is the actual regular expression that will be used to match against the request data. It looks for the keywords \\\"union\\\" and \\\"select\\\" followed by any characters (represented by the \\\".*?\\\") and the keyword \\\"from\\\". The \\\"(?i:)\\\" at the beginning makes the expression case-insensitive.\\n\\nFor example, if a web request contains the string \\\"SELECT * FROM users\\\", this expression will match and trigger the ModSecurity rule to block the request.\",\"explanation_id\":217,\"version\":83}"
  },
  {
    "id": "942320",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:procedure\\s+analyse\\s*?\\()|(?:;\\s*?(declare|open)\\s+[\\w-]+)|(?:create\\s+(procedure|function)\\s*?\\w+\\s*?\\(\\s*?\\)\\s*?-)|(?:declare[^\\w]+[@#]\\s*?\\w+)|(exec\\s*?\\(\\s*?@)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests.\\nThe regex expression consists of several parts:\\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied, including cookies, arguments, and XML data.\\n- (?i:...): a non-capturing group that contains several alternative patterns, all of which are indicative of SQL injection attempts. The \\\"i\\\" flag makes the pattern case-insensitive.\\nFor example, the pattern matches SQL injection attempts that include the \\\"procedure analyse\\\" command, \\\"declare\\\" or \\\"open\\\" statements, \\\"create procedure\\\" or \\\"create function\\\" statements, \\\"declare\\\" statements that use \\\"@\\\" or \\\"#\\\" symbols, and \\\"exec\\\" statements that use \\\"@\\\".\",\"explanation_id\":218,\"version\":13}"
  },
  {
    "id": "942110",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* (^[\\`;]+|[\\`]+$) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web application requests.\\nThe regex expression consists of two parts separated by the pipe symbol: ARGS_NAMES|ARGS|XML/* and (^[\\\\`;]+|[\\\\`]+$).\\nThe first part specifies the locations in the request where the regex should be applied, including the names of arguments, the values of arguments, and any XML data.\\nThe second part matches any string that starts with one or more occurrences of the characters `;` or `,` or ends with one or more occurrences of the character `.\\nFor example, if a user submits a request with the argument value `'; DROP TABLE users; --`, this regex would match and trigger a security rule to block the request.\",\"explanation_id\":219,\"version\":1}"
  },
  {
    "id": "942150",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmf sql-function-names.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive in ModSecurity, a web application firewall, that specifies a rule to be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it includes cookies, arguments, and XML data.\\n- @pmf: This is a ModSecurity operator that performs a partial match against a file. In this case, it is matching against a file called \\\"sql-function-names.data\\\" which contains a list of known SQL function names.\\n- sql-function-names.data: This is the file that contains the list of known SQL function names.\\n\\nFor example, if a request contains a cookie or argument that includes a known SQL function name, such as \\\"SELECT\\\" or \\\"UNION\\\", the rule will trigger and block the request.\",\"explanation_id\":220,\"version\":64}"
  },
  {
    "id": "942180",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?i:\\d[\\`]\\s+[\\`]\\s+\\d)|(?:^admin\\s*?[\\`]|(\\/\\*)+[\\`]+\\s?(?:--|#|\\/\\*|{)?)|(?:[\\`]\\s*?(x?or|div|like|between|and)[\\w\\s-]+\\s*?[+<>=()-]\\s*?[\\d\\`])|(?:[\\`]\\s*?[^\\w\\s]?=\\s*?[\\`])|(?:[\\`]\\W*?[+=]+\\W*?[\\`])|(?:[\\`]\\s*?[!=|][\\d\\s!=+-]+.*?[\\`(].*?$)|(?:[\\`]\\s*?[!=|][\\d\\s!=]+.*?\\d+$)|(?:[\\`]\\s*?like\\W+[\\w\\`(])|(?:\\sis\\s*?0\\W)|(?:where\\s[\\s\\w\\.-]+\\s=)|(?:[\\`][<>~]+[\\`])) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- (?i:...): a non-capturing group that contains several sub-patterns separated by the pipe symbol (|), each of which matches a different SQL injection attempt\\n- \\\\d[\\\\`]\\\\s+[\\\\`]\\\\s+\\\\d: matches a pattern where a digit is surrounded by backticks (`) and whitespace, and is followed by another digit\\n- ^admin\\\\s*?[\\\\`]: matches a pattern where the word \\\"admin\\\" is at the beginning of a line, followed by optional whitespace and a backtick\\n- (\\\\/\\\\*)+[\\\\`]+\\\\s?(?:--|#|\\\\/\\\\*|{)?): matches a pattern where a comment is started with /* and ends with a backtick, and may be followed by optional whitespace and a comment delimiter (--, #, /*, or {)\\n- [\\\\`]\\\\s*?(x?or|div|like|between|and)[\\\\w\\\\s-]+\\\\s*?[+<>=()-]\\\\s*?[\\\\d\\\\`]: matches a pattern where a SQL operator (OR, XOR, DIV, LIKE, BETWEEN, or AND) is surrounded by backticks, followed by optional whitespace and a sequence of alphanumeric characters, whitespace, and hyphens, and is then followed by an operator symbol (+, <, >, =, (, or ) and another sequence of digits and backticks\\n- [\\\\`]\\\\s*?[^\\\\w\\\\s]?=\\\\s*?[\\\\`]: matches a pattern where a non-alphanumeric character is surrounded by backticks, followed by optional whitespace and an equals sign, and then another non-alphanumeric character surrounded by backticks\\n- [\\\\`]\\\\W*?[+=]+\\\\W*?[\\\\`]: matches a pattern where one or more non-alphanumeric characters are surrounded by backticks, followed by optional whitespace and one or more equals or plus signs, and then another sequence of non-alphanumeric characters surrounded by backticks\\n- [\\\\`]\\\\s*?[!=|][\\\\d\\\\s!=+-]+.*?[\\\\`(].*?$: matches a pattern where a\",\"explanation_id\":221,\"version\":24}"
  },
  {
    "id": "942200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:.*?[)\\da-f\\`][\\`](?:[\\`].*?[\\`]|\\Z|[^\\`]+))|(?:\\Wselect.+\\W*?from)|((?:select|create|rename|truncate|load|alter|delete|update|insert|desc)\\s*?\\(\\s*?space\\s*?\\()) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web application security. \\n\\nThe regex expression consists of two main parts: \\n\\n1. The first part matches any input that contains hexadecimal or backtick characters, which are commonly used in SQL injection attacks. It also matches any input that contains certain SQL keywords such as select, create, rename, truncate, load, alter, delete, update, insert, and desc followed by a space and a parenthesis. \\n\\n2. The second part matches any input that contains the word \\\"select\\\" followed by any characters and the word \\\"from\\\", which is another common pattern in SQL injection attacks. \\n\\nFor example, this expression would match the following inputs: \\n\\n- `1' OR '1'='1` (contains a hexadecimal character)\\n- `SELECT * FROM users` (contains the word \\\"select\\\" followed by \\\"from\\\")\\n- `1; DROP TABLE users` (contains the keyword \\\"drop\\\" followed by a space and a parenthesis)\",\"explanation_id\":222,\"version\":53}"
  },
  {
    "id": "942300",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:\\)\\s*?when\\s*?\\d+\\s*?then)|(?:[\\`]\\s*?(?:#|--|{))|(?:\\/\\*!\\s?\\d+)|(?:ch(?:a)?r\\s*?\\(\\s*?\\d)|(?:(?:(n?and|x?x?or|div|like|between|and|not)\\s+|\\|\\||\\&\\&)\\s*?\\w+\\()) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, and XML data.\\n- (?i:...): This is a non-capturing group that contains several different patterns that may indicate a SQL injection attempt. \\n- (?:\\\\)\\\\s*?when\\\\s*?\\\\d+\\\\s*?then): This pattern matches SQL code that uses the \\\"when\\\" and \\\"then\\\" keywords.\\n- (?:[\\\\`]\\\\s*?(?:#|--|{)): This pattern matches SQL code that uses backticks and comments.\\n- (?:\\\\/\\\\*!\\\\s?\\\\d+): This pattern matches SQL code that uses comments with an exclamation mark followed by a number.\\n- (?:ch(?:a)?r\\\\s*?\\\\(\\\\s*?\\\\d): This pattern matches SQL code that uses the \\\"char\\\" function.\\n- (?:(?:(n?and|x?x?or|div|like|between|and|not)\\\\s+|\\\\|\\\\||\\\\&\\\\&)\\\\s*?\\\\w+\\\\()): This pattern matches SQL code that uses logical operators and functions.\\n\\nFor example, the expression would match the following SQL injection attempt: \\nSELECT * FROM users WHERE username = 'admin' AND password = 'password' OR 1=1;\",\"explanation_id\":223,\"version\":36}"
  },
  {
    "id": "942310",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:[\\`]\\s+and\\s*?=\\W)|(?:\\(\\s*?select\\s*?\\w+\\s*?\\()|(?:\\*\\/from)|(?:\\+\\s*?\\d+\\s*?\\+\\s*?@)|(?:\\w[\\`]\\s*?(?:(?:[-+=|@]+\\s+?)+|[-+=|@]+)[\\d(])|(?:coalesce\\s*?\\(|@@\\w+\\s*?[^\\w\\s])|(?:\\W!+[\\`]\\w)|(?:[\\`];\\s*?(?:if|while|begin))|(?:[\\`][\\s\\d]+=\\s*?\\d)|(?:order\\s+by\\s+if\\w*?\\s*?\\()|(?:[\\s(]+case\\d*?\\W.+[tw]hen[\\s(])) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This specifies the location of the input to be checked.\\n- (?i:...): This sets the regex to be case-insensitive.\\n- (?:[\\\\`]\\\\s+and\\\\s*?=\\\\W): This matches the \\\"and =\\\" operator.\\n- (?:\\\\(\\\\s*?select\\\\s*?\\\\w+\\\\s*?\\\\()): This matches the \\\"select\\\" statement.\\n- (?:\\\\*\\\\/from): This matches the \\\"from\\\" keyword.\\n- (?:\\\\+\\\\s*?\\\\d+\\\\s*?\\\\+\\\\s*?@): This matches the \\\"+\\\" operator followed by a number and \\\"@\\\". \\n- (?:\\\\w[\\\\`]\\\\s*?(?:(?:[-+=|@]+\\\\s+?)+|[-+=|@]+)[\\\\d(]): This matches various SQL operators and functions.\\n- (?:coalesce\\\\s*?\\\\(|@@\\\\w+\\\\s*?[^\\\\w\\\\s]): This matches the \\\"coalesce\\\" function and \\\"@@\\\" operator.\\n- (?:\\\\W!+[\\\\`]\\\\w): This matches the \\\"!\\\" operator.\\n- (?:[\\\\`];\\\\s*?(?:if|while|begin)): This matches the \\\";\\\" operator followed by \\\"if\\\", \\\"while\\\", or \\\"begin\\\".\\n- (?:[\\\\`][\\\\s\\\\d]+=\\\\s*?\\\\d): This matches an assignment statement.\\n- (?:order\\\\s+by\\\\s+if\\\\w*?\\\\s*?\\\\()): This matches the \\\"order by\\\" clause.\\n- (?:[\\\\s(]+case\\\\d*?\\\\W.+[tw]hen[\\\\s(])): This matches the \\\"case\\\" statement.\\n\\nFor example, the regex would match the following SQL injection attempts:\\n- \\\"1' and 1=1\\\"\\n- \\\"SELECT * FROM users\\\"\\n- \\\"1+1+@variable\\\"\\n- \\\"coalesce(null,1)\\\"\\n- \\\"!user\\\"\\n- \\\"`; if 1=1; begin\\\"\\n- \\\"`id=1\\\"\\n- \\\"ORDER BY if(1=1,1,0)\\\"\\n- \\\"CASE WHEN 1=1 THEN 'a' ELSE 'b' END\\\"\",\"explanation_id\":224,\"version\":87}"
  },
  {
    "id": "942380",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* \\b(?i:having)\\b\\s+(\\d{110}|[^=]{110})\\s*?[=<>]|(?i:\\bexecute(\\s{15}[\\w\\.$]{15}\\s{03})?\\()|\\bhaving\\b ?(?:\\d{110}|[\\\\][^=]{110}[\\\\]) ?[=<>]+|(?i:\\bcreate\\s+?table.{020}?\\()|(?i:\\blike\\W*?char\\W*?\\()|(?i:(?:(select(.*?)case|from(.*?)limit|order\\sby)))|exists\\s(\\sselect|select\\Sif(null)?\\s\\(|select\\Stop|select\\Sconcat|system\\s\\(|\\b(?i:having)\\b\\s+(\\d{110})|[^=]{110}) ",
    "explanation": "{\"explanation\":\"This expression is used for detecting SQL injection attempts in web application security. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web server\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations where the rule should be applied, such as cookies, query parameters, or XML data\\n- \\\\b(?i:having)\\\\b\\\\s+(\\\\d{110}|[^=]{110})\\\\s*?[=<>]: matches the keyword \\\"having\\\" followed by a numeric value or any character except \\\"=\\\" repeated 110 times, followed by a comparison operator\\n- (?i:\\\\bexecute(\\\\s{15}[\\\\w\\\\.$]{15}\\\\s{03})?\\\\(): matches the keyword \\\"execute\\\" followed by an optional string of 15 characters that can be letters, digits, underscores, or dots, followed by an opening parenthesis\\n- \\\\bhaving\\\\b ?(?:\\\\d{110}|[\\\\\\\\][^=]{110}[\\\\\\\\]) ?[=<>]+: matches the keyword \\\"having\\\" followed by a numeric value or any character except \\\"=\\\" repeated 110 times, enclosed in backslashes, followed by a comparison operator\\n- (?i:\\\\bcreate\\\\s+?table.{020}?\\\\(): matches the keyword \\\"create\\\" followed by the keyword \\\"table\\\" and any 20 characters, followed by an opening parenthesis\\n- (?i:\\\\blike\\\\W*?char\\\\W*?\\\\(): matches the keyword \\\"like\\\" followed by any non-word character, the keyword \\\"char\\\", and an opening parenthesis\\n- (?i:(?:(select(.*?)case|from(.*?)limit|order\\\\sby))): matches the keywords \\\"select\\\" followed by any characters and the keyword \\\"case\\\", or \\\"from\\\" followed by any characters and the keyword \\\"limit\\\", or \\\"order by\\\"\\n- exists\\\\s(\\\\sselect|select\\\\Sif(null)?\\\\s\\\\(|select\\\\Stop|select\\\\Sconcat|system\\\\s\\\\(|\\\\b(?i:having)\\\\b\\\\s+(\\\\d{110})|[^=]{110}): matches the keyword \\\"exists\\\" followed by a subquery that can contain various SQL injection patterns\\n\\nFor example, the regex can detect SQL injection attempts like:\\n- SELECT * FROM users WHERE username = 'admin' HAVING 1=1\\n- SELECT\",\"explanation_id\":225,\"version\":10}"
  },
  {
    "id": "942390",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:\\bor\\b ?(?:\\d{110}|[\\\\][^=]{110}[\\\\]) ?[=<>]+|(?i:\\s+x?or\\s+.{120}[+\\-!<>=])|\\b(?i:x?or)\\b\\s+(\\d{110}|[^=]{110})|\\b(?i:x?or)\\b\\s+(\\d{110}|[^=]{110})\\s*?[=<>]) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n1. SecRule: This is a directive used by the ModSecurity module to define a rule.\\n2. REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This specifies the locations in the web request where the rule should be applied. It includes request cookies, request cookie names, argument names, arguments, and XML data.\\n3. (?i:\\\\bor\\\\b ?(?:\\\\d{110}|[\\\\\\\\][^=]{110}[\\\\\\\\]) ?[=<>]+|(?i:\\\\s+x?or\\\\s+.{120}[+\\\\-!<>=])|\\\\b(?i:x?or)\\\\b\\\\s+(\\\\d{110}|[^=]{110})|\\\\b(?i:x?or)\\\\b\\\\s+(\\\\d{110}|[^=]{110})\\\\s*?[=<>]): This is the actual regular expression used to detect SQL injection attempts. It includes several different patterns that may indicate an attempt to inject SQL code into the web request. \\n\\nFor example, the regex may detect patterns such as \\\"OR 1=1\\\", \\\"OR a=a\\\", \\\"OR 1234567890...\\\", \\\"OR \\\\x61\\\\x3d\\\\x61\\\", \\\"OR 1=1--\\\", \\\"OR 1=1#\\\", \\\"OR 1=1/*\\\", \\\"xOR 1=1\\\", \\\"xOR a=a\\\", \\\"xOR 1234567890...\\\", \\\"xOR \\\\x61\\\\x3d\\\\x61\\\", \\\"xOR 1=1--\\\", \\\"xOR 1=1#\\\", \\\"xOR 1=1/*\\\", \\\"1 OR 1=1\\\", \\\"1 xOR 1=1\\\", \\\"1 OR a=a\\\", \\\"1 xOR a=a\\\", \\\"1 OR 1234567890...\\\", \\\"1 xOR 1234567890...\\\", \\\"1 OR \\\\x61\\\\x3d\\\\x61\\\", \\\"1 xOR \\\\x61\\\\x3d\\\\x61\\\", \\\"1 OR 1=1--\\\", \\\"1 xOR 1=1--\\\", \\\"1 OR 1=1#\\\", \\\"1 xOR 1=1#\\\", \\\"1 OR 1=1/*\\\", \\\"1 xOR 1=1/*\\\", \\\"OR 1111111111...\\\", \\\"xOR\",\"explanation_id\":226,\"version\":51}"
  },
  {
    "id": "942410",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:(?:s(?:t(?:d(?:dev(_pop|_samp)?)?|r(?:_to_date|cmp))|u(?:b(?:str(?:ing(_index)?)?|(?:dat|tim)e)|m)|e(?:c(?:_to_time|ond)|ssion_user)|ys(?:tem_user|date)|ha(1|2)?|oundex|chema|ig?n|pace|qrt)|i(?:s(null|_(free_lock|ipv4_compat|ipv4_mapped|ipv4|ipv6|not_null|not|null|used_lock))?|n(?:et6?_(aton|ntoa)|s(?:ert|tr)|terval)?|f(null)?)|u(?:n(?:compress(?:ed_length)?|ix_timestamp|hex)|tc_(date|time|timestamp)|p(?:datexml|per)|uid(_short)?|case|ser)|l(?:o(?:ca(?:l(timestamp)?|te)|g(2|10)?|ad_file|wer)|ast(_day|_insert_id)?|e(?:(?:as|f)t|ngth)|case|trim|pad|n)|t(?:ime(stamp|stampadd|stampdiff|diff|_format|_to_sec)?|o_(base64|days|seconds|n?char)|r(?:uncate|im)|an)|m(?:a(?:ke(?:_set|date)|ster_pos_wait|x)|i(?:(?:crosecon)?d|n(?:ute)?)|o(?:nth(name)?|d)|d5)|r(?:e(?:p(?:lace|eat)|lease_lock|verse)|o(?:w_count|und)|a(?:dians|nd)|ight|trim|pad)|f(?:i(?:eld(_in_set)?|nd_in_set)|rom_(base64|days|unixtime)|o(?:und_rows|rmat)|loor)|a(?:es_(?:de|en)crypt|s(?:cii(str)?|in)|dd(?:dat|tim)e|(?:co|b)s|tan2?|vg)|p(?:o(?:sition|w(er)?)|eriod_(add|diff)|rocedure_analyse|assword|i)|b(?:i(?:t_(?:length|count|x?or|and)|n(_to_num)?)|enchmark)|e(?:x(?:p(?:ort_set)?|tract(value)?)|nc(?:rypt|ode)|lt)|v(?:a(?:r(?:_(?:sam|po)p|iance)|lues)|ersion)|g(?:r(?:oup_conca|eates)t|et_(format|lock))|o(?:(?:ld_passwo)?rd|ct(et_length)?)|we(?:ek(day|ofyear)?|ight_string)|n(?:o(?:t_in|w)|ame_const|ullif)|(rawton?)?hex(toraw)?|qu(?:arter|ote)|(pg_)?sleep|year(week)?|d?count|xmltype|hour)\\W*?\\(|\\b(?:(?:s(?:elect\\b(?:.{1100}?\\b(?:(?:length|count|top)\\b.{1100}?\\bfrom|from\\b.{1100}?\\bwhere)|.*?\\b(?:d(?:ump\\b.*?\\bfrom|ata_type)|(?:to_(?:numbe|cha)|inst)r))|p_(?:sqlexec|replwritetovarbin|help|addextendedproc|is_srvrolemember|prepare|password|execute(?:sql)?|makewebtask|oacreate)|ql_(?:longvarchar|variant))|xp_(?:reg(?:re(?:movemultistring|ad)|delete(?:value|key)|enum(?:value|key)s|addmultistring|write)|terminate|servicecontrol|ntsec_enumdomains|terminate_process|e(?:xecresultset|numdsn)|availablemedia|loginconfig|cmdshell|filelist|dirtree|makecab|ntsec)|u(?:nion\\b.{1100}?\\bselect|tl_(?:file|http))|d(?:b(?:a_users|ms_java)|elete\\b\\W*?\\bfrom)|group\\b.*?\\bby\\b.{1100}?\\bhaving|open(?:rowset|owa_util|query)|load\\b\\W*?\\bdata\\b.*?\\binfile|(?:n?varcha|tbcreato)r|autonomous_transaction)\\b|i(?:n(?:to\\b\\W*?\\b(?:dump|out)file|sert\\b\\W*?\\binto|ner\\b\\W*?\\bjoin)\\b|(?:f(?:\\b\\W*?\\(\\W*?\\bbenchmark|null\\b)|snull\\b)\\W*?\\()|print\\b\\W*?\\@\\@|cast\\b\\W*?\\()|c(?:(?:ur(?:rent_(?:time(?:stamp)?|date|user)|(?:dat|tim)e)|h(?:ar(?:(?:acter)?_length|set)?|r)|iel(?:ing)?|ast|r32)\\W*?\\(|o(?:(?:n(?:v(?:ert(?:_tz)?)?|cat(?:_ws)?|nection_id)|(?:mpres)?s|ercibility|alesce|t)\\W*?\\(|llation\\W*?\\(a))|d(?:(?:a(?:t(?:e(?:(_(add|format|sub))?|diff)|abase)|y(name|ofmonth|ofweek|ofyear)?)|e(?:(?:s_(de|en)cryp|faul)t|grees|code)|ump)\\W*?\\(|bms_\\w+\\.\\b)|(?:;\\W*?\\b(?:shutdown|drop)|\\@\\@version)\\b|\\butl_inaddr\\b|\\bsys_context\\b|(?:s(?:qloledb|a)|msdasql|dbo))) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- The first part specifies which parts of the request to search for the SQL injection attempt: REQUEST_COOKIES, REQUEST_COOKIES that do not contain \\\"__utm\\\", REQUEST_COOKIES that do not contain \\\"/_pk_ref/\\\", REQUEST_COOKIES_NAMES, ARGS_NAMES, ARGS, and XML. \\n- The second part is a long list of SQL keywords and functions that are commonly used in SQL injection attacks. \\n\\nFor example, the regex will match if it finds a SQL keyword or function in the request, such as \\\"SELECT\\\", \\\"UNION\\\", \\\"DROP\\\", \\\"EXEC\\\", \\\"CAST\\\", etc.\",\"explanation_id\":227,\"version\":41}"
  },
  {
    "id": "942440",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (/\\*!?|\\*/|[;]--|--[\\s\\r\\n\\v\\f]|(?:--[^-]*?-)|([^\\-&])#.*?[\\s\\r\\n\\v\\f]|;?\\\\x00) ",
    "explanation": "{\"explanation\":\"This expression is used to detect and prevent SQL injection attacks in web applications. \\n\\nThe regex expression consists of several parts: \\n- The first part specifies the sources of input that the rule applies to, including cookies, arguments, and XML data. \\n- The second part is a set of patterns that match common SQL injection attack techniques, such as comments, encoded characters, and special characters used in SQL syntax. \\n\\nFor example, the expression matches the following patterns: \\n- `/*` or `*/` or `;--` or `--` followed by whitespace or line breaks, which are used to comment out parts of SQL queries. \\n- `#` followed by any characters and whitespace or line breaks, which are used to comment out parts of SQL queries in MySQL. \\n- `\\\\x00` or `%00` or `+` followed by any characters, which are used to bypass input filters that block certain characters. \\n\\nOverall, this expression helps to protect web applications from SQL injection attacks by detecting and blocking malicious input that could be used to manipulate SQL queries.\",\"explanation_id\":228,\"version\":49}"
  },
  {
    "id": "942251",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i)\\W+\\d*?\\s*?having\\s*?[^\\s\\-] ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the web request where the rule should be applied. For example, REQUEST_COOKIES refers to cookies sent in the request, ARGS refers to query parameters, and XML:/* refers to XML data in the request body.\\n- (?i): This is a flag that makes the regex case-insensitive.\\n- \\\\W+: This matches one or more non-word characters (i.e., characters that are not letters, digits, or underscores).\\n- \\\\d*?\\\\s*?having\\\\s*?[^\\\\s\\\\-]: This is the main pattern that matches SQL injection attempts. It looks for the word \\\"having\\\" preceded by zero or more digits and optional whitespace, and followed by a non-space and non-hyphen character. This is a common technique used in SQL injection attacks to add a \\\"having\\\" clause to a SQL query.\\n\\nFor example, this regex would match the following strings:\\n\\n- \\\"1 having 1=1\\\": This is a simple SQL injection attempt that adds a \\\"having\\\" clause to a query to always return true.\\n- \\\"HAVING 1=1\\\": This is the same as the previous example, but with the \\\"having\\\" keyword in uppercase.\\n- \\\"1 having 1=1--\\\": This is a variation of the first example that adds a comment at the end of the string to bypass some filters.\\n- \\\"1 having 1=1/*\\\": This is another variation that uses a block comment instead of a line comment.\",\"explanation_id\":229,\"version\":99}"
  },
  {
    "id": "942460",
    "regex": "SecRule ARGS \"\\W{4}\"",
    "explanation": "{\"explanation\":\"This expression is used to detect if a web application's input contains four or more consecutive non-word characters (i.e., characters that are not letters, numbers, or underscores).\\n\\nThe regex expression consists of:\\n- \\\"\\\\W\\\": a shorthand character class that matches any non-word character\\n- \\\"{4}\\\": a quantifier that matches the preceding character or character class exactly four times\\n\\nFor example, this expression would match inputs such as \\\"!!!!\\\", \\\"%%%%\\\", or \\\"****\\\", but not \\\"abc!\\\", \\\"1234\\\", or \\\"a_b_c\\\".\\n\\nBegin:\\nRegex:SecRule ARGS \\\"\\\\W{4}\\\"\",\"explanation_id\":231,\"version\":95}"
  },
  {
    "id": "933110",
    "regex": "SecRule FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X-File-Name @rx .*\\.(?:php\\d*|phtml)\\.*$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious files being uploaded or requested on a web server. \\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X-File-Name: These are the locations where the rule will be applied. It can be either in the uploaded file or in the request headers.\\n- @rx: This is a regular expression operator that indicates that the following pattern is a regular expression.\\n- .*\\\\.(?:php\\\\d*|phtml)\\\\.*$: This is the regular expression pattern that matches any string that ends with either \\\".php\\\" followed by zero or more digits or \\\".phtml\\\" and may have additional characters after the extension.\\n\\nFor example, if a user tries to upload a file named \\\"malicious.php5\\\", this expression will detect it and block the request. Similarly, if a user tries to request a file named \\\"index.phtml/evil\\\", this expression will also detect it and block the request.\",\"explanation_id\":233,\"version\":35}"
  },
  {
    "id": "933140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* ",
    "explanation": "{\"explanation\":\"This expression is used to match against various parts of an HTTP request, including cookies, arguments, and XML data. It is commonly used in web application firewalls to detect and prevent attacks.\\n\\nThe regex expression consists of several parts:\\n\\n- `SecRule`: This is the command used by the ModSecurity web application firewall to define a rule.\\n- `REQUEST_COOKIES`: This matches against any cookies sent in the HTTP request.\\n- `!REQUEST_COOKIES/__utm/`: This excludes any cookies with the name \\\"__utm\\\".\\n- `REQUEST_COOKIES_NAMES`: This matches against the names of any cookies sent in the HTTP request.\\n- `ARGS_NAMES`: This matches against the names of any arguments sent in the HTTP request.\\n- `ARGS`: This matches against the values of any arguments sent in the HTTP request.\\n- `XML:/*`: This matches against any XML data sent in the HTTP request.\\n\\nFor example, the expression could be used to detect a SQL injection attack by looking for the presence of certain SQL keywords in the request arguments. It could also be used to block requests that contain certain cookies or XML data that are known to be associated with malicious activity.\",\"explanation_id\":235,\"version\":84}"
  },
  {
    "id": "933150",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @pmf php-function-names-933150.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks on a web application by searching for specific patterns in the HTTP request. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is a directive used by the ModSecurity module to define a rule for inspecting HTTP requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will inspect for potential attacks. They include cookies, file names, and arguments passed in the request.\\n- @pmf: This is a transformation function that will be applied to the data being inspected. In this case, it will search for a list of PHP function names that are commonly used in attacks.\\n\\nFor example, if an attacker tries to pass a malicious PHP function name as an argument in the request, this expression will detect it and block the request.\",\"explanation_id\":236,\"version\":15}"
  },
  {
    "id": "933170",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS|ARGS_NAMES|ARGS|XML:/* ",
    "explanation": "{\"explanation\":\"This expression is used to define a security rule for web application firewalls. \\n\\nThe regex expression consists of several parts: \\n\\n- `SecRule`: This is the keyword that initiates the security rule.\\n- `REQUEST_COOKIES`: This is a variable that represents the cookies sent in the HTTP request.\\n- `|`: This is a logical OR operator that separates different variables or expressions.\\n- `!REQUEST_COOKIES/__utm/`: This is a negative match that excludes cookies with the name \\\"__utm\\\".\\n- `REQUEST_COOKIES_NAMES`: This is a variable that represents the names of all cookies sent in the HTTP request.\\n- `REQUEST_HEADERS`: This is a variable that represents the HTTP headers sent in the request.\\n- `ARGS_NAMES`: This is a variable that represents the names of all parameters sent in the request.\\n- `ARGS`: This is a variable that represents the values of all parameters sent in the request.\\n- `XML:/*`: This is a variable that represents any XML data sent in the request.\\n\\nFor example, this expression can be used to block requests that contain certain cookies or parameters, or to inspect the values of certain headers or XML data.\",\"explanation_id\":237,\"version\":17}"
  },
  {
    "id": "933131",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:HTTP_(?:ACCEPT(?:_(?:ENCODING|LANGUAGE|CHARSET))?|(?:X_FORWARDED_FO|REFERE)R|(?:USER_AGEN|HOS)T|CONNECTION|KEEP_ALIVE)|PATH_(?:TRANSLATED|INFO)|ORIG_PATH_INFO|QUERY_STRING|REQUEST_URI|AUTH_TYPE) ",
    "explanation": "{\"explanation\":\"This expression is used to match certain HTTP headers and other request information in web application firewalls or other security systems. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different variables that can be checked for the regex pattern. They include request cookies, cookie names, argument names, arguments, and XML data.\\n- @rx: This is a ModSecurity operator that specifies a regular expression pattern.\\n- (?:HTTP_(?:ACCEPT(?:_(?:ENCODING|LANGUAGE|CHARSET))?|(?:X_FORWARDED_FO|REFERE)R|(?:USER_AGEN|HOS)T|CONNECTION|KEEP_ALIVE)|PATH_(?:TRANSLATED|INFO)|ORIG_PATH_INFO|QUERY_STRING|REQUEST_URI|AUTH_TYPE): This is the regular expression pattern that matches certain HTTP headers and other request information. \\n\\nFor example, this expression can be used to block requests that contain certain HTTP headers, such as \\\"User-Agent\\\" or \\\"Referer\\\", or to log requests that contain certain query strings or authentication types.\",\"explanation_id\":239,\"version\":9}"
  },
  {
    "id": "932120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmf windows-powershell-commands.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks involving the use of Windows PowerShell commands in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting and preventing attacks. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the web request that the rule will be applied to. In this case, it includes cookies, arguments, and XML data. \\n- @pmf: This is a ModSecurity operator that performs a partial match against a set of predefined strings. \\n- windows-powershell-commands.data: This is the predefined string set that the operator will match against. It contains a list of known Windows PowerShell commands that are commonly used in attacks. \\n\\nFor example, if a web request contains a cookie or argument that includes one of the Windows PowerShell commands in the predefined string set, this rule will trigger and block the request.\",\"explanation_id\":241,\"version\":51}"
  },
  {
    "id": "932160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmf unix-shell.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential Unix shell injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive in ModSecurity, a web application firewall, that specifies a rule to be applied to incoming requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the request that the rule will be applied to. In this case, it includes cookies, arguments, and XML data.\\n- @pmf: This is a ModSecurity operator that performs a partial match against a file. In this case, it is checking against a file called \\\"unix-shell.data\\\" to see if any of the values in the request match any of the patterns in the file.\\n\\nFor example, if a user were to submit a request with a cookie value of \\\"; rm -rf /\\\", this expression would detect it as a potential Unix shell injection attack and block the request.\",\"explanation_id\":242,\"version\":57}"
  },
  {
    "id": "932170",
    "regex": "SecRule REQUEST_HEADERS|REQUEST_LINE \"^\\(\\s*\\)\\s+{\"",
    "explanation": "{\"explanation\":\"This expression is used to match a specific pattern in the beginning of a HTTP request header. \\n\\nThe regex expression consists of three parts: \\n1. \\\"SecRule\\\" - This is a keyword used in ModSecurity to define a rule.\\n2. \\\"REQUEST_HEADERS|REQUEST_LINE\\\" - This is a logical OR operator used to match either the request headers or the request line.\\n3. \\\"^\\\\(\\\\s*\\\\)\\\\s+{\\\" - This is the actual regular expression that matches the pattern. It starts with a caret (^) to indicate the beginning of the line, followed by a group of zero or more whitespace characters (\\\\s*) enclosed in parentheses (\\\\(\\\\)), and then one or more whitespace characters (\\\\s+) followed by an opening curly brace ({).\\n\\nFor example, this expression can be used to match the beginning of a JSON request header that starts with an empty object: \\n{\\n  \\\"\\\": {\\n    \\\"key\\\": \\\"value\\\"\\n  }\\n}\",\"explanation_id\":244,\"version\":62}"
  },
  {
    "id": "941110",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* (?i)([<＜]script[^>＞]*[>＞][\\s\\S]*?) ",
    "explanation": "{\"explanation\":\"This expression is used to detect and prevent cross-site scripting (XSS) attacks on web applications. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/*: a list of variables to be checked for the presence of the XSS payload\\n- (?i): a flag indicating that the search should be case-insensitive\\n- ([<\\uff1c]script[^>\\uff1e]*[>\\uff1e][\\\\s\\\\S]*?): the actual regular expression that matches any script tag with any content inside it\\n\\nFor example, if a user tries to inject a script tag into a cookie or a request header, this expression will detect it and prevent the attack.\",\"explanation_id\":247,\"version\":27}"
  },
  {
    "id": "941170",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* (?i)(?:\\W|^)(?:javascript:(?:[\\s\\S]+[=\\\\\\(\\[\\.<]|[\\s\\S]*?(?:\\bname\\b|\\\\[ux]\\d))|data:(?:(?:[a-z]\\w+\\/\\w[\\w+-]+\\w)?[;]|[\\s\\S]*?;[\\s\\S]*?\\b(?:base64|charset=)|[\\s\\S]*?[\\s\\S]*?<[\\s\\S]*?\\w[\\s\\S]*?>))|@\\W*?i\\W*?m\\W*?p\\W*?o\\W*?r\\W*?t\\W*?(?:\\/\\*[\\s\\S]*?)?(?:[\\]|\\W*?u\\W*?r\\W*?l[\\s\\S]*?\\()|\\W*?-\\W*?m\\W*?o\\W*?z\\W*?-\\W*?b\\W*?i\\W*?n\\W*?d\\W*?i\\W*?n\\W*?g[\\s\\S]*?:[\\s\\S]*?\\W*?u\\W*?r\\W*?l[\\s\\S]*?\\( ",
    "explanation": "{\"explanation\":\"This expression is used to detect and prevent malicious code injection in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- (?i): sets the regex to be case-insensitive\\n- (?:\\\\W|^): matches any non-word character or the beginning of a line\\n- (?:javascript:(?:[\\\\s\\\\S]+[=\\\\\\\\\\\\(\\\\[\\\\.<]|[\\\\s\\\\S]*?(?:\\\\bname\\\\b|\\\\\\\\[ux]\\\\d))|data:(?:(?:[a-z]\\\\w+\\\\/\\\\w[\\\\w+-]+\\\\w)?[;]|[\\\\s\\\\S]*?;[\\\\s\\\\S]*?\\\\b(?:base64|charset=)|[\\\\s\\\\S]*?[\\\\s\\\\S]*?<[\\\\s\\\\S]*?\\\\w[\\\\s\\\\S]*?>)): matches common patterns used in malicious code injection, such as JavaScript or data URLs\\n- |@\\\\W*?i\\\\W*?m\\\\W*?p\\\\W*?o\\\\W*?r\\\\W*?t\\\\W*?(?:\\\\/\\\\*[\\\\s\\\\S]*?)?(?:[\\\\]|\\\\W*?u\\\\W*?r\\\\W*?l[\\\\s\\\\S]*?\\\\(): matches the use of the @import directive to load external resources\\n- |\\\\W*?-\\\\W*?m\\\\W*?o\\\\W*?z\\\\W*?-\\\\W*?b\\\\W*?i\\\\W*?n\\\\W*?d\\\\W*?i\\\\W*?n\\\\W*?g[\\\\s\\\\S]*?:[\\\\s\\\\S]*?\\\\W*?u\\\\W*?r\\\\W*?l[\\\\s\\\\S]*?\\\\(: matches the use of the -moz-binding property to execute arbitrary code\\n\\nFor example, this expression would detect and prevent a malicious user from injecting JavaScript code into a web request by using a data URL or the @import directive to load an external script.\",\"explanation_id\":248,\"version\":43}"
  },
  {
    "id": "941190",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<style.*?>.*?((@[i\\\\\\\\])|(([:=]|(&#x?0*((58)|(3A)|(61)|(3D));?)).*?([(\\\\\\\\]|(&#x?0*((40)|(28)|(92)|(5C));?))))) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests.\\nThe regex expression consists of several parts:\\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied, including cookies, arguments, and XML data.\\n- (?i:<style.*?>.*?((@[i\\\\\\\\\\\\\\\\])|(([:=]|(&#x?0*((58)|(3A)|(61)|(3D));?)).*?([(\\\\\\\\\\\\\\\\]|(&#x?0*((40)|(28)|(92)|(5C));?))))): the actual regular expression that matches against the request data. It looks for the presence of a <style> tag, followed by any characters, and then either an @ symbol followed by a character class (i or \\\\), or a colon, equals sign, or HTML entity representing a colon or equals sign, followed by any characters, and then either a parenthesis or a backslash, or an HTML entity representing a parenthesis or backslash.\\n\\nFor example, this rule would trigger if a web request contained the following string:\\n<style>background-image:url('http://example.com/image.jpg');\\\\0x28alert(1)\\\\0x29</style>\",\"explanation_id\":249,\"version\":50}"
  },
  {
    "id": "941200",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<.*[:]?vmlframe.*?[\\s/+]*?src[\\s/+]*=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious activity in HTTP requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for detecting and preventing attacks.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, and XML data.\\n- (?i:<.*[:]?vmlframe.*?[\\\\s/+]*?src[\\\\s/+]*=): This is the actual regular expression that will be used to match against the variables. It looks for any string that contains \\\"vmlframe\\\" followed by \\\"src=\\\" with optional characters in between. The (?i) at the beginning makes the expression case-insensitive.\\n\\nFor example, this rule could be used to detect if an attacker is trying to inject malicious code into a website by using a hidden iframe with a source pointing to a malicious website. The rule would trigger if the attacker tried to include the string \\\"vmlframe\\\" in any of the variables being monitored.\",\"explanation_id\":250,\"version\":49}"
  },
  {
    "id": "941230",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<EMBED[\\s/+].*?((src)|(type)).*?=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious code injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting and blocking malicious requests. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the request that the rule will check for the presence of the injection attempt. This includes cookies, arguments, and XML data. \\n- (?i:<EMBED[\\\\s/+].*?((src)|(type)).*?=): This is the actual regular expression that will match against the request data. It looks for the <EMBED> tag with attributes \\\"src\\\" or \\\"type\\\" that may contain malicious code. \\n\\nFor example, if a request contains the following code: \\n<EMBED src=\\\"http://malicious.com/script.js\\\"></EMBED>\\n\\nThe regex expression will match and trigger the rule to block the request.\",\"explanation_id\":251,\"version\":17}"
  },
  {
    "id": "941260",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<META[\\s/+].*?charset[\\s/+]*=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect the character encoding specified in the HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This specifies the locations in the HTTP request where the rule should be applied. It can be in the request cookies, request cookie names, argument names, arguments, or XML data.\\n- (?i:<META[\\\\s/+].*?charset[\\\\s/+]*=): This is the actual regular expression that matches the character encoding specified in the HTTP request. It looks for the <META tag followed by any number of spaces or slashes, followed by the word \\\"charset\\\" and an equal sign.\\n\\nFor example, if the HTTP request contains the following line: \\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\\nThe regular expression will match \\\"charset=UTF-8\\\" and the rule will be triggered.\",\"explanation_id\":252,\"version\":3}"
  },
  {
    "id": "941290",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<APPLET[\\s/+>]) ",
    "explanation": "{\"explanation\":\"This expression is used to detect the presence of an <APPLET> tag in various parts of an HTTP request. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for detecting and blocking malicious requests. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different parts of the HTTP request that the rule will be applied to. Specifically, it will look for the <APPLET> tag in the request cookies, request cookie names, argument names, arguments, and XML data. \\n- (?i:<APPLET[\\\\s/+>]): This is the actual regular expression that will be used to match the <APPLET> tag. The (?i:) at the beginning makes the match case-insensitive. The [\\\\s/+>] matches any whitespace character, forward slash, or greater-than symbol that may appear after the <APPLET> tag.\\n\\nFor example, this expression could be used to block requests that contain <APPLET> tags, which are often used to execute malicious code on a user's computer.\",\"explanation_id\":253,\"version\":45}"
  },
  {
    "id": "941350",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:\\+ADw\\-|\\+AD4\\-).*(?:\\+ADw\\-|\\+AD4\\-|>)|(?:\\+ADw\\-|\\+AD4\\-|<).*(?:\\+ADw\\-|\\+AD4\\-) ",
    "explanation": "{\"explanation\":\"This expression is used to detect malicious code injection attempts in web requests.\\nThe regex expression consists of several parts: \\n- SecRule: A directive used in ModSecurity to define a rule for web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: A set of variables that represent different parts of a web request where the rule should be applied.\\n- @rx: A flag that indicates the rule should be applied as a regular expression.\\n- (?:\\\\+ADw\\\\-|\\\\+AD4\\\\-).*(?:\\\\+ADw\\\\-|\\\\+AD4\\\\-|>)|(?:\\\\+ADw\\\\-|\\\\+AD4\\\\-|<).*(?:\\\\+ADw\\\\-|\\\\+AD4\\\\-): The regular expression pattern that matches the malicious code injection attempts.\\n\\nFor example, this expression will match any request parameter or cookie value that contains the string \\\"+ADw-\\\" or \\\"+AD4-\\\", followed by any characters, and then followed by either \\\"+ADw-\\\" or \\\"+AD4-\\\" or \\\"<\\\" or \\\">\\\". This pattern is commonly used in attempts to inject malicious code into web applications.\",\"explanation_id\":254,\"version\":69}"
  },
  {
    "id": "941320",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* <(a|abbr|acronym|address|applet|area|audioscope|b|base|basefront|bdo|bgsound|big|blackface|blink|blockquote|body|bq|br|button|caption|center|cite|code|col|colgroup|comment|dd|del|dfn|dir|div|dl|dt|em|embed|fieldset|fn|font|form|frame|frameset|h1|head|hr|html|i|iframe|ilayer|img|input|ins|isindex|kdb|keygen|label|layer|legend|li|limittext|link|listing|map|marquee|menu|meta|multicol|nobr|noembed|noframes|noscript|nosmartquotes|object|ol|optgroup|option|p|param|plaintext|pre|q|rt|ruby|s|samp|script|select|server|shadow|sidebar|small|spacer|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var|wbr|xml|xmp)\\W ",
    "explanation": "{\"explanation\":\"This expression is used to identify potential cross-site scripting (XSS) attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the request where the rule should be applied, including cookies, arguments, and XML data\\n- <(a|abbr|acronym|address|applet|area|audioscope|b|base|basefront|bdo|bgsound|big|blackface|blink|blockquote|body|bq|br|button|caption|center|cite|code|col|colgroup|comment|dd|del|dfn|dir|div|dl|dt|em|embed|fieldset|fn|font|form|frame|frameset|h1|head|hr|html|i|iframe|ilayer|img|input|ins|isindex|kdb|keygen|label|layer|legend|li|limittext|link|listing|map|marquee|menu|meta|multicol|nobr|noembed|noframes|noscript|nosmartquotes|object|ol|optgroup|option|p|param|plaintext|pre|q|rt|ruby|s|samp|script|select|server|shadow|sidebar|small|spacer|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var|wbr|xml|xmp): specifies the HTML tags that should be checked for potential XSS attacks\\n- \\\\W: matches any non-word character (i.e. anything that is not a letter, number, or underscore)\\n\\nFor example, if a web request contains a cookie named \\\"session_id\\\" with the value \\\"<script>alert('XSS')</script>\\\", this expression would trigger a ModSecurity rule and block the request.\",\"explanation_id\":255,\"version\":49}"
  },
  {
    "id": "913120",
    "regex": "SecRule REQUEST_FILENAME|ARGS \"@pmf scanners-urls.data\"",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious activity by searching for specific patterns in the request filename or arguments. \\n\\nThe regex expression consists of two main parts: \\n1. REQUEST_FILENAME|ARGS: This specifies that the search should be performed on either the request filename or arguments. \\n2. \\\"@pmf scanners-urls.data\\\": This is the pattern being searched for. It uses the \\\"@pmf\\\" operator to search for a list of values in the \\\"scanners-urls.data\\\" file. \\n\\nFor example, if a request is made with a filename or argument that matches one of the values in the \\\"scanners-urls.data\\\" file, the expression will trigger and potentially block the request. \\n\\nOverall, this expression is used as a security measure to prevent potential attacks from known malicious sources.\",\"explanation_id\":257,\"version\":75}"
  },
  {
    "id": "953120",
    "regex": "SecRule RESPONSE_BODY \"<\\?(?!xml)\"",
    "explanation": "{\"explanation\":\"This expression is used to identify PHP code in a response body that is not part of an XML document. \\n\\nThe regex expression consists of the following parts:\\n- `<\\\\?`: matches the opening PHP tag \\\"<?\\\"\\n- `(?!xml)`: negative lookahead assertion that ensures the following characters are not \\\"xml\\\"\\n\\nFor example, this expression would match \\\"<?php echo 'Hello World'; ?>\\\" but not \\\"<?xml version='1.0'?><root><element><?php echo 'Hello World'; ?></element></root>\\\".\",\"explanation_id\":258,\"version\":6}"
  },
  {
    "id": "920160",
    "regex": "SecRule REQUEST_HEADERSContent-Length !^\\d+$ ",
    "explanation": "{\"explanation\":\"This expression is used to match requests that do not have a valid Content-Length header. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"REQUEST_HEADERS\\\" is a variable that represents the HTTP headers of the request.\\n- \\\"Content-Length\\\" is the name of the header being checked.\\n- \\\"!^\\\\d+$\\\" is a negative regular expression that matches any string that does not consist of one or more digits.\\n\\nFor example, if a request has a Content-Length header with a value of \\\"abc\\\", it will match this expression and be flagged as invalid.\",\"explanation_id\":262,\"version\":83}"
  },
  {
    "id": "920180",
    "regex": "SecRule REQUEST_METHOD \"^POST$\"",
    "explanation": "{\"explanation\":\"This expression is used to match HTTP POST requests in a web application firewall (WAF) rule. \\n\\nThe regex expression consists of two parts: \\n1. \\\"SecRule\\\" is a directive used in ModSecurity, a popular open-source WAF, to define a rule. \\n2. \\\"^POST$\\\" is a regular expression pattern that matches the exact string \\\"POST\\\" at the beginning and end of the input string. \\n\\nFor example, this rule would block any HTTP POST requests to a website: \\nSecRule REQUEST_METHOD \\\"^POST$\\\" \\\"deny,log,status:403\\\"\",\"explanation_id\":264,\"version\":89}"
  },
  {
    "id": "920220",
    "regex": "SecRule REQUEST_URI \"\\%((?!$|\\W)|[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})\"",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in the REQUEST_URI field of an HTTP request. \\n\\nThe regex expression consists of three parts: \\n1. \\\"\\\\%\\\" matches the percent sign, which is commonly used in SQL injection attacks to encode special characters.\\n2. \\\"(?!$|\\\\W)|[0-9a-fA-F]{2}\\\" is a negative lookahead that matches any two hexadecimal characters that are not followed by the end of the string or a non-word character. This is used to match encoded characters that are not part of an attack.\\n3. \\\"u[0-9a-fA-F]{4}\\\" matches any Unicode character that is encoded using the \\\\uXXXX format. \\n\\nFor example, if an attacker tries to inject the following SQL query into the REQUEST_URI field: \\nhttp://example.com/page.php?id=1%20UNION%20SELECT%201,2,3,4,5,6,7,8,9,10%20FROM%20users\\n\\nThe regex expression would match the \\\"%20\\\" (encoded space) and prevent the attack from being executed.\",\"explanation_id\":266,\"version\":25}"
  },
  {
    "id": "920290",
    "regex": "SecRule REQUEST_HEADERSHost ^$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect empty host headers in HTTP requests.\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"REQUEST_HEADERS\\\" is a variable that represents the headers of an HTTP request.\\n- \\\"Host\\\" is the specific header being targeted.\\n- \\\"^$\\\" is a regular expression that matches an empty string.\\n\\nFor example, if an HTTP request is made without a host header, this expression would trigger and potentially block the request.\",\"explanation_id\":268,\"version\":69}"
  },
  {
    "id": "920340",
    "regex": "SecRule REQUEST_HEADERSContent-Length !^0$ ",
    "explanation": "{\"explanation\":\"This expression is used to match HTTP requests that have a non-zero content length header. \\n\\nThe regex expression consists of the following parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `REQUEST_HEADERS`: This is a variable that contains the HTTP request headers.\\n- `Content-Length`: This is the name of the header that is being matched.\\n- `!^0$`: This is a negative lookahead assertion that matches any value that is not equal to zero.\\n\\nFor example, if a request has a content length header of \\\"100\\\", it will match this expression. However, if the content length header is \\\"0\\\", it will not match.\",\"explanation_id\":270,\"version\":59}"
  },
  {
    "id": "920200",
    "regex": "SecRule REQUEST_HEADERSRange|REQUEST_HEADERS:Request-Range ^bytes=((\\d+)?\\-(\\d+)?\\s*?\\s*){6} ",
    "explanation": "{\"explanation\":\"This expression is used to match HTTP requests that contain a \\\"Range\\\" header with a specific format for byte ranges. \\n\\nThe regex expression consists of several parts: \\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule that will be applied to incoming requests. \\n- \\\"REQUEST_HEADERSRange\\\" and \\\"REQUEST_HEADERS:Request-Range\\\" are two possible names for the \\\"Range\\\" header in an HTTP request. \\n- \\\"^bytes=\\\" matches the literal string \\\"bytes=\\\" at the beginning of the header value. \\n- \\\"((\\\\d+)?\\\\-(\\\\d+)?\\\\s*?\\\\s*){6}\\\" matches a sequence of six byte ranges, each consisting of an optional starting number (\\\\d+), a hyphen, an optional ending number (\\\\d+), and optional whitespace characters (\\\\s*). \\n\\nFor example, this expression would match a \\\"Range\\\" header with the value \\\"bytes=0-499 1000-1499 2000-2499 3000-3499 4000-4499 5000-5499\\\".\",\"explanation_id\":273,\"version\":46}"
  },
  {
    "id": "920121",
    "regex": "SecRule FILES_NAMES|FILES \"['\\\";=]\"",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious file names or file content that may contain characters commonly used in injection attacks. \\n\\nThe regex expression consists of two parts: \\n1. FILES_NAMES|FILES - This specifies the target variable(s) that the rule will be applied to. In this case, it is looking at both the file names and the file content. \\n2. \\\"['\\\\\\\";=]\\\" - This is the actual regular expression pattern that is being matched against. It looks for any occurrence of single quotes, double quotes, semicolons, or equal signs. \\n\\nFor example, if a file name or file content contains the string \\\"';DROP TABLE users;\\\", this expression would match and trigger a security rule.\",\"explanation_id\":275,\"version\":51}"
  },
  {
    "id": "930100",
    "regex": "SecRule REQUEST_URI_RAW|REQUEST_BODY|REQUEST_HEADERS|!REQUEST_HEADERSReferer|XML:/* (?i)(?:\\x5c|(?:%(?:c(?:0%(?:[2aq]f|5c|9v)|1%(?:[19p]c|8s|af))|2(?:5(?:c(?:0%25af|1%259c)|2f|5c)|%46|f)|(?:(?:f(?:8%8)?0%8|e)0%80%a|bg%q)f|%3(?:2(?:%(?:%6|4)6|F)|5%%63)|u(?:221[56]|002f|EFC8|F025)|1u|5c)|0x(?:2f|5c)|\\/))(?:%(?:(?:f(?:(?:c%80|8)%8)?0%8|e)0%80%ae|2(?:(?:5(?:c0%25a|2))?e|%45)|u(?:(?:002|ff0)e|2024)|%32(?:%(?:%6|4)5|E)|c0(?:%[256aef]e|\\.))|\\.(?:%0[01]|\\?)?|\\?\\.?|0x2e){2}(?:\\x5c|(?:%(?:c(?:0%(?:[2aq]f|5c|9v)|1%(?:[19p]c|8s|af))|2(?:5(?:c(?:0%25af|1%259c)|2f|5c)|%46|f)|(?:(?:f(?:8%8)?0%8|e)0%80%a|bg%q)f|%3(?:2(?:%(?:%6|4)6|F)|5%%63)|u(?:221[56]|002f|EFC8|F025)|1u|5c)|0x(?:2f|5c)|\\/)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect directory traversal attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- The first part (SecRule) specifies which part of the request to check (URI, body, headers, etc.)\\n- The second part (?i) sets the regex to be case-insensitive\\n- The third part is a complex pattern that matches various forms of directory traversal attempts, including encoded characters, backslashes, and different types of slashes. \\n\\nFor example, this expression would match requests that contain strings like \\\"../\\\", \\\"%2e%2e%2f\\\", or \\\"\\\\..\\\\\\\\\\\".\",\"explanation_id\":276,\"version\":10}"
  },
  {
    "id": "930110",
    "regex": "SecRule REQUEST_URI|REQUEST_BODY|REQUEST_HEADERS|!REQUEST_HEADERSReferer|XML:/* @pm ..\\ ../ ",
    "explanation": "{\"explanation\":\"This expression is used to detect attempts at directory traversal attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting and preventing attacks. \\n- REQUEST_URI|REQUEST_BODY|REQUEST_HEADERS|!REQUEST_HEADERSReferer|XML:/*: These are the variables that the rule will be applied to. In this case, it will check the URI, request body, and headers (excluding the Referer header) for any attempts at directory traversal. The XML:/* part indicates that the rule will also apply to any XML data in the request. \\n- @pm: This is a transformation function that will perform a string match against the specified patterns. \\n- ..\\\\ ../: These are the patterns that the function will match against. They represent attempts to navigate up the directory tree by using \\\"..\\\\\\\" or \\\"../\\\" in the request. \\n\\nFor example, if a user tries to access a file outside of the web root directory by adding \\\"../\\\" to the URI, this rule will detect it and prevent the request from being processed.\",\"explanation_id\":277,\"version\":41}"
  },
  {
    "id": "943100",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i)(?:\\.cookie\\b.*?;\\W*?(?:expires|domain)\\W*?=|\\bhttp-equiv\\W+set-cookie\\b) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential cookie tampering or injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule for web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: a set of variables to be checked for the presence of cookies or cookie-related data\\n- (?i): a flag indicating case-insensitive matching\\n- (?:\\\\.cookie\\\\b.*?;\\\\W*?(?:expires|domain)\\\\W*?=|\\\\bhttp-equiv\\\\W+set-cookie\\\\b): a non-capturing group that matches either a cookie string with \\\"expires\\\" or \\\"domain\\\" attributes, or a \\\"set-cookie\\\" string in an HTTP header\\n\\nFor example, this expression can detect if an attacker tries to inject a fake cookie with a malicious payload in the \\\"Cookie\\\" header or in the request parameters. It can also detect if an attacker tries to modify the expiration or domain attributes of a legitimate cookie.\",\"explanation_id\":280,\"version\":67}"
  },
  {
    "id": "943120",
    "regex": "SecRule ARGS_NAMES \"@rx ^(jsessionid|aspsessionid|asp.net_sessionid|phpsession|phpsessid|weblogicsession|session_id|session-id|cfid|cftoken|cfsid|jservsession|jwsession)$\"",
    "explanation": "{\"explanation\":\"This expression is used to detect session IDs in web application requests.\\nThe regex expression consists of a single group that matches any of the listed session ID names, separated by the \\\"|\\\" character. The \\\"@\\\" character at the beginning indicates that this is a ModSecurity rule, which is used for web application firewalling.\\nFor example, if a request contains a parameter named \\\"jsessionid\\\", this expression will match and trigger the ModSecurity rule to take action (such as blocking the request or logging it).\\nBegin:\\nRegex: SecRule ARGS_NAMES \\\"@rx ^(jsessionid|aspsessionid|asp.net_sessionid|phpsession|phpsessid|weblogicsession|session_id|session-id|cfid|cftoken|cfsid|jservsession|jwsession)$\\\"\",\"explanation_id\":281,\"version\":76}"
  },
  {
    "id": "921120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* [\\r\\n]\\W*?(?:content-(type|length)|set-cookie|location): ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential security threats in web requests by searching for specific patterns in the request headers and body.\\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting security threats.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the web request that the rule should be applied to. They include request cookies, cookie names, argument names, arguments, and XML data.\\n- [\\\\r\\\\n]\\\\W*?: This is a character class that matches any non-word character preceded by a carriage return or newline character. It is used to detect the beginning of a new line in the request header.\\n- (?:content-(type|length)|set-cookie|location): This is a non-capturing group that matches specific strings in the request header, including content-type, content-length, set-cookie, and location.\\n\\nFor example, this expression can be used to detect if a request contains a set-cookie header, which could indicate a potential cross-site scripting (XSS) attack. It can also be used to detect if a request contains a content-type header that specifies a file upload, which could indicate a potential file upload vulnerability.\",\"explanation_id\":282,\"version\":94}"
  },
  {
    "id": "921140",
    "regex": "SecRule REQUEST_HEADERS_NAMES|REQUEST_HEADERS \"(\\n|\\r)\"",
    "explanation": "{\"explanation\":\"This expression is used to detect any newline or carriage return characters in the request headers of a web application. \\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_HEADERS_NAMES|REQUEST_HEADERS: This specifies the target of the rule, which is either the names or the values of the request headers.\\n- \\\"(\\\\n|\\\\r)\\\": This is the regular expression pattern that matches any newline (\\\\n) or carriage return (\\\\r) characters in the target.\\n\\nFor example, if a request header contains the following string: \\\"User-Agent: Mozilla/5.0\\\\r\\\\n\\\", the regex expression would match the \\\"\\\\r\\\\n\\\" characters at the end of the string. This can be useful in detecting and preventing HTTP response splitting attacks, where an attacker injects newline characters into the request headers to manipulate the server's response.\",\"explanation_id\":285,\"version\":46}"
  },
  {
    "id": "921150",
    "regex": "SecRule ARGS_NAMES \"(\\n|\\r)\"",
    "explanation": "{\"explanation\":\"This expression is used to detect new line or carriage return characters in the input arguments of a web application. \\n\\nThe regex expression consists of two parts: \\n1. \\\"(\\\\n|\\\\r)\\\": This is a character class that matches either a new line character (\\\\n) or a carriage return character (\\\\r). \\n2. \\\"ARGS_NAMES\\\": This is a ModSecurity operator that matches the names of all arguments passed in the request.\\n\\nFor example, if a user submits a form with an input field containing a new line character, this expression will trigger a security rule and block the request.\",\"explanation_id\":286,\"version\":84}"
  },
  {
    "id": "921170",
    "regex": "SecRule ARGS_NAMES \".\"",
    "explanation": "{\"explanation\":\"This expression is used to match any character in the input string.\\nThe regex expression consists of:\\n- \\\"SecRule\\\" which is a directive used in ModSecurity to define a rule.\\n- \\\"ARGS_NAMES\\\" which is a variable that contains the names of all arguments passed in the request.\\n- \\\".\\\" which is a metacharacter that matches any character except newline.\\n\\nFor example, this expression can be used to match any character in the names of arguments passed in a request.\",\"explanation_id\":288,\"version\":74}"
  },
  {
    "id": "905110",
    "regex": "SecRule REQUEST_LINE \"^(GET /|OPTIONS \\*) HTTP/[12]\\.[01]$\"",
    "explanation": "{\"explanation\":\"This expression is used to match HTTP GET or OPTIONS requests with HTTP version 1.0 or 1.1. \\n\\nThe regex expression consists of the following parts:\\n- \\\"^\\\" indicates the start of the string\\n- \\\"GET /|OPTIONS \\\\*\\\" matches either \\\"GET /\\\" or \\\"OPTIONS *\\\" at the beginning of the request line\\n- \\\"HTTP/\\\" matches the literal string \\\"HTTP/\\\"\\n- \\\"[12]\\\" matches either \\\"1\\\" or \\\"2\\\"\\n- \\\"\\\\.\\\" matches a period\\n- \\\"[01]\\\" matches either \\\"0\\\" or \\\"1\\\"\\n- \\\"$\\\" indicates the end of the string\\n\\nFor example, this expression would match the following request lines:\\n- GET /index.html HTTP/1.1\\n- OPTIONS * HTTP/1.0\\n- GET / HTTP/1.0\\n\\nHowever, it would not match the following request lines:\\n- POST /submit.php HTTP/1.1\\n- GET /index.html HTTP/2.0\\n- OPTIONS / HTTP/1.1\",\"explanation_id\":289,\"version\":37}"
  },
  {
    "id": "942140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:\\b(?:m(?:s(?:ysaccessobjects|ysaces|ysobjects|ysqueries|ysrelationships|ysaccessstorage|ysaccessxml|ysmodules|ysmodules2|db)|aster\\.\\.sysdatabases|ysql\\.db)\\b|s(?:ys(?:\\.database_name|aux)\\b|chema(?:\\W*\\(|_name\\b)|qlite(_temp)?_master\\b)|d(?:atabas|b_nam)e\\W*\\(|information_schema\\b|pg_(catalog|toast)\\b|northwind\\b|tempdb\\b)) ",
    "explanation": "{\"explanation\":\"This expression is used for web application firewall (WAF) rules to detect SQL injection attacks. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for a WAF\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the HTTP request where the rule should be applied\\n- (?i:\\\\b(?:m(?:s(?:ysaccessobjects|ysaces|ysobjects|ysqueries|ysrelationships|ysaccessstorage|ysaccessxml|ysmodules|ysmodules2|db)|aster\\\\.\\\\.sysdatabases|ysql\\\\.db)\\\\b|s(?:ys(?:\\\\.database_name|aux)\\\\b|chema(?:\\\\W*\\\\(|_name\\\\b)|qlite(_temp)?_master\\\\b)|d(?:atabas|b_nam)e\\\\W*\\\\(|information_schema\\\\b|pg_(catalog|toast)\\\\b|northwind\\\\b|tempdb\\\\b)): the actual regular expression that matches SQL injection patterns\\n\\nFor example, this expression will match SQL injection attempts that include keywords such as \\\"SELECT\\\", \\\"FROM\\\", \\\"WHERE\\\", \\\"UNION\\\", \\\"DROP\\\", \\\"TABLE\\\", etc. in various forms and combinations. It also includes specific database names and system tables that are commonly targeted by attackers.\",\"explanation_id\":290,\"version\":88}"
  },
  {
    "id": "942230",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:[\\s()]case\\s*?\\()|(?:\\)\\s*?like\\s*?\\()|(?:having\\s*?[^\\s]+\\s*?[^\\w\\s])|(?:if\\s?\\([\\d\\w]\\s*?[=<>~])) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web applications.\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used by the ModSecurity web application firewall to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This specifies the locations in the HTTP request where the rule should be applied, such as cookies or query parameters.\\n- (?i:...): This is a non-capturing group that contains the actual regular expression pattern to match against the request data.\\n- (?:[\\\\s()]case\\\\s*?\\\\()|(?:\\\\)\\\\s*?like\\\\s*?\\\\()|(?:having\\\\s*?[^\\\\s]+\\\\s*?[^\\\\w\\\\s])|(?:if\\\\s?\\\\([\\\\d\\\\w]\\\\s*?[=<>~]): This is the actual regular expression pattern that matches various SQL injection attack patterns, such as \\\"CASE WHEN\\\" statements, \\\"LIKE\\\" clauses, \\\"HAVING\\\" clauses, and \\\"IF\\\" statements.\\n\\nFor example, this expression would match against a request that contains a cookie named \\\"username\\\" with the value \\\"admin' OR 1=1--\\\", which is a common SQL injection attack payload.\",\"explanation_id\":291,\"version\":48}"
  },
  {
    "id": "942240",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:alter\\s*?\\w+.*?(?:character|char)\\s+set\\s+\\w+)|([\\`];*?\\s*?waitfor\\s+(?:time|delay)\\s+[\\`])|(?:[\\`];.*?:\\s*?goto)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web applications. \\n\\nThe regex expression consists of three main parts: \\n1. The first part specifies the locations where the injection can occur, including request cookies, request cookie names, argument names, arguments, and XML. \\n2. The second part uses a non-capturing group to match common SQL injection patterns, including the use of \\\"alter\\\" statements to modify the character set, the use of \\\"waitfor\\\" statements to delay execution, and the use of \\\"goto\\\" statements to jump to other parts of the code. \\n3. The third part captures a specific pattern of SQL injection that involves the use of semicolons and asterisks to execute multiple statements. \\n\\nFor example, this expression would match the following SQL injection attempts: \\n- `SELECT * FROM users WHERE username = 'admin' AND password = 'password' OR 1=1; DROP TABLE users;'`\\n- `ALTER TABLE users CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;`\\n- `SELECT * FROM users WHERE username = 'admin'; WAITFOR DELAY '0:0:5'; --'`\",\"explanation_id\":292,\"version\":48}"
  },
  {
    "id": "942250",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:merge.*?using\\s*?\\()|(execute\\s*?immediate\\s*?[\\`])|(?:match\\s*?[\\w()+-]+\\s*?against\\s*?\\()) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that represent different parts of the web request where the SQL injection could occur.\\n- (?i:...): This is a non-capturing group that contains the actual regular expression pattern used to detect SQL injection attempts. It consists of three alternatives separated by the pipe symbol (|), each of which matches a different SQL injection technique. \\n\\nFor example, the first alternative matches SQL injection attempts that use the \\\"merge\\\" keyword followed by any characters and the \\\"using\\\" keyword followed by optional whitespace and an opening parenthesis. The second alternative matches SQL injection attempts that use the \\\"execute immediate\\\" keyword followed by an opening backtick character. The third alternative matches SQL injection attempts that use the \\\"match\\\" keyword followed by one or more word characters, parentheses, plus or minus signs, and the \\\"against\\\" keyword followed by optional whitespace and an opening parenthesis. \\n\\nOverall, this regex expression is used to detect SQL injection attempts in various parts of a web request, including cookies, arguments, and XML data. It does so by looking for specific patterns that are commonly used in SQL injection attacks.\",\"explanation_id\":293,\"version\":62}"
  },
  {
    "id": "942280",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:select\\s*?pg_sleep)|(?:waitfor\\s*?delay\\s?[\\`]+\\s?\\d)|(?:;\\s*?shutdown\\s*?(?:;|--|#|\\/\\*|{))) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attacks in web applications. \\n\\nThe regex expression consists of several parts: \\n\\n1. SecRule: This is a directive used by the ModSecurity module to define a rule. \\n2. REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it will check for SQL injection attacks in cookies, arguments, and XML data. \\n3. (?i:): This is a non-capturing group that specifies that the following pattern should be matched case-insensitively. \\n4. (?:select\\\\s*?pg_sleep)|(?:waitfor\\\\s*?delay\\\\s?[\\\\`]+\\\\s?\\\\d)|(?:;\\\\s*?shutdown\\\\s*?(?:;|--|#|\\\\/\\\\*|{)): This is the actual pattern that the rule will match against. It looks for three specific SQL injection attack patterns: \\n   - \\\"select pg_sleep\\\" \\n   - \\\"waitfor delay\\\" followed by one or more backticks (\\\\`) and a digit \\n   - \\\"; shutdown\\\" followed by one of several characters that could be used to comment out the rest of the query. \\n\\nFor example, if a user tries to inject the following into a form field: \\n\\n`' OR 1=1; shutdown --` \\n\\nThe rule will detect it and block the request.\",\"explanation_id\":295,\"version\":38}"
  },
  {
    "id": "942290",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:\\[\\$(?:ne|eq|lte?|gte?|n?in|mod|all|size|exists|type|slice|x?or|div|like|between|and)\\])) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks in web applications by searching for certain patterns in the request data. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting attacks. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, and XML data. \\n- (?i:...): This is a non-capturing group that contains the actual regular expression pattern. \\n- (?:\\\\[\\\\$(?:ne|eq|lte?|gte?|n?in|mod|all|size|exists|type|slice|x?or|div|like|between|and)\\\\]): This is the regular expression pattern that searches for certain operators that may indicate an attack. These operators include \\\"not equal to\\\", \\\"equal to\\\", \\\"less than or equal to\\\", \\\"greater than or equal to\\\", \\\"not in\\\", \\\"modulo\\\", \\\"all\\\", \\\"size\\\", \\\"exists\\\", \\\"type\\\", \\\"slice\\\", \\\"xor\\\", \\\"div\\\", \\\"like\\\", \\\"between\\\", and \\\"and\\\". \\n\\nFor example, if an attacker tries to inject SQL code into a form field, the regular expression pattern may detect the \\\"like\\\" operator used in the injection attempt and trigger the rule to block the request.\",\"explanation_id\":296,\"version\":29}"
  },
  {
    "id": "942350",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:create\\s+function\\s+.+\\s+returns)|(?:;\\s*?(?:select|create|rename|truncate|load|alter|delete|update|insert|desc)\\s*?[\\[(]?\\w{2})) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n\\n1. `SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*`: This part specifies the locations in the web request where the regex should be applied. It includes request cookies, arguments, and XML data. \\n\\n2. `(?i:(?:create\\\\s+function\\\\s+.+\\\\s+returns)|(?:;\\\\s*?(?:select|create|rename|truncate|load|alter|delete|update|insert|desc)\\\\s*?[\\\\[(]?\\\\w{2}))`: This part is the actual regex pattern that matches SQL injection attempts. It looks for two specific patterns: \\n- `create function <name> returns`: This is a common pattern used in SQL injection attacks to create a new function that can be used to execute arbitrary SQL code. \\n- `;<SQL command> <table name>`: This pattern matches various SQL commands that can be used to modify or extract data from a database. The `\\\\w{2}` at the end ensures that the table name is at least two characters long. \\n\\nFor example, if a web request contains a cookie named `user_id` with the value `1'; DROP TABLE users;--`, the regex would match the `'; DROP TABLE users;--` part and trigger a security rule to block the request.\",\"explanation_id\":297,\"version\":66}"
  },
  {
    "id": "942360",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:[\\d\\W]\\s+as\\s*?[\\`\\w]+\\s*?from)|(?:^[\\W\\d]+\\s*?(?:union|select|create|rename|truncate|load|alter|delete|update|insert|desc)\\b)|(?:(?:select|create|rename|truncate|load|alter|delete|update|insert|desc)\\s+(?:(?:group_)concat|char|load_file)\\s?\\(?)|(?:end\\s*?\\);)|([\\`]\\s+regexp\\W)|(?:[\\s(]load_file\\s*?\\()) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web server\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- (?i:...): a non-capturing group that contains several alternative patterns for SQL injection attempts, including:\\n  - (?:[\\\\d\\\\W]\\\\s+as\\\\s*?[\\\\`\\\\w]+\\\\s*?from): attempts to inject SQL code using the \\\"AS\\\" keyword\\n  - (?:^[\\\\W\\\\d]+\\\\s*?(?:union|select|create|rename|truncate|load|alter|delete|update|insert|desc)\\\\b): attempts to inject SQL code using various SQL keywords\\n  - (?:(?:select|create|rename|truncate|load|alter|delete|update|insert|desc)\\\\s+(?:(?:group_)concat|char|load_file)\\\\s?\\\\(?): attempts to inject SQL code using specific SQL functions\\n  - (?:end\\\\s*?\\\\);): attempts to inject SQL code using the \\\"end\\\" keyword\\n  - ([\\\\`]\\\\s+regexp\\\\W): attempts to inject SQL code using the \\\"REGEXP\\\" keyword\\n  - (?:[\\\\s(]load_file\\\\s*?\\\\()): attempts to inject SQL code using the \\\"LOAD_FILE\\\" function\\n\\nFor example, the regex would match the following strings:\\n- \\\"1 as username from users\\\"\\n- \\\"SELECT * FROM users WHERE id = 1 OR 1=1\\\"\\n- \\\"SELECT CONCAT(username, password) FROM users\\\"\\n- \\\"end; DROP TABLE users;\\\"\\n- \\\"` REGEXP '.*'\\\"\\n- \\\"SELECT load_file('/etc/passwd')\\\"\",\"explanation_id\":298,\"version\":29}"
  },
  {
    "id": "942120",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* (?i:(\\!\\=|\\&\\&|\\|\\||>>|<<|>=|<=|<>|<=>|\\bxor\\b|\\brlike\\b|\\bregexp\\b|\\bisnull\\b)|(?:not\\s+between\\s+0\\s+and)|(?:is\\s+null)|(like\\s+null)|(?:(?:^|\\W)in[+\\s]*\\([\\s\\d\\]+[^()]*\\))|(?:\\bxor\\b|<>|rlike(?:\\s+binary)?)|(?:regexp\\s+binary)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web application security. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- ARGS_NAMES|ARGS|XML/*: This specifies the input data to be checked for SQL injection attacks. \\n- (?i:...): This is a non-capturing group that matches any of the following: \\n  - \\\\!\\\\=|\\\\&\\\\&|\\\\|\\\\||>>|<<|>=|<=|<>|<=>|\\\\bxor\\\\b|\\\\brlike\\\\b|\\\\bregexp\\\\b|\\\\bisnull\\\\b: These are SQL operators that can be used in SQL injection attacks.\\n  - (?:not\\\\s+between\\\\s+0\\\\s+and): This matches the \\\"not between 0 and\\\" operator.\\n  - (?:is\\\\s+null): This matches the \\\"is null\\\" operator.\\n  - (like\\\\s+null): This matches the \\\"like null\\\" operator.\\n  - (?:^|\\\\W)in[+\\\\s]*\\\\([\\\\s\\\\d\\\\]+[^()]*\\\\): This matches the \\\"in\\\" operator with a list of values.\\n  - (?:\\\\bxor\\\\b|<>|rlike(?:\\\\s+binary)?): This matches the \\\"xor\\\", \\\"<>\\\", and \\\"rlike\\\" operators.\\n  - (?:regexp\\\\s+binary): This matches the \\\"regexp binary\\\" operator.\\n\\nFor example, this expression can detect SQL injection attacks such as \\\"1' or '1'='1\\\", \\\"1'; DROP TABLE users;\\\", and \\\"1' UNION SELECT * FROM users;\\\".\",\"explanation_id\":299,\"version\":74}"
  },
  {
    "id": "942210",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:@.+=\\s*?\\(\\s*?select)|(?:\\d+\\s*?(x?or|div|like|between|and)\\s*?\\d+\\s*?[\\-+])|(?:\\/\\w+;?\\s+(?:having|and|x?or|div|like|between|and|select)\\W)|(?:\\d\\s+group\\s+by.+\\()|(?:(?:;|#|--)\\s*?(?:drop|alter))|(?:(?:;|#|--)\\s*?(?:update|insert)\\s*?\\w{2})|(?:[^\\w]SET\\s*?@\\w+)|(?:(?:n?and|x?x?or|div|like|between|and|not|\\|\\||\\&\\&)[\\s(]+\\w+[\\s)]*?[!=+]+[\\s\\d]*?[\\`=()])) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- (?i:...): a non-capturing group that contains the actual regular expression pattern\\n- (?:@.+=\\\\s*?\\\\(\\\\s*?select): looks for SQL injection attempts that start with \\\"@variable = (select ...\\\"\\n- (?:\\\\d+\\\\s*?(x?or|div|like|between|and)\\\\s*?\\\\d+\\\\s*?[\\\\-+]): looks for SQL injection attempts that use logical operators like \\\"OR\\\", \\\"AND\\\", \\\"BETWEEN\\\", etc.\\n- (?:\\\\/\\\\w+;?\\\\s+(?:having|and|x?or|div|like|between|and|select)\\\\W): looks for SQL injection attempts that use SQL keywords like \\\"HAVING\\\", \\\"SELECT\\\", etc.\\n- (?:\\\\d\\\\s+group\\\\s+by.+\\\\(): looks for SQL injection attempts that use the \\\"GROUP BY\\\" clause\\n- (?:;|#|--)\\\\s*?(?:drop|alter): looks for SQL injection attempts that try to drop or alter database tables\\n- (?:;|#|--)\\\\s*?(?:update|insert)\\\\s*?\\\\w{2}: looks for SQL injection attempts that try to update or insert data into the database\\n- (?:[^\\\\w]SET\\\\s*?@\\\\w+): looks for SQL injection attempts that use the \\\"SET\\\" keyword to modify variables\\n- (?:n?and|x?x?or|div|like|between|and|not|\\\\|\\\\||\\\\&\\\\&)[\\\\s(]+\\\\w+[\\\\s)]*?[!=+]+[\\\\s\\\\d]*?[\\\\`=()]: looks for SQL injection attempts that use various logical operators and comparison operators to modify SQL queries.\\n\\nFor example, the regex would match the following SQL injection attempt: \\n\\\"SELECT * FROM users WHERE username = 'admin' AND password = 'password' OR 1=1; DROP TABLE users;\\\"\",\"explanation_id\":300,\"version\":36}"
  },
  {
    "id": "942260",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:union\\s*?(?:all|distinct|[(!@]*?)?\\s*?[([]*?\\s*?select\\s+)|(?:\\w+\\s+like\\s+[\\`])|(?:like\\s*?[\\`]\\%)|(?:[\\`]\\s*?like\\W*?[\\`\\d])|(?:[\\`]\\s*?(?:n?and|x?x?or|div|like|between|and|not|\\|\\||\\&\\&)\\s+[\\s\\w]+=\\s*?\\w+\\s*?having\\s+)|(?:[\\`]\\s*?\\*\\s*?\\w+\\W+[\\`])|(?:[\\`]\\s*?[^?\\w\\s=.;)(]+\\s*?[(@\\`]*?\\s*?\\w+\\W+\\w)|(?:select\\s+?[\\[\\]()\\s\\w\\.\\`-]+from\\s+)|(?:find_in_set\\s*?\\()) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests.\\nThe regex expression consists of several parts:\\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied.\\n- (?i:...): a non-capturing group that contains the actual regular expression pattern.\\n- (?:union\\\\s*?(?:all|distinct|[(!@]*?)?\\\\s*?[([]*?\\\\s*?select\\\\s+): matches the \\\"union select\\\" SQL injection technique, where the attacker tries to add a \\\"union select\\\" statement to the original SQL query.\\n- (?:\\\\w+\\\\s+like\\\\s+[\\\\`]): matches the \\\"like\\\" SQL injection technique, where the attacker tries to inject a \\\"like\\\" statement to the original SQL query.\\n- (?:like\\\\s*?[\\\\`]\\\\%): matches the \\\"like %\\\" SQL injection technique, where the attacker tries to inject a \\\"like %\\\" statement to the original SQL query.\\n- (?:[\\\\`]\\\\s*?like\\\\W*?[\\\\`\\\\d]): matches the \\\"like 'x'\\\" SQL injection technique, where the attacker tries to inject a \\\"like 'x'\\\" statement to the original SQL query.\\n- (?:[\\\\`]\\\\s*?(?:n?and|x?x?or|div|like|between|and|not|\\\\|\\\\||\\\\&\\\\&)\\\\s+[\\\\s\\\\w]+=\\\\s*?\\\\w+\\\\s*?having\\\\s+): matches various SQL injection techniques that involve injecting logical operators and/or \\\"having\\\" clauses to the original SQL query.\\n- (?:[\\\\`]\\\\s*?\\\\*\\\\s*?\\\\w+\\\\W+[\\\\`]): matches the \\\"select *\\\" SQL injection technique, where the attacker tries to inject a \\\"select *\\\" statement to the original SQL query.\\n- (?:[\\\\`]\\\\s*?[^?\\\\w\\\\s=.;)(]+\\\\s*?[(@\\\\`]*?\\\\s*?\\\\w+\\\\W+\\\\w): matches various SQL injection techniques that involve injecting special characters and/or function calls to the original SQL query.\\n- (?:select\\\\s+?[\\\\[\\\\]()\\\\s\\\\w\\\\.\\\\`-]+from\\\\s+): matches the \\\"select from\\\" SQL injection technique, where the attacker tries to inject a \\\"select from\\\" statement\",\"explanation_id\":301,\"version\":37}"
  },
  {
    "id": "942330",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:[\\`]\\s*?(x?or|div|like|between|and)\\s*?[\\`]?\\d)|(?:\\\\\\\\x(?:23|27|3d))|(?:^.?[\\`]$)|(?:(?:^[\\`\\\\\\\\]*?(?:[\\d\\`]+|[^\\`]+[\\`]))+\\s*?(?:n?and|x?x?or|div|like|between|and|not|\\|\\||\\&\\&)\\s*?[\\w\\`][+&!@().-])|(?:[^\\w\\s]\\w+\\s*?[|-]\\s*?[\\`]\\s*?\\w)|(?:@\\w+\\s+(and|x?or|div|like|between|and)\\s*?[\\`\\d]+)|(?:@[\\w-]+\\s(and|x?or|div|like|between|and)\\s*?[^\\w\\s])|(?:[^\\w\\s:]\\s*?\\d\\W+[^\\w\\s]\\s*?[\\`].)|(?:\\Winformation_schema|table_name\\W)) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web application requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the request where the rule should be applied\\n- (?i:...): a non-capturing group that contains the actual regular expression pattern\\n- (?:[\\\\`]\\\\s*?(x?or|div|like|between|and)\\\\s*?[\\\\`]?\\\\d): matches SQL operators (OR, XOR, DIV, LIKE, BETWEEN, AND) followed by a digit, optionally enclosed in backticks\\n- (?:\\\\\\\\\\\\\\\\x(?:23|27|3d)): matches hex-encoded characters for #, ', and =\\n- (?:^.?[\\\\`]$): matches a single backtick at the beginning or end of a line\\n- (?:...): matches various SQL injection patterns, such as concatenation of strings and SQL keywords, or the use of the information_schema database\\n- \\\\W: matches any non-word character (e.g. punctuation)\\n- \\\\w: matches any word character (e.g. letters, digits, underscore)\\n- \\\\s: matches any whitespace character\\n- \\\\d: matches any digit\\n\\nFor example, the regex would match the following SQL injection attempts:\\n- ' OR 1=1 --\\n- 1; DROP TABLE users\\n- SELECT * FROM information_schema.tables\\n- UNION ALL SELECT username, password FROM users\\n\\nOverall, the expression is designed to detect a wide range of SQL injection attempts by looking for specific patterns and keywords commonly used in such attacks.\",\"explanation_id\":302,\"version\":85}"
  },
  {
    "id": "942340",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:in\\s*?\\(+\\s*?select)|(?:(?:n?and|x?x?or|div|like|between|and|not|\\|\\||\\&\\&)\\s+[\\s\\w+]+(?:regexp\\s*?\\(|sounds\\s+like\\s*?[\\`]|[=\\d]+x))|([\\`]\\s*?\\d\\s*?(?:--|#))|(?:[\\`][\\%&<>^=]+\\d\\s*?(=|x?or|div|like|between|and))|(?:[\\`]\\W+[\\w+-]+\\s*?=\\s*?\\d\\W+[\\`])|(?:[\\`]\\s*?is\\s*?\\d.+[\\`]?\\w)|(?:[\\`]\\|?[\\w-]{3}[^\\w\\s.]+[\\`])|(?:[\\`]\\s*?is\\s*?[\\d.]+\\s*?\\W.*?[\\`])) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web server\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- (?i:...): a non-capturing group that contains the actual regular expression pattern\\n- (?:in\\\\s*?\\\\(+\\\\s*?select): matches the \\\"IN (SELECT ...)\\\" pattern commonly used in SQL injection attacks\\n- (?:(?:n?and|x?x?or|div|like|between|and|not|\\\\|\\\\||\\\\&\\\\&)\\\\s+[\\\\s\\\\w+]+(?:regexp\\\\s*?\\\\(|sounds\\\\s+like\\\\s*?[\\\\`]|[=\\\\d]+x)): matches various SQL keywords and operators followed by a space and one or more alphanumeric characters, which is a common pattern in SQL injection attacks\\n- ([\\\\`]\\\\s*?\\\\d\\\\s*?(?:--|#)): matches comments in SQL queries that start with \\\"--\\\" or \\\"#\\\" and are enclosed in backticks\\n- (?:[\\\\`][\\\\%&<>^=]+\\\\d\\\\s*?(=|x?or|div|like|between|and)): matches various SQL operators followed by a numeric value and enclosed in backticks\\n- (?:[\\\\`]\\\\W+[\\\\w+-]+\\\\s*?=\\\\s*?\\\\d\\\\W+[\\\\`]): matches SQL queries that contain a non-alphanumeric character followed by a word character or a plus or minus sign, then an equal sign, then a numeric value, all enclosed in backticks\\n- (?:[\\\\`]\\\\s*?is\\\\s*?\\\\d.+[\\\\`]?\\\\w): matches SQL queries that contain the \\\"IS\\\" keyword followed by a numeric value and other characters, enclosed in backticks\\n- (?:[\\\\`]\\\\|?[\\\\w-]{3}[^\\\\w\\\\s.]+[\\\\`]): matches SQL queries that contain a pipe symbol followed by three alphanumeric characters, then one or more non-alphanumeric characters, enclosed in backticks\\n- (?:[\\\\`]\\\\s*?is\\\\s*?[\\\\d.]+\\\\s*?\\\\W.*?[\\\\`]): matches SQL queries that contain the \\\"IS\\\" keyword followed by a numeric value and other characters, enclosed in backticks\",\"explanation_id\":303,\"version\":16}"
  },
  {
    "id": "942400",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i)\\b(?i:and)\\b\\s+(\\d{110}|[^=]{110})\\s*?[=]|\\b(?i:and)\\b\\s+(\\d{110}|[^=]{110})\\s*?[<>]|\\band\\b ?(?:\\d{110}|[\\\\][^=]{110}[\\\\]) ?[=<>]+|\\b(?i:and)\\b\\s+(\\d{110}|[^=]{110}) ",
    "explanation": "{\"explanation\":\"This expression is used to detect SQL injection attempts in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for web application firewall. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. \\n- (?i)\\\\b(?i:and)\\\\b\\\\s+(\\\\d{110}|[^=]{110})\\\\s*?[=]|\\\\b(?i:and)\\\\b\\\\s+(\\\\d{110}|[^=]{110})\\\\s*?[<>]|\\\\band\\\\b ?(?:\\\\d{110}|[\\\\\\\\][^=]{110}[\\\\\\\\]) ?[=<>]+|\\\\b(?i:and)\\\\b\\\\s+(\\\\d{110}|[^=]{110}): This is the actual regular expression that will match the SQL injection attempts. \\n\\nFor example, the regex will match any occurrence of the word \\\"and\\\" followed by either:\\n- 110 digits or non-equal characters followed by an equal sign\\n- 110 digits or non-equal characters followed by a less than or greater than sign\\n- The word \\\"and\\\" followed by either 110 digits or a backslash followed by 110 non-equal characters, followed by an equal, less than, or greater than sign, with optional spaces in between. \\n\\nOverall, this regex is looking for attempts to inject SQL code into web requests by checking for the presence of the \\\"and\\\" operator followed by certain patterns of characters.\",\"explanation_id\":304,\"version\":26}"
  },
  {
    "id": "942430",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* ((?:[\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>][^\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>]*?){12}) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks in web application security.\\nThe regex expression consists of the following parts:\\n- SecRule: a directive used in ModSecurity to define a rule\\n- ARGS_NAMES|ARGS|XML/*: a set of variables to be checked for potential attacks\\n- ((?:[\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>][^\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>]*?){12}): a group of characters that may indicate an attack, repeated 12 times\\n\\nFor example, this expression can detect attacks such as SQL injection or cross-site scripting by looking for specific characters that may be used in these attacks.\",\"explanation_id\":306,\"version\":33}"
  },
  {
    "id": "942450",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:\\A|[^\\d])0x[a-f\\d]{3}[a-f\\d]*)+ ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for web application firewall. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. \\n- (?i:(?:\\\\A|[^\\\\d])0x[a-f\\\\d]{3}[a-f\\\\d]*)+: This is the actual regular expression that matches hexadecimal values that could potentially be used in SQL injection attacks. \\n\\nFor example, if a user tries to input a hexadecimal value in a web form field, this expression will detect it and block the request.\",\"explanation_id\":308,\"version\":49}"
  },
  {
    "id": "942420",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES ((?:[\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>][^\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>]*?){8}) ",
    "explanation": "{\"explanation\":\"This expression is used to match a specific pattern in HTTP request cookies. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/: This part specifies the cookies to be checked. It includes all cookies except those containing \\\"__utm\\\" or \\\"_pk_ref\\\" in their names.\\n- REQUEST_COOKIES_NAMES: This specifies that the rule should be applied to the names of the cookies.\\n- ((?:[\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>][^\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>]*?){8}): This is the pattern to be matched. It consists of 8 groups of characters, each starting with a special character and followed by any number of non-special characters. \\n\\nFor example, this expression can be used to detect suspicious cookies that may indicate a potential attack on a web application.\",\"explanation_id\":310,\"version\":47}"
  },
  {
    "id": "942431",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* ((?:[\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>][^\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>]*?){6}) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks in web application security.\\nThe regex expression consists of the following parts:\\n- SecRule: a directive used in ModSecurity to define a rule\\n- ARGS_NAMES|ARGS|XML/*: a set of variables to be checked for potential attacks\\n- ((?:[\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>][^\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>]*?){6}): a group of characters that may indicate an attack, repeated six times\\n\\nFor example, this expression can detect attacks such as SQL injection or cross-site scripting by looking for specific characters that may be used in these attacks.\",\"explanation_id\":311,\"version\":28}"
  },
  {
    "id": "942421",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES ((?:[\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>][^\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>]*?){3}) ",
    "explanation": "{\"explanation\":\"This expression is used to match and block potentially malicious requests based on the presence of certain cookies in the request header. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for blocking requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/: This part of the expression specifies the cookies that should be checked for in the request header. The vertical bar \\\"|\\\" is used to separate different cookies, and the exclamation mark \\\"!\\\" is used to negate certain cookies. \\n- REQUEST_COOKIES_NAMES: This is a variable used to capture the names of the cookies that match the previous part of the expression. \\n- ((?:[\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>][^\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>]*?){3}): This part of the expression captures the values of the cookies that match the previous part of the expression. The values are captured using a regular expression that matches any character except for certain special characters, and the \\\"{3}\\\" specifies that the expression should match three times. \\n\\nFor example, if a request header contains a cookie named \\\"session_id\\\" with a value of \\\"abc123\\\", the expression would capture the name \\\"session_id\\\" and the value \\\"abc123\\\". If the request header contains any of the negated cookies (e.g. \\\"__utm\\\"), the expression would not match and the request would not be blocked.\",\"explanation_id\":314,\"version\":23}"
  },
  {
    "id": "942432",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* ((?:[\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>][^\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\\\\\\´\\’\\‘\\`\\<\\>]*?){2}) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web application requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: a directive used in ModSecurity to define a rule for web application firewall\\n- ARGS_NAMES|ARGS|XML/*: a set of variables to be checked for potential SQL injection attacks\\n- ((?:[\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>][^\\\\~\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+\\\\=\\\\{\\\\}\\\\[\\\\]\\\\|\\\\:\\\\;\\\\\\\\\\\\\\u00b4\\\\\\u2019\\\\\\u2018\\\\`\\\\<\\\\>]*?){2}): a regular expression pattern that matches any two consecutive characters that are not alphanumeric or underscore, followed by any number of non-special characters. This pattern is enclosed in a non-capturing group and repeated twice. \\n\\nFor example, if the request contains the parameter \\\"username\\\" with the value \\\"admin' OR 1=1 --\\\", the regex expression would match the string \\\"' OR\\\" and trigger the web application firewall to block the request.\",\"explanation_id\":315,\"version\":86}"
  },
  {
    "id": "933100",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:<\\?(?!xml\\s)|<\\?php|\\[(?:/|\\\\\\\\)?php\\]) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential PHP injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for web application firewall. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it includes cookies, arguments, and XML data. \\n- @rx: This is a ModSecurity operator that specifies a regular expression pattern to match against the selected variables. \\n- (?:<\\\\?(?!xml\\\\s)|<\\\\?php|\\\\[(?:/|\\\\\\\\\\\\\\\\)?php\\\\]): This is the regular expression pattern that matches PHP code injection attempts. It looks for the opening PHP tags <? or <?php, or the opening PHP tag inside square brackets [php], with optional forward slashes or backslashes before the word \\\"php\\\". \\n\\nFor example, if a web request contains the following string: \\n```\\nhttp://example.com/index.php?name=<script>phpinfo();</script>\\n```\\nThe regex expression will match the string \\\"<script>phpinfo();</script>\\\" and trigger the web application firewall to block the request.\",\"explanation_id\":316,\"version\":65}"
  },
  {
    "id": "933120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmf php-config-directives.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks targeting PHP configuration directives. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it includes cookies, arguments, and XML data.\\n- @pmf: This is a transformation function that will be applied to the data in the variables. In this case, it will look for exact matches of the string \\\"php-config-directives.data\\\".\\n\\nFor example, if an attacker tries to set a PHP configuration directive through a cookie or argument, this rule will trigger and block the request.\",\"explanation_id\":318,\"version\":13}"
  },
  {
    "id": "933130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmf php-variables.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks targeting PHP variables in web requests. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the locations in the web request where the rule will be applied. In this case, it includes cookies, arguments, and XML data.\\n- @pmf: This is a transformation function that will be applied to the data in the specified locations. In this case, it will look for any matches to the string \\\"php-variables.data\\\".\\n\\nFor example, if a web request contains a cookie or argument with the string \\\"php-variables.data\\\", this rule will trigger and potentially block the request. This can help prevent attacks that attempt to manipulate or exploit PHP variables in web applications.\",\"explanation_id\":319,\"version\":23}"
  },
  {
    "id": "933151",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @pmf php-function-names-933151.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks on a web application by searching for specific patterns in the HTTP request. \\n\\nThe regex expression consists of several parts: \\n\\n- SecRule: This is a directive used by the ModSecurity module to define a rule for inspecting HTTP requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will inspect for potential attacks. They include cookies, file names, and arguments passed in the request.\\n- @pmf: This is a transformation function that will be applied to the data being inspected. In this case, it will search for a list of PHP function names that are commonly used in attacks.\\n\\nFor example, if an attacker tries to pass a malicious PHP function name as an argument in the request, this expression will detect it and block the request.\",\"explanation_id\":323,\"version\":12}"
  },
  {
    "id": "933111",
    "regex": "SecRule FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X-File-Name @rx .*\\.(?:php\\d*|phtml)\\..*$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious files being uploaded or requested on a web server. \\n\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- FILES|REQUEST_HEADERSX-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X-File-Name: These are the variables being checked for the presence of the file name.\\n- @rx: This is a regular expression operator that indicates the following string is a regular expression.\\n- .*\\\\.(?:php\\\\d*|phtml)\\\\..*$: This is the regular expression pattern being matched. It matches any string that ends with \\\".php\\\" followed by zero or more digits or \\\".phtml\\\" and any characters after that.\\n\\nFor example, if a user tries to upload a file named \\\"malicious.php5.jpg\\\", this expression will detect it and block the request.\",\"explanation_id\":325,\"version\":13}"
  },
  {
    "id": "932140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx \\b(?:if(?:/i)?(?: not)?(?: exist\\b| defined\\b| errorlevel\\b| cmdextversion\\b|(?: |\\().*(?:\\bgeq\\b|\\bequ\\b|\\bneq\\b|\\bleq\\b|\\bgtr\\b|\\blss\\b|==))|for(/[dflr].*)* %+[^ ]+ in\\(.*\\)\\s?do) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential command injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web server\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the request where the rule should be applied (e.g. cookies, query parameters, XML payloads)\\n- @rx: indicates that the rule is a regular expression\\n- \\\\b(?:if(?:/i)?(?: not)?(?: exist\\\\b| defined\\\\b| errorlevel\\\\b| cmdextversion\\\\b|(?: |\\\\().*(?:\\\\bgeq\\\\b|\\\\bequ\\\\b|\\\\bneq\\\\b|\\\\bleq\\\\b|\\\\bgtr\\\\b|\\\\blss\\\\b|==))|for(/[dflr].*)* %+[^ ]+ in\\\\(.*\\\\)\\\\s?do): the actual regular expression that matches various forms of command injection attempts, including if statements, for loops, and comparison operators. \\n\\nFor example, this rule would match the following request:\\n```\\nGET /example.php?param1=ls%20-al%20/ HTTP/1.1\\nHost: example.com\\n```\\nbecause the query parameter \\\"param1\\\" contains the command \\\"ls -al /\\\". \\n\\nNote that this rule alone may generate false positives or miss some attacks, and should be used in conjunction with other security measures.\",\"explanation_id\":326,\"version\":89}"
  },
  {
    "id": "932171",
    "regex": "SecRule ARGS_NAMES|ARGS|FILES_NAMES \"^\\(\\s*\\)\\s+{\"",
    "explanation": "{\"explanation\":\"This expression is used to match a regular expression pattern in ModSecurity, a web application firewall. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a ModSecurity directive that specifies a rule to be applied to incoming requests.\\n- ARGS_NAMES|ARGS|FILES_NAMES: This is a ModSecurity operator that specifies the target of the rule. In this case, it matches against the names of request parameters (ARGS_NAMES), the values of request parameters (ARGS), and the names of uploaded files (FILES_NAMES).\\n- \\\"^\\\\(\\\\s*\\\\)\\\\s+{\\\": This is the regular expression pattern that is matched against the target. It matches a string that starts with an opening parenthesis followed by zero or more whitespace characters, then a closing parenthesis, one or more whitespace characters, and finally an opening curly brace.\\n\\nFor example, this expression can be used to detect and block requests that contain a function call with an empty argument list, such as \\\"() {\\\" or \\\"foo() {\\\".\",\"explanation_id\":328,\"version\":63}"
  },
  {
    "id": "941130",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/* (?i)[\\s\\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\\/html|pattern(?=.*?=)|formaction|\\@import|base64)\\b ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential attacks in web requests by matching against various parts of the request, including cookies, headers, and arguments. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/*: specifies the different parts of the request to match against, including cookies, headers, arguments, and XML elements\\n- (?i): sets the regex to be case-insensitive\\n- [\\\\s\\\\S]: matches any character, including newlines\\n- (?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\\\\/html|pattern(?=.*?=)|formaction|\\\\@import|base64): specifies the different attack patterns to match against, including attempts to load external resources, injection of malicious code, and encoding of malicious data\\n- \\\\b: matches a word boundary to ensure that the attack pattern is not part of a larger word\\n\\nFor example, this expression could be used to detect attempts to inject malicious code into a web form by encoding it in base64 and submitting it as an argument, or attempts to load an external script using the \\\"xlink:href\\\" attribute in an XML element.\",\"explanation_id\":329,\"version\":1}"
  },
  {
    "id": "941140",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* (?i)(?:<(?:(?:apple|objec)t|isindex|embed|style|form|meta)\\b[^>]*?>[\\s\\S]*?|(?:=|U\\s*?R\\s*?L\\s*?\\()\\s*?[^>]*?\\s*?S\\s*?C\\s*?R\\s*?I\\s*?P\\s*?T\\s*?:) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential XSS attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied\\n- (?i): sets the regex to be case-insensitive\\n- (?:<(?:(?:apple|objec)t|isindex|embed|style|form|meta)\\\\b[^>]*?>[\\\\s\\\\S]*?|(?:=|U\\\\s*?R\\\\s*?L\\\\s*?\\\\()\\\\s*?[^>]*?\\\\s*?S\\\\s*?C\\\\s*?R\\\\s*?I\\\\s*?P\\\\s*?T\\\\s*?:): the actual regex pattern that matches potential XSS attacks in the specified locations\\n\\nFor example, this expression would match the following strings:\\n- <script>alert('XSS')</script>\\n- <img src=x onerror=alert('XSS')>\\n- <a href=\\\"javascript:alert('XSS')\\\">Click me</a>\",\"explanation_id\":330,\"version\":24}"
  },
  {
    "id": "941210",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(j|(&#x?0*((74)|(4A)|(106)|(6A));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(a|(&#x?0*((65)|(41)|(97)|(61));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(v|(&#x?0*((86)|(56)|(118)|(76));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(a|(&#x?0*((65)|(41)|(97)|(61));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(s|(&#x?0*((83)|(53)|(115)|(73));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(c|(&#x?0*((67)|(43)|(99)|(63));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(r|(&#x?0*((82)|(52)|(114)|(72));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(i|(&#x?0*((73)|(49)|(105)|(69));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(p|(&#x?0*((80)|(50)|(112)|(70));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(t|(&#x?0*((84)|(54)|(116)|(74));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(:|(&((#x?0*((58)|(3A));?)|(colon;)))).) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for the ModSecurity module in Apache web servers\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied (e.g. cookies, query parameters, XML data)\\n- (?i:...): a non-capturing group that matches a specific pattern of characters, ignoring case sensitivity\\n- (j|(&#x?0*((74)|(4A)|(106)|(6A));?)): matches the letter \\\"j\\\" or its equivalent Unicode or HTML entity code\\n- ([\\\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*: matches any number of whitespace characters or their equivalent codes\\n- (a|(&#x?0*((65)|(41)|(97)|(61));?)): matches the letter \\\"a\\\" or its equivalent codes\\n- (v|(&#x?0*((86)|(56)|(118)|(76));?)): matches the letter \\\"v\\\" or its equivalent codes\\n- (s|(&#x?0*((83)|(53)|(115)|(73));?)): matches the letter \\\"s\\\" or its equivalent codes\\n- (c|(&#x?0*((67)|(43)|(99)|(63));?)): matches the letter \\\"c\\\" or its equivalent codes\\n- (r|(&#x?0*((82)|(52)|(114)|(72));?)): matches the letter \\\"r\\\" or its equivalent codes\\n- (i|(&#x?0*((73)|(49)|(105)|(69));?)): matches the letter \\\"i\\\" or its equivalent codes\\n- (p|(&#x?0*((80)|(50)|(112)|(70));?)): matches the letter \\\"p\\\" or its equivalent codes\\n- (t|(&#x?0*((84)|(54)|(116)|(74));?))([\\\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*: matches the letter \\\"t\\\" or its equivalent codes, followed by any number of whitespace characters or their equivalent codes\\n- (:|(&((#x?0*((58)|(3A));?)|(colon;))))\",\"explanation_id\":331,\"version\":37}"
  },
  {
    "id": "941220",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(v|(&#x?0*((86)|(56)|(118)|(76));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(b|(&#x?0*((66)|(42)|(98)|(62));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(s|(&#x?0*((83)|(53)|(115)|(73));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(c|(&#x?0*((67)|(43)|(99)|(63));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(r|(&#x?0*((82)|(52)|(114)|(72));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(i|(&#x?0*((73)|(49)|(105)|(69));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(p|(&#x?0*((80)|(50)|(112)|(70));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(t|(&#x?0*((84)|(54)|(116)|(74));?))([\\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(:|(&((#x?0*((58)|(3A));?)|(colon;)))).) ",
    "explanation": "{\"explanation\":\"This expression is used to detect HTTP requests that contain a specific string of characters. \\n\\nThe regex expression consists of several parts: \\n- The expression starts with a SecRule command, which is used in web application firewalls to define security rules. \\n- The expression then specifies different parts of the HTTP request that should be checked, including cookies, arguments, and XML data. \\n- The main part of the expression is a series of character groups that spell out the word \\\"script\\\" using different ASCII codes and HTML entities. These character groups are separated by optional tabs, newlines, and spaces. \\n- The expression ends with a colon or HTML entity for a colon, followed by any character. \\n\\nFor example, this expression could be used to detect HTTP requests that contain the word \\\"script\\\" in various forms, which could indicate a potential cross-site scripting (XSS) attack.\",\"explanation_id\":332,\"version\":22}"
  },
  {
    "id": "941240",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* <[?]?import[\\s\\/+\\S]*?implementation[\\s\\/+]*?= ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential XML External Entity (XXE) attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive in ModSecurity, a web application firewall, that allows the definition of rules to inspect and filter web requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will inspect for the presence of the XXE payload. They include request cookies, arguments, and XML data.\\n- <[?]?import[\\\\s\\\\/+\\\\S]*?implementation[\\\\s\\\\/+]*?= : This is the actual regular expression that matches the XXE payload. It looks for the string \\\"import\\\" followed by any number of whitespace or forward slashes, then \\\"implementation\\\", and finally an equal sign.\\n\\nFor example, if an attacker sends a request with the following payload in an XML parameter:\\n<!DOCTYPE foo [<!ENTITY xxe SYSTEM \\\"file:///etc/passwd\\\">]>\\n<foo>&xxe;</foo>\\n\\nThe regular expression will match the \\\"ENTITY xxe SYSTEM\\\" part, triggering the ModSecurity rule and blocking the request.\",\"explanation_id\":333,\"version\":59}"
  },
  {
    "id": "941250",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<META[\\s/+].*?http-equiv[\\s/+]*=[\\s/+]*[\\\\`]?(((c|(&#x?0*((67)|(43)|(99)|(63));?)))|((r|(&#x?0*((82)|(52)|(114)|(72));?)))|((s|(&#x?0*((83)|(53)|(115)|(73));?))))) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential Cross-Site Scripting (XSS) attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting and blocking malicious requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: This specifies the locations in the request where the rule should be applied. It includes request cookies, arguments, and XML data.\\n- (?i:...): This is a non-capturing group that specifies the pattern to match. The \\\"i\\\" flag makes the matching case-insensitive.\\n- <META[\\\\s/+].*?http-equiv[\\\\s/+]*=[\\\\s/+]*[\\\\\\\\`]?(((c|(&#x?0*((67)|(43)|(99)|(63));?)))|((r|(&#x?0*((82)|(52)|(114)|(72));?)))|((s|(&#x?0*((83)|(53)|(115)|(73));?)))): This is the pattern to match. It looks for a <META> tag with an HTTP-EQUIV attribute that contains certain characters (c, r, or s) or their corresponding HTML entities.\\n\\nFor example, this expression would match the following request:\\n```\\nGET /index.html HTTP/1.1\\nHost: example.com\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\nAccept-Language: en-US,en;q=0.5\\nAccept-Encoding: gzip, deflate\\nReferer: http://example.com/search?q=<script>alert('XSS')</script>\\nCookie: PHPSESSID=1234567890abcdef; username=admin; password=secret\\nConnection: keep-alive\\nUpgrade-Insecure-Requests: 1\\n```\\nbecause it contains a <META> tag with an HTTP-EQUIV attribute that includes the letter \\\"s\\\". This could potentially be used to inject a script into the page and execute arbitrary code in the user's browser.\",\"explanation_id\":334,\"version\":92}"
  },
  {
    "id": "941270",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<LINK[\\s/+].*?href[\\s/+]*=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious links in HTTP requests.\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity to define a rule.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. In this case, it will look for the pattern in cookies, arguments, and XML data.\\n- (?i:<LINK[\\\\s/+].*?href[\\\\s/+]*=): This is the pattern that the rule will look for. It starts with the case-insensitive string \\\"<LINK\\\", followed by one or more whitespace or forward slash characters, followed by any number of characters (as few as possible) until it finds the string \\\"href\\\", followed by zero or more whitespace or forward slash characters, and finally an equal sign.\\n\\nFor example, if a request contains the following HTML code:\\n<a href=\\\"http://example.com\\\">Click here</a>\\nThe regex expression will match the string \\\"<a href=\\\"http://example.com\\\">\\\".\",\"explanation_id\":335,\"version\":93}"
  },
  {
    "id": "941280",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<BASE[\\s/+].*?href[\\s/+]*=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious activity in web requests by searching for the presence of a base tag with a potentially dangerous href attribute.\\nThe regex expression consists of several parts:\\n- SecRule: This is a directive used in ModSecurity, a web application firewall, to define a rule for detecting and blocking potentially malicious requests.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are different variables that the rule will search for the pattern in. REQUEST_COOKIES and REQUEST_COOKIES_NAMES refer to cookies sent in the request, ARGS_NAMES and ARGS refer to query parameters and POST data, and XML:/* refers to XML data in the request.\\n- (?i:<BASE[\\\\s/+].*?href[\\\\s/+]*=): This is the actual regular expression pattern being searched for. It looks for a case-insensitive match of the string \\\"<BASE\\\" followed by one or more whitespace or forward slash characters, followed by any number of characters (as few as possible) before the string \\\"href\\\" followed by zero or more whitespace or forward slash characters and an equals sign.\\n\\nFor example, this rule would detect a request with the following base tag:\\n<base href=\\\"/evil.js\\\">\\n\\nIt would also detect a request with the following base tag:\\n<base href=\\\"http://example.com/evil.js\\\">\\n\\nBut it would not detect a request with the following base tag:\\n<base href=\\\"https://example.com/good.js\\\">\",\"explanation_id\":336,\"version\":78}"
  },
  {
    "id": "941300",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:<OBJECT[\\s/+].*?((type)|(codetype)|(classid)|(code)|(data))[\\s/+]*=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious code injection attempts in HTTP requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for detecting and preventing attacks.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, and XML data.\\n- (?i:<OBJECT[\\\\s/+].*?((type)|(codetype)|(classid)|(code)|(data))[\\\\s/+]*=): This is the actual regular expression that will be used to match against the variables. It looks for an HTML <OBJECT> tag with attributes that include \\\"type\\\", \\\"codetype\\\", \\\"classid\\\", \\\"code\\\", or \\\"data\\\". \\n\\nFor example, if an attacker tries to inject malicious code into a request by adding an <OBJECT> tag with a \\\"codebase\\\" attribute, this rule would detect it and block the request.\",\"explanation_id\":337,\"version\":63}"
  },
  {
    "id": "941310",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @rx (?:¾|¼).*(?:¾|¼|>)|(?:¾|¼|<).*(?:¾|¼) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential malicious input in HTTP requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for detecting and preventing attacks. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that the rule will be applied to. They include request cookies, cookie names, argument names, arguments, and XML data. \\n- @rx: This is a flag that specifies that the rule is a regular expression. \\n- (?:\\u00be|\\u00bc).*(?:\\u00be|\\u00bc|>)|(?:\\u00be|\\u00bc|<).*(?:\\u00be|\\u00bc): This is the actual regular expression that will be used to match against the input. It looks for any string that contains either \\u00be or \\u00bc, followed by any number of characters, and ending with either \\u00be, \\u00bc, or > (in the first case) or starting with either \\u00be, \\u00bc, or < (in the second case). \\n\\nFor example, if an attacker tries to inject the string \\\"\\u00bc<script>alert('XSS')</script>\\u00be\\\" into a request parameter, this rule will detect it and block the request.\",\"explanation_id\":338,\"version\":16}"
  },
  {
    "id": "941120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* (?i)([\\s\\`;\\/0-9\\=\\x0B\\x09\\x0C\\x3B\\x2C\\x28\\x3B]+on[a-zA-Z]+[\\s\\x0B\\x09\\x0C\\x3B\\x2C\\x28\\x3B]*?=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for web application firewall. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. \\n- (?i): This is a flag that makes the regex case-insensitive. \\n- ([\\\\s\\\\`;\\\\/0-9\\\\=\\\\x0B\\\\x09\\\\x0C\\\\x3B\\\\x2C\\\\x28\\\\x3B]+on[a-zA-Z]+[\\\\s\\\\x0B\\\\x09\\\\x0C\\\\x3B\\\\x2C\\\\x28\\\\x3B]*?=): This is the actual regex pattern that matches potential SQL injection attacks. It looks for any string that contains the word \\\"on\\\" followed by any alphabetic characters, preceded by a sequence of characters that may include whitespace, semicolons, slashes, digits, equal signs, and other special characters. \\n\\nFor example, if a web request contains a parameter like \\\"id=1; DROP TABLE users\\\", this regex will match it and trigger the web application firewall to block the request.\",\"explanation_id\":339,\"version\":61}"
  },
  {
    "id": "941150",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/* (?i)\\b(?:s(?:tyle|rc)|href)\\b[\\s\\S]*?= ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential XSS attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule for web application firewall. \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/*: These are the variables that the rule will be applied to. It includes request cookies, request headers, arguments, and XML data. \\n- (?i): This is a flag that makes the regex case-insensitive. \\n- \\\\b(?:s(?:tyle|rc)|href)\\\\b: This is the pattern that matches the HTML attributes that are commonly used in XSS attacks. It matches the words \\\"style\\\", \\\"src\\\", or \\\"href\\\" surrounded by word boundaries. \\n- [\\\\s\\\\S]*?: This matches any character (including newlines) zero or more times, but as few times as possible. \\n- =: This matches the equal sign that follows the attribute name. \\n\\nFor example, this expression will match the following input: \\n- <img src=x onerror=alert(1)>\\n- <script>alert(1)</script>\\n- <a href=\\\"javascript:alert(1)\\\">click me</a>\",\"explanation_id\":340,\"version\":26}"
  },
  {
    "id": "941330",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:[\\\\][ ]*(([^a-z0-9~_:\\ ])|(in)).*?(((l|(\\\\\\\\u006C))(o|(\\\\\\\\u006F))(c|(\\\\\\\\u0063))(a|(\\\\\\\\u0061))(t|(\\\\\\\\u0074))(i|(\\\\\\\\u0069))(o|(\\\\\\\\u006F))(n|(\\\\\\\\u006E)))|((n|(\\\\\\\\u006E))(a|(\\\\\\\\u0061))(m|(\\\\\\\\u006D))(e|(\\\\\\\\u0065)))|((o|(\\\\\\\\u006F))(n|(\\\\\\\\u006E))(e|(\\\\\\\\u0065))(r|(\\\\\\\\u0072))(r|(\\\\\\\\u0072))(o|(\\\\\\\\u006F))(r|(\\\\\\\\u0072)))|((v|(\\\\\\\\u0076))(a|(\\\\\\\\u0061))(l|(\\\\\\\\u006C))(u|(\\\\\\\\u0075))(e|(\\\\\\\\u0065))(O|(\\\\\\\\u004F))(f|(\\\\\\\\u0066)))).*?=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for a web application firewall\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the web request where the rule should be applied (e.g. cookies, arguments, XML)\\n- (?i:[\\\\\\\\][ ]*(([^a-z0-9~_:\\\\ ])|(in)).*?(((l|(\\\\\\\\\\\\\\\\u006C))(o|(\\\\\\\\\\\\\\\\u006F))(c|(\\\\\\\\\\\\\\\\u0063))(a|(\\\\\\\\\\\\\\\\u0061))(t|(\\\\\\\\\\\\\\\\u0074))(i|(\\\\\\\\\\\\\\\\u0069))(o|(\\\\\\\\\\\\\\\\u006F))(n|(\\\\\\\\\\\\\\\\u006E)))|((n|(\\\\\\\\\\\\\\\\u006E))(a|(\\\\\\\\\\\\\\\\u0061))(m|(\\\\\\\\\\\\\\\\u006D))(e|(\\\\\\\\\\\\\\\\u0065)))|((o|(\\\\\\\\\\\\\\\\u006F))(n|(\\\\\\\\\\\\\\\\u006E))(e|(\\\\\\\\\\\\\\\\u0065))(r|(\\\\\\\\\\\\\\\\u0072))(r|(\\\\\\\\\\\\\\\\u0072))(o|(\\\\\\\\\\\\\\\\u006F))(r|(\\\\\\\\\\\\\\\\u0072)))|((v|(\\\\\\\\\\\\\\\\u0076))(a|(\\\\\\\\\\\\\\\\u0061))(l|(\\\\\\\\\\\\\\\\u006C))(u|(\\\\\\\\\\\\\\\\u0075))(e|(\\\\\\\\\\\\\\\\u0065))(O|(\\\\\\\\\\\\\\\\u004F))(f|(\\\\\\\\\\\\\\\\u0066)))).*?=: the actual regular expression that matches potential SQL injection attacks\\n\\nFor example, this expression would match a request parameter that contains the string \\\"SELECT * FROM users\\\" or \\\"DROP TABLE users\\\".\",\"explanation_id\":341,\"version\":93}"
  },
  {
    "id": "941340",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:[\\\\][ ]*(([^a-z0-9~_:\\ ])|(in)).+?[.].+?=) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web requests. \\n\\nThe regex expression consists of several parts: \\n\\n1. `SecRule` - This is a directive used by the ModSecurity module to define a rule for web application firewall.\\n2. `REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*` - This specifies the locations in the web request where the rule should be applied. It can be applied to request cookies, arguments, or XML data.\\n3. `(?i:[\\\\\\\\][ ]*(([^a-z0-9~_:\\\\ ])|(in)).+?[.].+?=)` - This is the actual regular expression used to detect SQL injection attacks. It looks for any string that starts with a backslash followed by any number of spaces, then either a character that is not a letter, number, tilde, underscore, colon, or space, or the word \\\"in\\\". It then looks for any characters up to a period, followed by any characters up to an equal sign. This is a common pattern used in SQL injection attacks to inject malicious code into a database query.\\n\\nFor example, if a web request contains a cookie with the name \\\"username\\\" and the value \\\"admin' OR 1=1 --\\\", the regular expression would match the string \\\"\\\\ username=admin' OR 1=1 --\\\". This would trigger the web application firewall to block the request and prevent the SQL injection attack.\",\"explanation_id\":342,\"version\":90}"
  },
  {
    "id": "913110",
    "regex": "SecRule REQUEST_HEADERS_NAMES|REQUEST_HEADERS \"@pmf scanners-headers.data\"",
    "explanation": "{\"explanation\":\"This expression is used to detect and prevent web application attacks by identifying and blocking requests that contain headers commonly used by scanners and attackers.\\n\\nThe regex expression consists of the following parts:\\n- SecRule: This is a directive used by the ModSecurity module to define a rule.\\n- REQUEST_HEADERS_NAMES|REQUEST_HEADERS: This specifies that the rule should be applied to either the names or values of the request headers.\\n- \\\"@pmf scanners-headers.data\\\": This is a regular expression pattern that matches any request header name or value that contains any of the strings listed in the \\\"scanners-headers.data\\\" file.\\n\\nFor example, if a request contains a header named \\\"User-Agent\\\" with a value of \\\"sqlmap\\\", it would be blocked by this rule because \\\"sqlmap\\\" is listed in the \\\"scanners-headers.data\\\" file.\",\"explanation_id\":343,\"version\":19}"
  },
  {
    "id": "953100",
    "regex": "SecRule RESPONSE_BODY \"@pmf php-errors.data\"",
    "explanation": "{\"explanation\":\"This expression is used to detect if the response body of a web application contains any PHP error messages. \\n\\nThe regex expression consists of two parts: \\n1. \\\"SecRule\\\" is a directive used in ModSecurity to define a rule that will be applied to incoming requests or outgoing responses. \\n2. \\\"@pmf php-errors.data\\\" is a regular expression pattern that matches any string containing the phrase \\\"php-errors.data\\\". The \\\"@\\\" symbol indicates that this is a predefined operator in ModSecurity that performs a partial match on the response body. \\n\\nFor example, if the response body contains the string \\\"Fatal error: Call to undefined function\\\", this expression will trigger a ModSecurity rule and potentially block the request.\",\"explanation_id\":345,\"version\":36}"
  },
  {
    "id": "920190",
    "regex": "SecRule REQUEST_HEADERSRange|REQUEST_HEADERS:Request-Range (\\d+)\\-(\\d+)\\ ",
    "explanation": "{\"explanation\":\"This expression is used to match a range of values in the request headers of an HTTP request. \\n\\nThe regex expression consists of two parts separated by a pipe symbol. The first part, \\\"REQUEST_HEADERSRange\\\", matches the \\\"Range\\\" header in the request. The second part, \\\"REQUEST_HEADERS:Request-Range\\\", matches the \\\"Request-Range\\\" header in the request. \\n\\nThe expression then uses parentheses to capture two groups of digits (\\\\d+), separated by a hyphen. These groups represent the start and end values of the range being requested. \\n\\nFor example, if the request includes a \\\"Range\\\" header with the value \\\"bytes=100-200\\\", this expression would capture \\\"100\\\" as the first group and \\\"200\\\" as the second group. \\n\\nBegin:\\nRegex:SecRule REQUEST_HEADERSRange|REQUEST_HEADERS:Request-Range (\\\\d+)\\\\-(\\\\d+)\\\\\",\"explanation_id\":347,\"version\":64}"
  },
  {
    "id": "920210",
    "regex": "SecRule REQUEST_HEADERSConnection \\b(keep-alive|close)\\s?(keep-alive|close)\\b ",
    "explanation": "{\"explanation\":\"This expression is used to match the value of the \\\"Connection\\\" header in an HTTP request to either \\\"keep-alive\\\" or \\\"close\\\". It is commonly used in web application firewalls to detect and prevent certain types of attacks.\\n\\nThe regex expression consists of three main parts: \\n\\n1. \\\"SecRule\\\" - This is a directive used in ModSecurity, a web application firewall, to define a rule that will be applied to incoming HTTP requests.\\n\\n2. \\\"REQUEST_HEADERSConnection\\\" - This is the name of the HTTP header that the rule will be applied to. In this case, it is the \\\"Connection\\\" header.\\n\\n3. \\\"\\\\b(keep-alive|close)\\\\s?(keep-alive|close)\\\\b\\\" - This is the regular expression that defines the allowed values for the \\\"Connection\\\" header. The \\\"\\\\b\\\" characters indicate word boundaries, and the \\\"|\\\" character is used to separate the two possible values. The \\\"\\\\s?\\\" indicates that there may or may not be a space between the two values.\\n\\nFor example, this expression would match the following \\\"Connection\\\" header values: \\\"keep-alive\\\", \\\"close\\\", \\\"keep-alive close\\\", \\\"close keep-alive\\\", \\\"keep-aliveclose\\\", and \\\"closekeep-alive\\\". It would not match values like \\\"keep-alive-forever\\\" or \\\"close-connection\\\".\",\"explanation_id\":348,\"version\":21}"
  },
  {
    "id": "920240",
    "regex": "SecRule REQUEST_HEADERSContent-Type ^(application\\/x-www-form-urlencoded|text\\/xml)(?:;(?:\\s?charset\\s?=\\s?[\\w\\d\\-]{118})?)??$ ",
    "explanation": "{\"explanation\":\"This expression is used to match the content type of a HTTP request header. \\n\\nThe regex expression consists of several parts:\\n- `SecRule`: This is a directive used in ModSecurity to define a rule.\\n- `REQUEST_HEADERSContent-Type`: This specifies that the rule applies to the `Content-Type` header of the HTTP request.\\n- `^`: This anchors the match to the beginning of the string.\\n- `(application\\\\/x-www-form-urlencoded|text\\\\/xml)`: This is a group that matches either `application/x-www-form-urlencoded` or `text/xml`.\\n- `(?:;(?:\\\\s?charset\\\\s?=\\\\s?[\\\\w\\\\d\\\\-]{118})?)?`: This is an optional group that matches a semicolon followed by an optional `charset` parameter with a value of up to 118 characters consisting of alphanumeric characters and hyphens.\\n\\nFor example, this expression would match the following `Content-Type` headers:\\n- `application/x-www-form-urlencoded`\\n- `text/xml`\\n- `text/xml;charset=UTF-8`\\n- `application/x-www-form-urlencoded; charset=ISO-8859-1`\",\"explanation_id\":350,\"version\":36}"
  },
  {
    "id": "920260",
    "regex": "SecRule REQUEST_URI|REQUEST_BODY \"\\%u[fF]{2}[0-9a-fA-F]{2}\"",
    "explanation": "{\"explanation\":\"This expression is used to detect Unicode encoded characters in the URI or request body of a web application. \\n\\nThe regex expression consists of three parts: \\n1. \\\"\\\\%u\\\" - matches the literal characters \\\"%u\\\"\\n2. \\\"[fF]{2}\\\" - matches two consecutive occurrences of either \\\"f\\\" or \\\"F\\\"\\n3. \\\"[0-9a-fA-F]{2}\\\" - matches two consecutive occurrences of any hexadecimal digit (0-9, a-f, or A-F)\\n\\nFor example, if a user submits a request with the URI \\\"/example/%u0065xample\\\", this expression would match the \\\"%u0065\\\" portion of the URI, indicating the use of Unicode encoding.\",\"explanation_id\":351,\"version\":73}"
  },
  {
    "id": "920311",
    "regex": "SecRule REQUEST_HEADERSAccept ^$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect empty \\\"Accept\\\" headers in HTTP requests.\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"REQUEST_HEADERS\\\" is a variable that represents the HTTP headers in a request.\\n- \\\"^$\\\" is a regular expression pattern that matches an empty string.\\n\\nFor example, if a client sends a request without specifying the \\\"Accept\\\" header, the rule will be triggered and the request will be blocked or logged, depending on the configuration.\",\"explanation_id\":353,\"version\":90}"
  },
  {
    "id": "920330",
    "regex": "SecRule REQUEST_HEADERSUser-Agent ^$ ",
    "explanation": "{\"explanation\":\"This expression is used to detect empty User-Agent headers in HTTP requests.\\nThe regex expression consists of:\\n- \\\"SecRule\\\" which is a directive used in ModSecurity to define a rule.\\n- \\\"REQUEST_HEADERS\\\" which specifies that the rule applies to the headers of the HTTP request.\\n- \\\"User-Agent\\\" which is the name of the header being checked.\\n- \\\"^$\\\" which is the regular expression pattern used to match an empty string.\\nFor example, this rule can be used to block requests with empty User-Agent headers, which can be a sign of malicious activity.\",\"explanation_id\":354,\"version\":26}"
  },
  {
    "id": "920350",
    "regex": "SecRule REQUEST_HEADERSHost ^[\\d.:]+$ ",
    "explanation": "{\"explanation\":\"This expression is used to match IP addresses in the Host header of an HTTP request. \\n\\nThe regex expression consists of the following parts:\\n- `^`: anchor to the beginning of the string\\n- `[\\\\d.:]+`: character set that matches one or more digits, dots, or colons\\n- `$`: anchor to the end of the string\\n\\nFor example, this expression would match the following Host headers:\\n- `127.0.0.1`\\n- `::1`\\n- `192.168.0.1:8080`\\n\\nOverall, this expression is used to enforce security rules on incoming HTTP requests by ensuring that the Host header only contains valid IP addresses.\",\"explanation_id\":356,\"version\":80}"
  },
  {
    "id": "920440",
    "regex": "SecRule REQUEST_BASENAME \"\\.(.*)$\"",
    "explanation": "{\"explanation\":\"This expression is used to match the end of a file extension in a web application firewall rule. \\n\\nThe regex expression consists of two parts: \\n1. \\\"SecRule REQUEST_BASENAME\\\" specifies that the rule should be applied to the basename of the requested file. \\n2. \\\"\\\\.(.*)$\\\" matches any character (represented by the dot) followed by any number of characters (represented by the asterisk) until the end of the string (represented by the dollar sign). This effectively matches the file extension at the end of the requested file.\\n\\nFor example, if the requested file is \\\"example.html\\\", the regex will match \\\".html\\\".\",\"explanation_id\":358,\"version\":94}"
  },
  {
    "id": "920450",
    "regex": "SecRule REQUEST_HEADERS_NAMES \"@rx ^(.*)$\"",
    "explanation": "{\"explanation\":\"This expression is used to match any string that starts with any character and ends with any character. \\n\\nThe regex expression consists of one part: \\n- \\\"^\\\" matches the start of the string\\n- \\\"(.*)\\\" matches any character zero or more times\\n- \\\"$\\\" matches the end of the string\\n\\nFor example, this expression can be used to match the following strings:\\n- \\\"hello\\\"\\n- \\\"123\\\"\\n- \\\"!@#$%^&*()_+\\\"\\n- \\\"   \\\" (spaces)\\n\\nBegin:\\nRegex:SecRule REQUEST_HEADERS_NAMES \\\"@rx ^(.*)$\\\"\",\"explanation_id\":359,\"version\":83}"
  },
  {
    "id": "920230",
    "regex": "SecRule ARGS \"\\%((?!$|\\W)|[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})\"",
    "explanation": "{\"explanation\":\"This expression is used to detect potential SQL injection attacks in web application security. \\n\\nThe regex expression consists of three parts: \\n1. \\\"\\\\%\\\" - matches the percent sign, which is commonly used in SQL injection attacks to escape characters.\\n2. \\\"(?!$|\\\\W)\\\" - a negative lookahead that ensures the matched percent sign is not followed by the end of the string or a non-word character. This prevents false positives from matching percent signs used in URLs or other legitimate contexts.\\n3. \\\"|[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}\\\" - matches either two hexadecimal digits or a Unicode code point in the format \\\"uXXXX\\\", which are commonly used in SQL injection attacks to encode malicious payloads.\\n\\nFor example, this expression would match the following strings:\\n- \\\"%27\\\" (single quote)\\n- \\\"%20\\\" (space)\\n- \\\"u0061\\\" (lowercase \\\"a\\\" encoded as Unicode)\\nBut it would not match:\\n- \\\"%2F\\\" (forward slash, followed by a non-word character)\\n- \\\"%2527\\\" (single quote, double-encoded as percent signs)\\n- \\\"%20http\\\" (space followed by \\\"http\\\", indicating a legitimate URL)\",\"explanation_id\":360,\"version\":31}"
  },
  {
    "id": "920274",
    "regex": "SecRule REQUEST_HEADERS|!REQUEST_HEADERSUser-Agent|!REQUEST_HEADERS:Referer|!REQUEST_HEADERS:Cookie @validateByteRange 32343842-596165-909597-122 ",
    "explanation": "{\"explanation\":\"This expression is used to validate byte ranges in HTTP headers, specifically in the User-Agent, Referer, and Cookie headers. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used in ModSecurity to define a rule. \\n- REQUEST_HEADERS|!REQUEST_HEADERSUser-Agent|!REQUEST_HEADERS:Referer|!REQUEST_HEADERS:Cookie: This specifies the HTTP headers to be checked. In this case, it checks all headers except for User-Agent, Referer, and Cookie. \\n- @validateByteRange: This is a ModSecurity function used to validate byte ranges. \\n- 32343842-596165-909597-122: This is the byte range to be validated. \\n\\nFor example, if a request header contains a byte range that falls outside of the specified range, the rule will trigger and the request will be blocked.\",\"explanation_id\":361,\"version\":13}"
  },
  {
    "id": "930120",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pmf lfi-os-files.data ",
    "explanation": "{\"explanation\":\"This expression is used to detect attempts to access sensitive files on a web server using Local File Inclusion (LFI) attacks. \\n\\nThe regex expression consists of several parts: \\n- SecRule: This is a directive used by the ModSecurity module to define a rule for the web application firewall.\\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/*: These are variables that the rule will check for the presence of the specified pattern. In this case, the rule will look for the pattern in the HTTP request cookies, arguments, and XML data.\\n- @pmf: This is a transformation function that will apply a Perl-compatible regular expression (PCRE) pattern match to the specified file. \\n- lfi-os-files.data: This is the name of the file that contains the PCRE pattern to match against.\\n\\nFor example, if an attacker tries to access the /etc/passwd file using an LFI attack, the regex expression will detect the pattern and trigger the web application firewall to block the request.\",\"explanation_id\":363,\"version\":12}"
  },
  {
    "id": "930130",
    "regex": "SecRule REQUEST_FILENAME \"@pmf restricted-files.data\"",
    "explanation": "{\"explanation\":\"This expression is used to match a pattern in the REQUEST_FILENAME variable of a web application firewall (WAF) rule. \\n\\nThe regex expression consists of two parts: \\n1. SecRule: This is a directive used in ModSecurity, a WAF, to define a rule. \\n2. REQUEST_FILENAME \\\"@pmf restricted-files.data\\\": This is the actual regular expression that matches the REQUEST_FILENAME variable against a list of restricted files defined in the \\\"restricted-files.data\\\" file using the \\\"@pmf\\\" operator. \\n\\nFor example, if the REQUEST_FILENAME variable contains the string \\\"/etc/passwd\\\", and \\\"restricted-files.data\\\" contains the string \\\"/etc/passwd\\\", the regex will match and trigger the WAF rule.\",\"explanation_id\":364,\"version\":7}"
  },
  {
    "id": "950100",
    "regex": "SecRule RESPONSE_STATUS \"^5\\d{2}$\"",
    "explanation": "{\"explanation\":\"This expression is used to match any HTTP response status code that starts with the number 5 (indicating a server error). \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"RESPONSE_STATUS\\\" is a variable that represents the HTTP response status code.\\n- \\\"^5\\\" matches the beginning of the string and ensures that the status code starts with the number 5.\\n- \\\"\\\\d{2}\\\" matches any two digits after the initial 5.\\n\\nFor example, this expression would match response status codes such as 500, 503, and 599.\",\"explanation_id\":365,\"version\":59}"
  },
  {
    "id": "943110",
    "regex": "SecRule ARGS_NAMES \"@rx ^(jsessionid|aspsessionid|asp.net_sessionid|phpsession|phpsessid|weblogicsession|session_id|session-id|cfid|cftoken|cfsid|jservsession|jwsession)$\"",
    "explanation": "{\"explanation\":\"This expression is used to detect session IDs in web application requests.\\nThe regex expression consists of a single group that matches any of the listed session ID names, separated by the \\\"|\\\" character. The \\\"@\\\" character at the beginning indicates that this is a ModSecurity rule, which is used for web application firewalling.\\nFor example, if a request contains a parameter named \\\"jsessionid\\\", this expression will match and trigger the ModSecurity rule to take action (such as blocking the request or logging it).\\nBegin:\\nRegex: SecRule ARGS_NAMES \\\"@rx ^(jsessionid|aspsessionid|asp.net_sessionid|phpsession|phpsessid|weblogicsession|session_id|session-id|cfid|cftoken|cfsid|jservsession|jwsession)$\\\"\",\"explanation_id\":366,\"version\":96}"
  },
  {
    "id": "3699999",
    "regex": "sur",
    "explanation": "sur"
  },
  {
    "id": "931110",
    "regex": "SecRule QUERY_STRING|REQUEST_BODY (?i(\\binclude\\s*\\([^)]*|mosConfig_absolute_path|_CONF\\[path\\]|_SERVER\\[DOCUMENT_ROOT\\]|GALLERY_BASEDIR|path\\[docroot\\]|appserv_root|config\\[root_dir\\])=(file|ftps?|https?):\\/\\/) ",
    "explanation": "{\"error\":\"SecRule QUERY_STRING|REQUEST_BODY (?i(\\\\binclude\\\\s*\\\\([^)]*|mosConfig_absolute_path|_CONF\\\\[path\\\\]|_SERVER\\\\[DOCUMENT_ROOT\\\\]|GALLERY_BASEDIR|path\\\\[docroot\\\\]|appserv_root|config\\\\[root_dir\\\\])=(file|ftps?|https?):\\\\/\\\\/)  is not a valid regex\"}"
  },
  {
    "id": "931120",
    "regex": "SecRule ARGS ^(?i)(?file|ftps?|https?)(.*?)\\?+$ ",
    "explanation": "{\"error\":\"SecRule ARGS ^(?i)(?file|ftps?|https?)(.*?)\\\\?+$  is not a valid regex\"}"
  },
  {
    "id": "931130",
    "regex": "SecRule ARGS ^(?i)(?file|ftps?|https?)://(.*)$ ",
    "explanation": "{\"error\":\"SecRule ARGS ^(?i)(?file|ftps?|https?)://(.*)$  is not a valid regex\"}"
  },
  {
    "id": "954110",
    "regex": "SecRule RESPONSE_BODY (?Microsoft OLE DB Provider for SQL Server(?:<\\/font>.{120}?error 800(?:04005|40e31).{140}?Timeout expired| \\(0x80040e31\\)<br>Timeout expired<br>)|<h1>internal server error<\\/h1>.*?<h2>part of the server has crashed or it has a configuration error\\.<\\/h2>|cannot connect to the server: timed out) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY (?Microsoft OLE DB Provider for SQL Server(?:<\\\\/font>.{120}?error 800(?:04005|40e31).{140}?Timeout expired| \\\\(0x80040e31\\\\)<br>Timeout expired<br>)|<h1>internal server error<\\\\/h1>.*?<h2>part of the server has crashed or it has a configuration error\\\\.<\\\\/h2>|cannot connect to the server: timed out)  is not a valid regex\"}"
  },
  {
    "id": "954120",
    "regex": "SecRule RESPONSE_BODY (?b(?:A(?:DODB\\.Command\\b.{0100}?\\b(?:Application uses a value of the wrong type for the current operation\\b|error)| trappable error occurred in an external object\\. The script cannot continue running\\b)|Microsoft VBScript (?:compilation (?:\\(0x8|error)|runtime (?:Error|\\(0x8))\\b|Object required: |error 800)|<b>Version Information:<\\/b>(?:&nbsp;|\\s)(?:Microsoft \\.NET Framework|ASP\\.NET) Version:|>error ASP\\b|An Error Has Occurred|>Syntax error in string in query expression|\\/[Ee]rror[Mm]essage\\.aspx?\\?[Ee]rror\\b) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY (?b(?:A(?:DODB\\\\.Command\\\\b.{0100}?\\\\b(?:Application uses a value of the wrong type for the current operation\\\\b|error)| trappable error occurred in an external object\\\\. The script cannot continue running\\\\b)|Microsoft VBScript (?:compilation (?:\\\\(0x8|error)|runtime (?:Error|\\\\(0x8))\\\\b|Object required: |error 800)|<b>Version Information:<\\\\/b>(?:&nbsp;|\\\\s)(?:Microsoft \\\\.NET Framework|ASP\\\\.NET) Version:|>error ASP\\\\b|An Error Has Occurred|>Syntax error in string in query expression|\\\\/[Ee]rror[Mm]essage\\\\.aspx?\\\\?[Ee]rror\\\\b)  is not a valid regex\"}"
  },
  {
    "id": "942160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(sleep\\((\\s*?)(\\d*?)(\\s*?)\\)|benchmark\\((.*?)\\(.*?)\\))) ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(sleep\\\\((\\\\s*?)(\\\\d*?)(\\\\s*?)\\\\)|benchmark\\\\((.*?)\\\\(.*?)\\\\)))  is not a valid regex\"}"
  },
  {
    "id": "942130",
    "regex": "SecRule ARGS_NAMES|ARGS|XML/* (?i:([\\s\\`\\(\\)]*?)([\\d\\w]++)([\\s\\`\\(\\)]*?)(?:(?:=|<=>|r?like|sounds\\s+like|regexp)([\\s\\`\\(\\)]*?)\\2|(?:!=|<=|>=|<>|<|>|\\^|is\\s+not|not\\s+like|not\\s+regexp)([\\s\\`\\(\\)]*?)(?!\\2)([\\d\\w]+))) ",
    "explanation": "{\"error\":\"SecRule ARGS_NAMES|ARGS|XML/* (?i:([\\\\s\\\\`\\\\(\\\\)]*?)([\\\\d\\\\w]++)([\\\\s\\\\`\\\\(\\\\)]*?)(?:(?:=|<=>|r?like|sounds\\\\s+like|regexp)([\\\\s\\\\`\\\\(\\\\)]*?)\\\\2|(?:!=|<=|>=|<>|<|>|\\\\^|is\\\\s+not|not\\\\s+like|not\\\\s+regexp)([\\\\s\\\\`\\\\(\\\\)]*?)(?!\\\\2)([\\\\d\\\\w]+)))  is not a valid regex\"}"
  },
  {
    "id": "942370",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:[\\`]\\s*?\\*.+(?:x?or|div|like|between|and|id)\\W*?[\\`]\\d)|(?:\\^[\\`])|(?:^[\\w\\s\\`-]+(?<=and\\s)(?<=or|xor|div|like|between|and\\s)(?<=xor\\s)(?<=nand\\s)(?<=not\\s)(?<=\\|\\|)(?<=\\&\\&)\\w+\\()|(?:[\\`][\\s\\d]*?[^\\w\\s]+\\W*?\\d\\W*?.*?[\\`\\d])|(?:[\\`]\\s*?[^\\w\\s?]+\\s*?[^\\w\\s]+\\s*?[\\`])|(?:[\\`]\\s*?[^\\w\\s]+\\s*?[\\W\\d].*?(?:#|--))|(?:[\\`].*?\\*\\s*?\\d)|(?:[\\`]\\s*?(x?or|div|like|between|and)\\s[^\\d]+[\\w-]+.*?\\d)|(?:[()\\*<>%+-][\\w-]+[^\\w\\s]+[\\`][^])) ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* (?i:(?:[\\\\`]\\\\s*?\\\\*.+(?:x?or|div|like|between|and|id)\\\\W*?[\\\\`]\\\\d)|(?:\\\\^[\\\\`])|(?:^[\\\\w\\\\s\\\\`-]+(?<=and\\\\s)(?<=or|xor|div|like|between|and\\\\s)(?<=xor\\\\s)(?<=nand\\\\s)(?<=not\\\\s)(?<=\\\\|\\\\|)(?<=\\\\&\\\\&)\\\\w+\\\\()|(?:[\\\\`][\\\\s\\\\d]*?[^\\\\w\\\\s]+\\\\W*?\\\\d\\\\W*?.*?[\\\\`\\\\d])|(?:[\\\\`]\\\\s*?[^\\\\w\\\\s?]+\\\\s*?[^\\\\w\\\\s]+\\\\s*?[\\\\`])|(?:[\\\\`]\\\\s*?[^\\\\w\\\\s]+\\\\s*?[\\\\W\\\\d].*?(?:#|--))|(?:[\\\\`].*?\\\\*\\\\s*?\\\\d)|(?:[\\\\`]\\\\s*?(x?or|div|like|between|and)\\\\s[^\\\\d]+[\\\\w-]+.*?\\\\d)|(?:[()\\\\*<>%+-][\\\\w-]+[^\\\\w\\\\s]+[\\\\`][^]))  is not a valid regex\"}"
  },
  {
    "id": "933160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* @rx (?i)\\b(?:s(?:e(?:t(?:_(?:e(?:xception|rror)_handler|magic_quotes_runtime|include_path)|defaultstub)|ssion_s(?:et_save_handler|tart))|qlite_(?:(?:(?:unbuffered|single|array)_)?query|create_(?:aggregate|function)|p?open|exec)|tr(?:eam_(?:context_create|socket_client)|ipc?slashes|rev)|implexml_load_(?:string|file)|ocket_c(?:onnect|reate)|h(?:ow_sourc|a1_fil)e|pl_autoload_register|ystem)|p(?:r(?:eg_(?:replace(?:_callback(?:_array)?)?|match(?:_all)?|split)|oc_(?:(?:terminat|clos|nic)e|get_status|open)|int_r)|o(?:six_(?:get(?:(?:e[gu]|g)id|login|pwnam)|mk(?:fifo|nod)|ttyname|kill)|pen)|hp(?:_(?:strip_whitespac|unam)e|version|info)|g_(?:(?:execut|prepar)e|connect|query)|a(?:rse_(?:ini_file|str)|ssthru)|utenv)|r(?:unkit_(?:function_(?:re(?:defin|nam)e|copy|add)|method_(?:re(?:defin|nam)e|copy|add)|constant_(?:redefine|add))|e(?:(?:gister_(?:shutdown|tick)|name)_function|ad(?:(?:gz)?file|_exif_data|dir))|awurl(?:de|en)code)|i(?:mage(?:createfrom(?:(?:jpe|pn)g|x[bp]m|wbmp|gif)|(?:jpe|pn)g|g(?:d2?|if)|2?wbmp|xbm)|s_(?:(?:(?:execut|write?|read)ab|fi)le|dir)|ni_(?:get(?:_all)?|set)|terator_apply|ptcembed)|g(?:et(?:_(?:c(?:urrent_use|fg_va)r|meta_tags)|my(?:[gpu]id|inode)|(?:lastmo|cw)d|imagesize|env)|z(?:(?:(?:defla|wri)t|encod|fil)e|compress|open|read)|lob)|a(?:rray_(?:u(?:intersect(?:_u?assoc)?|diff(?:_u?assoc)?)|intersect_u(?:assoc|key)|diff_u(?:assoc|key)|filter|reduce|map)|ssert(?:_options)?)|h(?:tml(?:specialchars(?:_decode)?|_entity_decode|entities)|(?:ash(?:_(?:update|hmac))?|ighlight)_file|e(?:ader_register_callback|x2bin))|f(?:i(?:le(?:(?:[acm]tim|inod)e|(?:_exist|perm)s|group)?|nfo_open)|tp_(?:nb_(?:ge|pu)|connec|ge|pu)t|(?:unction_exis|pu)ts|write|open)|o(?:b_(?:get_(?:c(?:ontents|lean)|flush)|end_(?:clean|flush)|clean|flush|start)|dbc_(?:result(?:_all)?|exec(?:ute)?|connect)|pendir)|m(?:b_(?:ereg(?:_(?:replace(?:_callback)?|match)|i(?:_replace)?)?|parse_str)|(?:ove_uploaded|d5)_file|ethod_exists|ysql_query|kdir)|e(?:x(?:if_(?:t(?:humbnail|agname)|imagetype|read_data)|ec)|scapeshell(?:arg|cmd)|rror_reporting|val)|c(?:url_(?:file_create|exec|init)|onvert_uuencode|reate_function|hr)|u(?:n(?:serialize|pack)|rl(?:de|en)code|[ak]?sort)|(?:json_(?:de|en)cod|debug_backtrac|tmpfil)e|b(?:(?:son_(?:de|en)|ase64_en)code|zopen)|var_dump)(?:\\s|/\\*.*\\*/|//.*|#.*)*\\(.*\\) ",
    "explanation": "{\"explanation\":\"This expression is used to detect potential security threats in web requests by searching for certain PHP functions that may be used maliciously. \\n\\nThe regex expression consists of several parts: \\n- SecRule: indicates that this is a rule for a web application firewall (WAF) \\n- REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*: specifies the locations in the request where the rule should be applied \\n- @rx: indicates that the following is a regular expression \\n- (?i): sets the regular expression to be case-insensitive \\n- \\\\b(?:...): the main part of the regular expression, which searches for a list of PHP functions that may be used maliciously \\n- (\\\\s|/\\\\*.*\\\\*/|//.*|#.*)*: allows for any whitespace or comments before the function call \\n- \\\\(.*\\\\): matches any arguments passed to the function \\n\\nFor example, this expression would detect if a request contained a call to the PHP function \\\"exec\\\", which could be used to execute arbitrary commands on the server.\",\"explanation_id\":377,\"version\":96}"
  },
  {
    "id": "901450",
    "regex": 0,
    "explanation": "<!doctype html><html lang=en><title>500 Internal Server Error</title><h1>Internal Server Error</h1><p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>"
  },
  {
    "id": "941160",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* (?i)<[^\\w<>]*(?:[^<>\\\\s]*:)?[^\\w<>]*(?:\\W*?s\\W*?c\\W*?r\\W*?i\\W*?p\\W*?t|\\W*?f\\W*?o\\W*?r\\W*?m|\\W*?s\\W*?t\\W*?y\\W*?l\\W*?e|\\W*?s\\W*?v\\W*?g|\\W*?m\\W*?a\\W*?r\\W*?q\\W*?u\\W*?e\\W*?e|(?:\\W*?l\\W*?i\\W*?n\\W*?k|\\W*?o\\W*?b\\W*?j\\W*?e\\W*?c\\W*?t|\\W*?e\\W*?m\\W*?b\\W*?e\\W*?d|\\W*?a\\W*?p\\W*?p\\W*?l\\W*?e\\W*?t|\\W*?p\\W*?a\\W*?r\\W*?a\\W*?m|\\W*?i?\\W*?f\\W*?r\\W*?a\\W*?m\\W*?e|\\W*?b\\W*?a\\W*?s\\W*?e|\\W*?b\\W*?o\\W*?d\\W*?y|\\W*?m\\W*?e\\W*?t\\W*?a|\\W*?i\\W*?m\\W*?a?\\W*?g\\W*?e?|\\W*?v\\W*?i\\W*?d\\W*?e\\W*?o|\\W*?a\\W*?u\\W*?d\\W*?i\\W*?o|\\W*?b\\W*?i\\W*?n\\W*?d\\W*?i\\W*?n\\W*?g\\W*?s|\\W*?s\\W*?e\\W*?t|\\W*?a\\W*?n\\W*?i\\W*?m\\W*?a\\W*?t\\W*?e)[^>\\w])|(?:<\\w[\\s\\S]*[\\s\\/]|[\\](?:[\\s\\S]*[\\s\\/])?)(?:formaction|style|background|src|lowsrc|ping|on(?:d(?:e(?:vice(?:(?:orienta|mo)tion|proximity|found|light)|livery(?:success|error)|activate)|r(?:ag(?:e(?:n(?:ter|d)|xit)|(?:gestur|leav)e|start|drop|over)?|op)|i(?:s(?:c(?:hargingtimechange|onnect(?:ing|ed))|abled)|aling)|ata(?:setc(?:omplete|hanged)|(?:availabl|chang)e|error)|urationchange|ownloading|blclick)|Moz(?:M(?:agnifyGesture(?:Update|Start)?|ouse(?:PixelScroll|Hittest))|S(?:wipeGesture(?:Update|Start|End)?|crolledAreaChanged)|(?:(?:Press)?TapGestur|BeforeResiz)e|EdgeUI(?:C(?:omplet|ancel)|Start)ed|RotateGesture(?:Update|Start)?|A(?:udioAvailable|fterPaint))|c(?:o(?:m(?:p(?:osition(?:update|start|end)|lete)|mand(?:update)?)|n(?:t(?:rolselect|extmenu)|nect(?:ing|ed))|py)|a(?:(?:llschang|ch)ed|nplay(?:through)?|rdstatechange)|h(?:(?:arging(?:time)?ch)?ange|ecking)|(?:fstate|ell)change|u(?:echange|t)|l(?:ick|ose))|m(?:o(?:z(?:pointerlock(?:change|error)|(?:orientation|time)change|fullscreen(?:change|error)|network(?:down|up)load)|use(?:(?:lea|mo)ve|o(?:ver|ut)|enter|wheel|down|up)|ve(?:start|end)?)|essage|ark)|s(?:t(?:a(?:t(?:uschanged|echange)|lled|rt)|k(?:sessione|comma)nd|op)|e(?:ek(?:complete|ing|ed)|(?:lec(?:tstar)?)?t|n(?:ding|t))|u(?:ccess|spend|bmit)|peech(?:start|end)|ound(?:start|end)|croll|how)|b(?:e(?:for(?:e(?:(?:scriptexecu|activa)te|u(?:nload|pdate)|p(?:aste|rint)|c(?:opy|ut)|editfocus)|deactivate)|gin(?:Event)?)|oun(?:dary|ce)|l(?:ocked|ur)|roadcast|usy)|a(?:n(?:imation(?:iteration|start|end)|tennastatechange)|fter(?:(?:scriptexecu|upda)te|print)|udio(?:process|start|end)|d(?:apteradded|dtrack)|ctivate|lerting|bort)|DOM(?:Node(?:Inserted(?:IntoDocument)?|Removed(?:FromDocument)?)|(?:CharacterData|Subtree)Modified|A(?:ttrModified|ctivate)|Focus(?:Out|In)|MouseScroll)|r(?:e(?:s(?:u(?:m(?:ing|e)|lt)|ize|et)|adystatechange|pea(?:tEven)?t|movetrack|trieving|ceived)|ow(?:s(?:inserted|delete)|e(?:nter|xit))|atechange)|p(?:op(?:up(?:hid(?:den|ing)|show(?:ing|n))|state)|a(?:ge(?:hide|show)|(?:st|us)e|int)|ro(?:pertychange|gress)|lay(?:ing)?)|t(?:ouch(?:(?:lea|mo)ve|en(?:ter|d)|cancel|start)|ime(?:update|out)|ransitionend|ext)|u(?:s(?:erproximity|sdreceived)|p(?:gradeneeded|dateready)|n(?:derflow|load))|f(?:o(?:rm(?:change|input)|cus(?:out|in)?)|i(?:lterchange|nish)|ailed)|l(?:o(?:ad(?:e(?:d(?:meta)?data|nd)|start)?|secapture)|evelchange|y)|g(?:amepad(?:(?:dis)?connected|button(?:down|up)|axismove)|et)|e(?:n(?:d(?:Event|ed)?|abled|ter)|rror(?:update)?|mptied|xit)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|valid|put))|o(?:(?:(?:ff|n)lin|bsolet)e|verflow(?:changed)?|pen)|SVG(?:(?:Unl|L)oad|Resize|Scroll|Abort|Error|Zoom)|h(?:e(?:adphoneschange|l[dp])|ashchange|olding)|v(?:o(?:lum|ic)e|ersion)change|w(?:a(?:it|rn)ing|heel)|key(?:press|down|up)|(?:AppComman|Loa)d|no(?:update|match)|Request|zoom))[\\s\\x08]*?= ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* (?i)<[^\\\\w<>]*(?:[^<>\\\\\\\\s]*:)?[^\\\\w<>]*(?:\\\\W*?s\\\\W*?c\\\\W*?r\\\\W*?i\\\\W*?p\\\\W*?t|\\\\W*?f\\\\W*?o\\\\W*?r\\\\W*?m|\\\\W*?s\\\\W*?t\\\\W*?y\\\\W*?l\\\\W*?e|\\\\W*?s\\\\W*?v\\\\W*?g|\\\\W*?m\\\\W*?a\\\\W*?r\\\\W*?q\\\\W*?u\\\\W*?e\\\\W*?e|(?:\\\\W*?l\\\\W*?i\\\\W*?n\\\\W*?k|\\\\W*?o\\\\W*?b\\\\W*?j\\\\W*?e\\\\W*?c\\\\W*?t|\\\\W*?e\\\\W*?m\\\\W*?b\\\\W*?e\\\\W*?d|\\\\W*?a\\\\W*?p\\\\W*?p\\\\W*?l\\\\W*?e\\\\W*?t|\\\\W*?p\\\\W*?a\\\\W*?r\\\\W*?a\\\\W*?m|\\\\W*?i?\\\\W*?f\\\\W*?r\\\\W*?a\\\\W*?m\\\\W*?e|\\\\W*?b\\\\W*?a\\\\W*?s\\\\W*?e|\\\\W*?b\\\\W*?o\\\\W*?d\\\\W*?y|\\\\W*?m\\\\W*?e\\\\W*?t\\\\W*?a|\\\\W*?i\\\\W*?m\\\\W*?a?\\\\W*?g\\\\W*?e?|\\\\W*?v\\\\W*?i\\\\W*?d\\\\W*?e\\\\W*?o|\\\\W*?a\\\\W*?u\\\\W*?d\\\\W*?i\\\\W*?o|\\\\W*?b\\\\W*?i\\\\W*?n\\\\W*?d\\\\W*?i\\\\W*?n\\\\W*?g\\\\W*?s|\\\\W*?s\\\\W*?e\\\\W*?t|\\\\W*?a\\\\W*?n\\\\W*?i\\\\W*?m\\\\W*?a\\\\W*?t\\\\W*?e)[^>\\\\w])|(?:<\\\\w[\\\\s\\\\S]*[\\\\s\\\\/]|[\\\\](?:[\\\\s\\\\S]*[\\\\s\\\\/])?)(?:formaction|style|background|src|lowsrc|ping|on(?:d(?:e(?:vice(?:(?:orienta|mo)tion|proximity|found|light)|livery(?:success|error)|activate)|r(?:ag(?:e(?:n(?:ter|d)|xit)|(?:gestur|leav)e|start|drop|over)?|op)|i(?:s(?:c(?:hargingtimechange|onnect(?:ing|ed))|abled)|aling)|ata(?:setc(?:omplete|hanged)|(?:availabl|chang)e|error)|urationchange|ownloading|blclick)|Moz(?:M(?:agnifyGesture(?:Update|Start)?|ouse(?:PixelScroll|Hittest))|S(?:wipeGesture(?:Update|Start|End)?|crolledAreaChanged)|(?:(?:Press)?TapGestur|BeforeResiz)e|EdgeUI(?:C(?:omplet|ancel)|Start)ed|RotateGesture(?:Update|Start)?|A(?:udioAvailable|fterPaint))|c(?:o(?:m(?:p(?:osition(?:update|start|end)|lete)|mand(?:update)?)|n(?:t(?:rolselect|extmenu)|nect(?:ing|ed))|py)|a(?:(?:llschang|ch)ed|nplay(?:through)?|rdstatechange)|h(?:(?:arging(?:time)?ch)?ange|ecking)|(?:fstate|ell)change|u(?:echange|t)|l(?:ick|ose))|m(?:o(?:z(?:pointerlock(?:change|error)|(?:orientation|time)change|fullscreen(?:change|error)|network(?:down|up)load)|use(?:(?:lea|mo)ve|o(?:ver|ut)|enter|wheel|down|up)|ve(?:start|end)?)|essage|ark)|s(?:t(?:a(?:t(?:uschanged|echange)|lled|rt)|k(?:sessione|comma)nd|op)|e(?:ek(?:complete|ing|ed)|(?:lec(?:tstar)?)?t|n(?:ding|t))|u(?:ccess|spend|bmit)|peech(?:start|end)|ound(?:start|end)|croll|how)|b(?:e(?:for(?:e(?:(?:scriptexecu|activa)te|u(?:nload|pdate)|p(?:aste|rint)|c(?:opy|ut)|editfocus)|deactivate)|gin(?:Event)?)|oun(?:dary|ce)|l(?:ocked|ur)|roadcast|usy)|a(?:n(?:imation(?:iteration|start|end)|tennastatechange)|fter(?:(?:scriptexecu|upda)te|print)|udio(?:process|start|end)|d(?:apteradded|dtrack)|ctivate|lerting|bort)|DOM(?:Node(?:Inserted(?:IntoDocument)?|Removed(?:FromDocument)?)|(?:CharacterData|Subtree)Modified|A(?:ttrModified|ctivate)|Focus(?:Out|In)|MouseScroll)|r(?:e(?:s(?:u(?:m(?:ing|e)|lt)|ize|et)|adystatechange|pea(?:tEven)?t|movetrack|trieving|ceived)|ow(?:s(?:inserted|delete)|e(?:nter|xit))|atechange)|p(?:op(?:up(?:hid(?:den|ing)|show(?:ing|n))|state)|a(?:ge(?:hide|show)|(?:st|us)e|int)|ro(?:pertychange|gress)|lay(?:ing)?)|t(?:ouch(?:(?:lea|mo)ve|en(?:ter|d)|cancel|start)|ime(?:update|out)|ransitionend|ext)|u(?:s(?:erproximity|sdreceived)|p(?:gradeneeded|dateready)|n(?:derflow|load))|f(?:o(?:rm(?:change|input)|cus(?:out|in)?)|i(?:lterchange|nish)|ailed)|l(?:o(?:ad(?:e(?:d(?:meta)?data|nd)|start)?|secapture)|evelchange|y)|g(?:amepad(?:(?:dis)?connected|button(?:down|up)|axismove)|et)|e(?:n(?:d(?:Event|ed)?|abled|ter)|rror(?:update)?|mptied|xit)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|valid|put))|o(?:(?:(?:ff|n)lin|bsolet)e|verflow(?:changed)?|pen)|SVG(?:(?:Unl|L)oad|Resize|Scroll|Abort|Error|Zoom)|h(?:e(?:adphoneschange|l[dp])|ashchange|olding)|v(?:o(?:lum|ic)e|ersion)change|w(?:a(?:it|rn)ing|heel)|key(?:press|down|up)|(?:AppComman|Loa)d|no(?:update|match)|Request|zoom))[\\\\s\\\\x08]*?=  is not a valid regex\"}"
  },
  {
    "id": "941180",
    "regex": "SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pm document.cookie document.write .parentnode .innerhtml window.location -moz-binding <!-- --> <![cdata[ ",
    "explanation": "{\"error\":\"SecRule REQUEST_COOKIES|!REQUEST_COOKIES/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* @pm document.cookie document.write .parentnode .innerhtml window.location -moz-binding <!-- --> <![cdata[  is not a valid regex\"}"
  },
  {
    "id": "953110",
    "regex": "SecRule RESPONSE_BODY (?b(?:f(?:tp_(?:nb_)?f?(?:ge|pu)t|get(?:s?s|c)|scanf|write|open|read)|gz(?:(?:encod|writ)e|compress|open|read)|s(?:ession_start|candir)|read(?:(?:gz)?file|dir)|move_uploaded_file|(?:proc_|bz)open|call_user_func)|\\$_(?:(?:pos|ge)t|session))\\b ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY (?b(?:f(?:tp_(?:nb_)?f?(?:ge|pu)t|get(?:s?s|c)|scanf|write|open|read)|gz(?:(?:encod|writ)e|compress|open|read)|s(?:ession_start|candir)|read(?:(?:gz)?file|dir)|move_uploaded_file|(?:proc_|bz)open|call_user_func)|\\\\$_(?:(?:pos|ge)t|session))\\\\b  is not a valid regex\"}"
  },
  {
    "id": "951110",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?JET Database Engine|Access Database Engine|\\[Microsoft\\]\\[ODBC Microsoft Access Driver\\]) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?JET Database Engine|Access Database Engine|\\\\[Microsoft\\\\]\\\\[ODBC Microsoft Access Driver\\\\])  is not a valid regex\"}"
  },
  {
    "id": "951120",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?ORA-[0-9][0-9][0-9][0-9]|java\\.sql\\.SQLException|Oracle error|Oracle.*Driver|Warning.*oci_.*|Warning.*ora_.*) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?ORA-[0-9][0-9][0-9][0-9]|java\\\\.sql\\\\.SQLException|Oracle error|Oracle.*Driver|Warning.*oci_.*|Warning.*ora_.*)  is not a valid regex\"}"
  },
  {
    "id": "951130",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?DB2 SQL error:|\\[IBM\\]\\[CLI Driver\\]\\[DB2/6000\\]|CLI Driver.*DB2|DB2 SQL error|db2_\\w+\\() ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?DB2 SQL error:|\\\\[IBM\\\\]\\\\[CLI Driver\\\\]\\\\[DB2/6000\\\\]|CLI Driver.*DB2|DB2 SQL error|db2_\\\\w+\\\\()  is not a valid regex\"}"
  },
  {
    "id": "951140",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?[DM_QUERY_E_SYNTAX\\]|has occurred in the vicinity of:) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?[DM_QUERY_E_SYNTAX\\\\]|has occurred in the vicinity of:)  is not a valid regex\"}"
  },
  {
    "id": "951150",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?Dynamic SQL Error) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?Dynamic SQL Error)  is not a valid regex\"}"
  },
  {
    "id": "951160",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?Exception (condition )?\\d+\\. Transaction rollback\\.) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?Exception (condition )?\\\\d+\\\\. Transaction rollback\\\\.)  is not a valid regex\"}"
  },
  {
    "id": "951170",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?org\\.hsqldb\\.jdbc) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?org\\\\.hsqldb\\\\.jdbc)  is not a valid regex\"}"
  },
  {
    "id": "951180",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?An illegal character has been found in the statement|com\\.informix\\.jdbc|Exception.*Informix) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?An illegal character has been found in the statement|com\\\\.informix\\\\.jdbc|Exception.*Informix)  is not a valid regex\"}"
  },
  {
    "id": "951190",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?Warning.*ingres_|Ingres SQLSTATE|Ingres\\W.*Driver) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?Warning.*ingres_|Ingres SQLSTATE|Ingres\\\\W.*Driver)  is not a valid regex\"}"
  },
  {
    "id": "951200",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?<b>Warning</b>: ibase_|Unexpected end of command in statement) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?<b>Warning</b>: ibase_|Unexpected end of command in statement)  is not a valid regex\"}"
  },
  {
    "id": "951210",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?SQL error.*POS([0-9]+).*|Warning.*maxdb.*) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?SQL error.*POS([0-9]+).*|Warning.*maxdb.*)  is not a valid regex\"}"
  },
  {
    "id": "951220",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?System\\.Data\\.OleDb\\.OleDbException|\\[Microsoft\\]\\[ODBC SQL Server Driver\\]|\\[Macromedia\\]\\[SQLServer JDBC Driver\\]|\\[SqlException|System\\.Data\\.SqlClient\\.SqlException|Unclosed quotation mark after the character string|80040e14|mssql_query\\(\\)|Microsoft OLE DB Provider for ODBC Drivers|Microsoft OLE DB Provider for SQL Server|Incorrect syntax near|Sintaxis incorrecta cerca de|Syntax error in string in query expression|Procedure or function .* expects parameter|Unclosed quotation mark before the character string|Syntax error .* in query expression|Data type mismatch in criteria expression\\.|ADODB\\.Field \\(0x800A0BCD\\)|the used select statements have different number of columns|OLE DB.*SQL Server|Warning.*mssql_.*|Driver.*SQL[\\-\\_\\ ]*Server|SQL Server.*Driver|SQL Server.*[0-9a-fA-F]{8}|Exception.*\\WSystem\\.Data\\.SqlClient\\.) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?System\\\\.Data\\\\.OleDb\\\\.OleDbException|\\\\[Microsoft\\\\]\\\\[ODBC SQL Server Driver\\\\]|\\\\[Macromedia\\\\]\\\\[SQLServer JDBC Driver\\\\]|\\\\[SqlException|System\\\\.Data\\\\.SqlClient\\\\.SqlException|Unclosed quotation mark after the character string|80040e14|mssql_query\\\\(\\\\)|Microsoft OLE DB Provider for ODBC Drivers|Microsoft OLE DB Provider for SQL Server|Incorrect syntax near|Sintaxis incorrecta cerca de|Syntax error in string in query expression|Procedure or function .* expects parameter|Unclosed quotation mark before the character string|Syntax error .* in query expression|Data type mismatch in criteria expression\\\\.|ADODB\\\\.Field \\\\(0x800A0BCD\\\\)|the used select statements have different number of columns|OLE DB.*SQL Server|Warning.*mssql_.*|Driver.*SQL[\\\\-\\\\_\\\\ ]*Server|SQL Server.*Driver|SQL Server.*[0-9a-fA-F]{8}|Exception.*\\\\WSystem\\\\.Data\\\\.SqlClient\\\\.)  is not a valid regex\"}"
  },
  {
    "id": "951230",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?supplied argument is not a valid MySQL|Column count doesnt match value count at row|mysql_fetch_array\\(\\)|on MySQL result index|You have an error in your SQL syntax;|You have an error in your SQL syntax near|MySQL server version for the right syntax to use|\\[MySQL\\]\\[ODBC|Column count doesnt match|Table [^]+ doesnt exist|SQL syntax.*MySQL|Warning.*mysql_.*|valid MySQL result|MySqlClient\\.) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?supplied argument is not a valid MySQL|Column count doesnt match value count at row|mysql_fetch_array\\\\(\\\\)|on MySQL result index|You have an error in your SQL syntax;|You have an error in your SQL syntax near|MySQL server version for the right syntax to use|\\\\[MySQL\\\\]\\\\[ODBC|Column count doesnt match|Table [^]+ doesnt exist|SQL syntax.*MySQL|Warning.*mysql_.*|valid MySQL result|MySqlClient\\\\.)  is not a valid regex\"}"
  },
  {
    "id": "951240",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?PostgreSQL query failed:|pg_query\\(\\) \\[:|pg_exec\\(\\) \\[:|PostgreSQL.*ERROR|Warning.*pg_.*|valid PostgreSQL result|Npgsql\\.|PG::([a-zA-Z]*)Error|Supplied argument is not a valid PostgreSQL (?:.*?) resource|Unable to connect to PostgreSQL server) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?PostgreSQL query failed:|pg_query\\\\(\\\\) \\\\[:|pg_exec\\\\(\\\\) \\\\[:|PostgreSQL.*ERROR|Warning.*pg_.*|valid PostgreSQL result|Npgsql\\\\.|PG::([a-zA-Z]*)Error|Supplied argument is not a valid PostgreSQL (?:.*?) resource|Unable to connect to PostgreSQL server)  is not a valid regex\"}"
  },
  {
    "id": "951260",
    "regex": "SecRule RESPONSE_BODY @rx (?i)(?Sybase message:|Warning.*sybase.*|Sybase.*Server message.*) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY @rx (?i)(?Sybase message:|Warning.*sybase.*|Sybase.*Server message.*)  is not a valid regex\"}"
  },
  {
    "id": "920100",
    "regex": "SecRule REQUEST_LINE !^(?i(?:[a-z]{310}\\s+(?:\\w{37}?://[\\w\\-\\./]*(?::\\d+)?)?/[^?#]*(?:\\?[^#\\s]*)?(?:#[\\S]*)?|connect (?:\\d{13}\\.){3}\\d{13}\\.?(?::\\d+)?|options \\*)\\s+[\\w\\./]+|get /[^?#]*(?:\\?[^#\\s]*)?(?:#[\\S]*)?)$",
    "explanation": "{\"error\":\"SecRule REQUEST_LINE !^(?i(?:[a-z]{310}\\\\s+(?:\\\\w{37}?://[\\\\w\\\\-\\\\./]*(?::\\\\d+)?)?/[^?#]*(?:\\\\?[^#\\\\s]*)?(?:#[\\\\S]*)?|connect (?:\\\\d{13}\\\\.){3}\\\\d{13}\\\\.?(?::\\\\d+)?|options \\\\*)\\\\s+[\\\\w\\\\./]+|get /[^?#]*(?:\\\\?[^#\\\\s]*)?(?:#[\\\\S]*)?)$ is not a valid regex\"}"
  },
  {
    "id": "920120",
    "regex": "SecRule FILES_NAMES|FILES (?<!&(?[aAoOuUyY]uml)|&(?:[aAeEiIoOuU]circ)|&(?:[eEiIoOuUyY]acute)|&(?:[aAeEiIoOuU]grave)|&(?:[cC]cedil)|&(?:[aAnNoO]tilde)|&(?:amp)|&(?:apos));|[\\=] ",
    "explanation": "{\"error\":\"SecRule FILES_NAMES|FILES (?<!&(?[aAoOuUyY]uml)|&(?:[aAeEiIoOuU]circ)|&(?:[eEiIoOuUyY]acute)|&(?:[aAeEiIoOuU]grave)|&(?:[cC]cedil)|&(?:[aAnNoO]tilde)|&(?:amp)|&(?:apos));|[\\\\=]  is not a valid regex\"}"
  },
  {
    "id": "920170",
    "regex": "SecRule REQUEST_METHOD ^(?GET|HEAD)$ ",
    "explanation": "{\"error\":\"SecRule REQUEST_METHOD ^(?GET|HEAD)$  is not a valid regex\"}"
  },
  {
    "id": "920420",
    "regex": "SecRule REQUEST_METHOD !^(?GET|HEAD|PROPFIND|OPTIONS)$ ",
    "explanation": "{\"error\":\"SecRule REQUEST_METHOD !^(?GET|HEAD|PROPFIND|OPTIONS)$  is not a valid regex\"}"
  },
  {
    "id": "950130",
    "regex": "SecRule RESPONSE_BODY (?<(?:TITLE>Index of.*?<H|title>Index of.*?<h)1>Index of|>\\[To Parent Directory\\]<\\/[Aa]><br>) ",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY (?<(?:TITLE>Index of.*?<H|title>Index of.*?<h)1>Index of|>\\\\[To Parent Directory\\\\]<\\\\/[Aa]><br>)  is not a valid regex\"}"
  },
  {
    "id": "954130",
    "regex": "SecRule RESPONSE_STATUS \"!@rx ^402$\"",
    "explanation": "{\"explanation\":\"This expression is used to match a specific HTTP response status code (402 - Payment Required) in a web application firewall rule. \\n\\nThe regex expression consists of two parts: \\n1. \\\"SecRule RESPONSE_STATUS\\\" specifies that the rule applies to the HTTP response status code. \\n2. \\\"!@rx ^402$\\\" is the regular expression that matches any response status code that is not equal to 402. \\n\\nFor example, if the web application firewall is configured to block any response with a status code of 402, this rule would allow all other response codes to pass through. \\n\\nOverall, this regex expression is used to filter and control the behavior of web application responses based on their status codes.\",\"explanation_id\":519,\"version\":41}\n"
  },
  {
    "id": "954130",
    "regex": "SecRule RESPONSE_STATUS \"!@^403$\"",
    "explanation": "{\"explanation\":\"This expression is used to match any response status code that is not equal to 403. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"RESPONSE_STATUS\\\" is a variable that represents the HTTP response status code.\\n- \\\"!@\\\" is a negation operator that means \\\"not equal to\\\".\\n- \\\"^403$\\\" is a regular expression pattern that matches the exact string \\\"403\\\".\\n\\nFor example, this expression can be used in a ModSecurity rule to block all requests that return a response status code other than 403.\",\"explanation_id\":520,\"version\":33}\n"
  },
  {
    "id": "954130",
    "regex": "SecRule RESPONSE_STATUS \"!@^$\"",
    "explanation": "{\"explanation\":\"This expression is used to match a specific response status in a web application firewall rule. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" indicates that this is a security rule in a web application firewall.\\n- \\\"RESPONSE_STATUS\\\" is the parameter being checked in the response header.\\n- \\\"!@^$\\\" is the regular expression used to match the response status. In this case, it matches any response status that is not empty.\\n\\nFor example, if the response status is \\\"200 OK\\\", the expression will match. However, if the response status is empty, the expression will not match.\",\"explanation_id\":521,\"version\":37}\n"
  },
  {
    "id": "954130",
    "regex": "SecRule RESPONSE_STATUS \"!@<!--^$\"",
    "explanation": "{\"explanation\":\"This expression is used to match a ModSecurity rule that checks the response status code of a web server's response. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" - a ModSecurity directive that defines a rule\\n- \\\"RESPONSE_STATUS\\\" - a variable that represents the response status code\\n- \\\"!@\\\" - a negation operator that matches any character except the following character(s)\\n- \\\"<!--^$\\\" - a regular expression that matches the start of an HTML comment tag\\n\\nTherefore, this expression matches any response status code that does not contain the start of an HTML comment tag. \\n\\nFor example, if the response status code is \\\"200 OK\\\", the expression would match. However, if the response status code is \\\"404 <!-- Not Found -->\\\", the expression would not match.\",\"explanation_id\":522,\"version\":17}\n"
  },
  {
    "id": "955160",
    "regex": "SecRule RESPONSE_BODY \"@xx <title>Symlink_Sa [0-9.]+</title>\"",
    "explanation": "{\"explanation\":\"This expression is used to match a specific pattern in the response body of a web server. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity, a web application firewall, to define a rule.\\n- \\\"RESPONSE_BODY\\\" is a variable that represents the body of the HTTP response.\\n- \\\"@xx\\\" is a marker that indicates the start of a regular expression.\\n- \\\"<title>Symlink_Sa\\\" matches the literal string \\\"<title>Symlink_Sa\\\".\\n- \\\"[0-9.]+\\\" matches one or more digits or dots.\\n- \\\"</title>\\\" matches the literal string \\\"</title>\\\".\\n\\nFor example, this expression can be used to detect if a web page contains a title tag with the text \\\"Symlink_Sa\\\" followed by a version number. If a match is found, the web application firewall can take action to block the request or alert the administrator.\",\"explanation_id\":523,\"version\":83}\n"
  },
  {
    "id": "955160",
    "regex": "SecRule RESPONSE_BODY \"@xx <titles>Symlink_Sa [0-9.]+</title>\"",
    "explanation": "{\"explanation\":\"This expression is used to detect potential symlink attacks in the response body of a web application. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"RESPONSE_BODY\\\" is a variable that represents the response body of a web application.\\n- \\\"@xx\\\" is a marker that indicates the start of a regular expression.\\n- \\\"<titles>Symlink_Sa\\\" matches the literal string \\\"<titles>Symlink_Sa\\\".\\n- \\\"[0-9.]+\\\" matches one or more digits or dots.\\n- \\\"</title>\\\" matches the literal string \\\"</title>\\\".\\n\\nFor example, if the response body contains the string \\\"<titles>Symlink_Sa 127.0.0.1</title>\\\", the regex will match and trigger the rule.\",\"explanation_id\":524,\"version\":91}\n"
  },
  {
    "id": "955160",
    "regex": "SecRule RESPONSE_BODY \"@xx <titles>Symlink_Sa [0-9.]+</title\"",
    "explanation": "{\"explanation\":\"This expression is used to identify potential symlink attacks in the response body of a web application. \\n\\nThe regex expression consists of the following parts:\\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule.\\n- \\\"RESPONSE_BODY\\\" is a variable that represents the response body of a web application.\\n- \\\"@xx\\\" is a marker that indicates the start of a regular expression.\\n- \\\"<titles>Symlink_Sa\\\" matches the literal string \\\"<titles>Symlink_Sa\\\".\\n- \\\"[0-9.]+\\\" matches one or more digits or dots.\\n- \\\"</title\\\" matches the literal string \\\"</title\\\".\\n\\nFor example, if the response body contains the string \\\"<titles>Symlink_Sa 127.0.0.1</title>\\\", the regex expression will match \\\"127.0.0.1\\\" as a potential IP address used in a symlink attack.\",\"explanation_id\":525,\"version\":49}\n"
  },
  {
    "id": "955160",
    "regex": "SecRule RESPONSE_BODY \"@rx <title>Symlink_Sa [0?9.]+</title>\"",
    "explanation": "{\"explanation\":\"This expression is used to match a specific pattern in the response body of a web server. \\n\\nThe regex expression consists of several parts: \\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule for the web application firewall. \\n- \\\"RESPONSE_BODY\\\" is a variable that represents the response body of the HTTP request. \\n- \\\"@rx\\\" is a regular expression operator that indicates the following pattern should be treated as a regular expression. \\n- \\\"<title>Symlink_Sa\\\" matches the literal string \\\"<title>Symlink_Sa\\\". \\n- \\\"[0?9.]+</title>\\\" matches any combination of digits (0-9) and periods (.) between the \\\"<title>Symlink_Sa\\\" and \\\"</title>\\\" tags. The \\\"+\\\" indicates that there must be at least one digit or period, but there can be more. \\n\\nFor example, this expression would match the following response body: \\n```\\n<html>\\n<head>\\n<title>Symlink_Sa 1.0.2</title>\\n</head>\\n<body>\\n...\\n</body>\\n</html>\\n```\",\"explanation_id\":528,\"version\":47}\n"
  },
  {
    "id": "955160",
    "regex": "SecRule RESPONSE_BODY \"@rx <title>Symlink_Sa [0?????.]+</title>\"",
    "explanation": "{\"explanation\":\"This expression is used to match a specific pattern in the response body of an HTTP request. \\n\\nThe regex expression consists of several parts: \\n- \\\"SecRule\\\" is a directive used in ModSecurity to define a rule that will be applied to incoming requests or responses. \\n- \\\"RESPONSE_BODY\\\" is a variable that represents the body of the HTTP response. \\n- \\\"@rx\\\" is a keyword that indicates the following pattern is a regular expression. \\n- \\\"<title>Symlink_Sa\\\" matches the literal string \\\"<title>Symlink_Sa\\\". \\n- \\\"[0?????.]+\\\" matches one or more characters that are either a digit (0-9), a question mark (?), or a period (.). \\n\\nFor example, this expression would match the following response body: \\n```\\n<html>\\n<head>\\n<title>Symlink_Sa 0123?.</title>\\n</head>\\n<body>\\n...\\n</body>\\n</html>\\n```\",\"explanation_id\":529,\"version\":93}\n"
  },
  {
    "id": "931120",
    "regex": "SecRule ARGS @rx ^(?ifile|ftps?|https?).*?\\?+$ ))",
    "explanation": "{\"error\":\"SecRule ARGS @rx ^(?ifile|ftps?|https?).*?\\\\?+$ )) is not a valid regex\"}\n"
  },
  {
    "id": "955160",
    "regex": "SecRule RESPONSE_BODY \"@rx <title>Symlink_Sa [0-9.]+</title>][*\"",
    "explanation": "{\"error\":\"SecRule RESPONSE_BODY \\\"@rx <title>Symlink_Sa [0-9.]+</title>][*\\\" is not a valid regex\"}\n"
  }
]
